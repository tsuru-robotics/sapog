# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /tmp/yakut-dsdl-zmn42v0l/public_regulated_data_types-master/reg/drone/physics/kinematics/rotation/PlanarTs.0.1.uavcan
#
# Generated at:  2021-09-29 15:15:52.660750 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     reg.drone.physics.kinematics.rotation.PlanarTs
# Version:       0.1
#
# pylint: skip-file

from __future__ import annotations
import numpy as _np_
import typing as _ty_
import pydsdl as _pydsdl_
import pyuavcan.dsdl as _dsdl_
import reg.drone.physics.kinematics.rotation
import uavcan.time


# noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class PlanarTs_0_1(_dsdl_.CompositeObject):
    """
    Generated property settings use relaxed type signatures, accepting a large variety of
    possible representations of the value, which are automatically converted to a well-defined
    internal representation. When accessing a property, this strict well-defined internal
    representation is always returned. The implicit strictification enables more precise static
    type analysis.

    The value returned by the __repr__() method may be invariant to some of the field values,
    and its format is not guaranteed to be stable. Therefore, the returned string representation
    can be used only for displaying purposes; any kind of automation build on top of that will
    be fragile and prone to mismaintenance.
    """
    def __init__(self,
                 timestamp: _ty_.Optional[uavcan.time.SynchronizedTimestamp_1_0] = None,
                 value:     _ty_.Optional[reg.drone.physics.kinematics.rotation.Planar_0_1] = None) -> None:
        """
        reg.drone.physics.kinematics.rotation.PlanarTs.0.1
        Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
        :param timestamp: uavcan.time.SynchronizedTimestamp.1.0 timestamp
        :param value:     reg.drone.physics.kinematics.rotation.Planar.0.1 value
        """
        self._timestamp: uavcan.time.SynchronizedTimestamp_1_0
        self._value:     reg.drone.physics.kinematics.rotation.Planar_0_1

        if timestamp is None:
            self.timestamp = uavcan.time.SynchronizedTimestamp_1_0()
        elif isinstance(timestamp, uavcan.time.SynchronizedTimestamp_1_0):
            self.timestamp = timestamp
        else:
            raise ValueError(f'timestamp: expected uavcan.time.SynchronizedTimestamp_1_0 '
                             f'got {type(timestamp).__name__}')

        if value is None:
            self.value = reg.drone.physics.kinematics.rotation.Planar_0_1()
        elif isinstance(value, reg.drone.physics.kinematics.rotation.Planar_0_1):
            self.value = value
        else:
            raise ValueError(f'value: expected reg.drone.physics.kinematics.rotation.Planar_0_1 '
                             f'got {type(value).__name__}')

    @property
    def timestamp(self) -> uavcan.time.SynchronizedTimestamp_1_0:
        """
        uavcan.time.SynchronizedTimestamp.1.0 timestamp
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, x: uavcan.time.SynchronizedTimestamp_1_0) -> None:
        if isinstance(x, uavcan.time.SynchronizedTimestamp_1_0):
            self._timestamp = x
        else:
            raise ValueError(f'timestamp: expected uavcan.time.SynchronizedTimestamp_1_0 got {type(x).__name__}')

    @property
    def value(self) -> reg.drone.physics.kinematics.rotation.Planar_0_1:
        """
        reg.drone.physics.kinematics.rotation.Planar.0.1 value
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._value

    @value.setter
    def value(self, x: reg.drone.physics.kinematics.rotation.Planar_0_1) -> None:
        if isinstance(x, reg.drone.physics.kinematics.rotation.Planar_0_1):
            self._value = x
        else:
            raise ValueError(f'value: expected reg.drone.physics.kinematics.rotation.Planar_0_1 got {type(x).__name__}')

    # noinspection PyProtectedMember
    def _serialize_(self, _ser_: PlanarTs_0_1._SerializerTypeVar_) -> None:
        assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
        _base_offset_ = _ser_.current_bit_length
        _ser_.pad_to_alignment(8)
        self.timestamp._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.value._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        assert 152 <= (_ser_.current_bit_length - _base_offset_) <= 152, \
            'Bad serialization of reg.drone.physics.kinematics.rotation.PlanarTs.0.1'

    # noinspection PyProtectedMember
    @staticmethod
    def _deserialize_(_des_: PlanarTs_0_1._DeserializerTypeVar_) -> PlanarTs_0_1:
        assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
        _base_offset_ = _des_.consumed_bit_length
        # Temporary _f0_ holds the value of "timestamp"
        _des_.pad_to_alignment(8)
        _f0_ = uavcan.time.SynchronizedTimestamp_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f1_ holds the value of "value"
        _des_.pad_to_alignment(8)
        _f1_ = reg.drone.physics.kinematics.rotation.Planar_0_1._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        self = PlanarTs_0_1(
            timestamp=_f0_,
            value=_f1_)
        _des_.pad_to_alignment(8)
        assert 152 <= (_des_.consumed_bit_length - _base_offset_) <= 152, \
            'Bad deserialization of reg.drone.physics.kinematics.rotation.PlanarTs.0.1'
        assert isinstance(self, PlanarTs_0_1)
        return self

    def __repr__(self) -> str:
        _o_0_ = ', '.join([
            'timestamp=%s' % self.timestamp,
            'value=%s' % self.value,
        ])
        return f'reg.drone.physics.kinematics.rotation.PlanarTs.0.1({_o_0_})'

    _EXTENT_BYTES_ = 19

    _MODEL_: _pydsdl_.StructureType = _dsdl_.CompositeObject._restore_constant_(
        'ABzY8D1%gC0{^{OOK%*<5nf8-TQ8b=Sr5DA*dl3jXUQd(S~+ndg^prjEJ`4$SV)kJdS;s2P0q{HGbC3)fcTI=1P1T`o&fp@{s}$?'
        'Ne%{*V}KYr<dTb!<d}njTv9dDvky_U;KY#t?N`&?Q&nAGRdo-4apc!eCM)^B<kg^UOWV;5$wEOL@sOGh(+taZ17C`WWy!I%D2%Nr'
        '4%vD;VA&_x%tzVJv*~2e@Td#(TF6?O9r_;A0^XLwlG>K=m`fuRLq7t+_q4kX^=P;*vt-2BW}$?!j8~H3A1V2hOt0tzzsf$!l5vAZ'
        'Q7FtfVlw+Fm^#48&Z;aKyeXJtcbywEY#LD`LXY{OVvr9emt(qZQBRA6%e1w&XL0abJY@Dd49JMOLB@yqs6L=q&=Y<Xtn-uV^~r<$'
        '2twhCNNj^2llMF+S{}1+c@b-|us>wuhAAS$VO}fZncf61Eh;0!^=<I-VshqgsR&=wmSOHTPC;k}ewnRi$teST^lTd1y^8i?6Sg+)'
        '3M=#_vwY9ak|T!gTiN};AF5Q=IU`=|nk*##2I*NPNyKSHINfF>pi(lMNa0zGNZ)0IhF~J3VVk({=tV?$us&ZIX=A8Vje}A@6fKyZ'
        '78=uL^HmsNVp7Rwh>*l)8;}t;30PRALEs3h$O(dKtT+r&Pv;f16iYS+L=lsbkbM{fH}LvK=(}C*vO{04jJV(!3ulRBEMH{#pjQU4'
        'QQ@^<G~5=jx7-zxTOWg6fOFf_i5Yqs`NU(}7$*4HaQvOZzs`JPsR|(>JHiG(nMJ|Jx5vf^sgnB78cY3=h2_-r<A~Jj%?4>R8p>I+'
        '!-d6hDgfr9wnlD{rNvxl&%5Av47n4M9Y1z#Fa#C|i9L^5OiCIGr(L)Ji9kdoJKjRr;5G0T8EJski2Jd`Rk?YXwqsC1C|Co<Y*#?M'
        'ya@7`SfP+YYQ<)j9moY?RhMt9kZI44$jx_W2xNi>u?)eUMMFr6IKX&aC1x9n6fFj{?f5k37>I(-pyiIQmsAlK-EYBS$*JQY!<cR@'
        'hgI|Cg^3N;4V24Zpvcjv!viG6RD@}PF$i(i17ZjSQEC|!!trEe+4rzaqE6lMN&bqGF6&MH8h>4{U_J4vqI8Dut>`OvK3K{4OmgMN'
        'EcBl?o#z|yhSAva{2fork|85^C`&GtO@ZwOkZ{<{`dY%sYM!6eDgEJ%WE8e+;V8Dln@WcHWMD2s&!icfESc=-gNE5I`YrBanxE$j'
        'yc$D8u^AYJa$<J2mmD`X#4fW9B+3wWwvtR3(vL%n!Gyz%fI_=Scr9{+TAOagQ58L}K6Jgs`u3bt3t|&$(}0E^JE*eTL}j%ouUgSS'
        'YZ#H*GaINjugz)2DrkoWrxMI!fg7p>vpop&A6ANzMgs&5U_L;F`ytdjh7mIp%9cV&Mmv7ERn2o=_E^kW$xT8oM7*ztK!NYXMV048'
        '-n9b{T(me;5yZ`Rp@rGXFlMCbgC^)dWuMKfY#Y}2VO0jq5*wl?li>*1Vj6Z^(*Y*0l$p?N&amm|>E|pt`h5|-pFgj$PMRi%4L`^d'
        'a*z_)c1<7XfvDbQuCLnO9jG@N`C<2v88R#m1)lM{$%(tv#_qRo5x<ACE3xB1gMWIKH$Kj$^=2wfII4p}L#B_!ChXG{9v)mE&|MUU'
        '@$iCVL8bZtzE?^0LkbTg9!m8i>Uj`xAk~M|_^=uuQ8=o`#}J27eO#?Sia3($#}JRC`f;`X1mbwApH%Y`h=ZyAlF~DY_)@B$LOhx3'
        'rxA~*`WeKdseTr5EY;7c_g_|a&nr6@l%9*q-X+8fss0M$`BZ-u@#Rz}i04xMGUC}(e+}_Ws(%adbgI9Ocq-N3K%7kVE6T4a#EDd&'
        'R{qT(o=EjKm7i}R9!vFE<!@E(S5to15JyvePWeBNIGpNrwT}fAk43egoY%vtzNGebRmHcd_IIt|U4L8Qw-tUz;X4YytMGdYuPb~{'
        ';eCZ%;jY3*3Lh){RN-d|KUesL!Y2y9Eb#WofD+D?!gMJ#OX0mzxL*pq6n0DDQ7Jqwg-=W2vr_oH6uu~hC#CSE5@NW&LC=Si0-LuQ'
        'GqH8UnKBx6Z<I4h1&^lAJ+kLQI{S4l&&AzT-IAZWoA&6upf0&mXfa%MG>V6;wq{YMRMB(2?a^>C8NCTdc+_`ig%gv&iCO1Uk6^nl'
        'ZGpxZudDAQQwxi8^=5rxacOCx*{C<0jcd*M`Kxn_^Ua0D=3--h=~}(9xLBNMc~FKzY700Q_zeGDY*Ky$n$2JNpCn)2<L|EUA0*~C'
        'a5PC#!)@2{ZP$uz_Z~|8hkIzB-{S8V?d}d=?R3QtI?_*idLe;c$PH|P`~if6!haLyezVe{`y^Nc$3i3jYRbQD@;yG2pey?c%HQ2)'
        'j&BLL7(Sn?Kks9Q|K-1;WTK$NfHS~Q9}m6k{G0!)%Z~faveUQc7fw`Z_^XI|^8li#Wiba2O{~oqNY=%DWF5fU=DC4NWpe_4y6k=U'
        'e_*dS5HE_sQ_nK4HqUVL)BGR&kDDW~dH&DMH!u*R@Dq0eA^(>^z+5fw*EQ9zYu$cbEBke==+_X4`MyvjXIIq<^>qjzFBHDRwCs5y'
        'TJ5>ForVt_yzzU_yZ|Pn#r+Si-1xVXuhzC%hsfj)n+=c-TK~5L7}>1AOHAU#b(px`ndq$VAKtvwS^oeg9_(M=KdcxZEWWh*DE=*<'
        '*t~@l|GrCX{Gy0mm;0!FewKgTps#g;(uANiyFq-b6U4_b@pyj_`-d@z+J6B4jK<sZ6951'
    )
    assert isinstance(_MODEL_, _pydsdl_.StructureType)
