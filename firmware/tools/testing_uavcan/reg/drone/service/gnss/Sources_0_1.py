# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /tmp/yakut-dsdl-zmn42v0l/public_regulated_data_types-master/reg/drone/service/gnss/Sources.0.1.uavcan
#
# Generated at:  2021-09-29 15:15:52.767274 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     reg.drone.service.gnss.Sources
# Version:       0.1
#
# pylint: skip-file

from __future__ import annotations
import numpy as _np_
import typing as _ty_
import pydsdl as _pydsdl_
import pyuavcan.dsdl as _dsdl_


# noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class Sources_0_1(_dsdl_.CompositeObject):
    """
    Generated property settings use relaxed type signatures, accepting a large variety of
    possible representations of the value, which are automatically converted to a well-defined
    internal representation. When accessing a property, this strict well-defined internal
    representation is always returned. The implicit strictification enables more precise static
    type analysis.

    The value returned by the __repr__() method may be invariant to some of the field values,
    and its format is not guaranteed to be stable. Therefore, the returned string representation
    can be used only for displaying purposes; any kind of automation build on top of that will
    be fragile and prone to mismaintenance.
    """
    def __init__(self,
                 gps_l1:           _ty_.Optional[bool] = None,
                 gps_l2:           _ty_.Optional[bool] = None,
                 gps_l5:           _ty_.Optional[bool] = None,
                 glonass_l1:       _ty_.Optional[bool] = None,
                 glonass_l2:       _ty_.Optional[bool] = None,
                 glonass_l3:       _ty_.Optional[bool] = None,
                 galileo_e1:       _ty_.Optional[bool] = None,
                 galileo_e5a:      _ty_.Optional[bool] = None,
                 galileo_e5b:      _ty_.Optional[bool] = None,
                 galileo_e6:       _ty_.Optional[bool] = None,
                 beidou_b1:        _ty_.Optional[bool] = None,
                 beidou_b2:        _ty_.Optional[bool] = None,
                 sbas:             _ty_.Optional[bool] = None,
                 gbas:             _ty_.Optional[bool] = None,
                 rtk_base:         _ty_.Optional[bool] = None,
                 imu:              _ty_.Optional[bool] = None,
                 visual_odometry:  _ty_.Optional[bool] = None,
                 dead_reckoning:   _ty_.Optional[bool] = None,
                 uwb:              _ty_.Optional[bool] = None,
                 magnetic_compass: _ty_.Optional[bool] = None,
                 gyro_compass:     _ty_.Optional[bool] = None,
                 other_compass:    _ty_.Optional[bool] = None) -> None:
        """
        reg.drone.service.gnss.Sources.0.1
        Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
        :param gps_l1:           saturated bool gps_l1
        :param gps_l2:           saturated bool gps_l2
        :param gps_l5:           saturated bool gps_l5
        :param glonass_l1:       saturated bool glonass_l1
        :param glonass_l2:       saturated bool glonass_l2
        :param glonass_l3:       saturated bool glonass_l3
        :param galileo_e1:       saturated bool galileo_e1
        :param galileo_e5a:      saturated bool galileo_e5a
        :param galileo_e5b:      saturated bool galileo_e5b
        :param galileo_e6:       saturated bool galileo_e6
        :param beidou_b1:        saturated bool beidou_b1
        :param beidou_b2:        saturated bool beidou_b2
        :param sbas:             saturated bool sbas
        :param gbas:             saturated bool gbas
        :param rtk_base:         saturated bool rtk_base
        :param imu:              saturated bool imu
        :param visual_odometry:  saturated bool visual_odometry
        :param dead_reckoning:   saturated bool dead_reckoning
        :param uwb:              saturated bool uwb
        :param magnetic_compass: saturated bool magnetic_compass
        :param gyro_compass:     saturated bool gyro_compass
        :param other_compass:    saturated bool other_compass
        """
        self._gps_l1:           bool
        self._gps_l2:           bool
        self._gps_l5:           bool
        self._glonass_l1:       bool
        self._glonass_l2:       bool
        self._glonass_l3:       bool
        self._galileo_e1:       bool
        self._galileo_e5a:      bool
        self._galileo_e5b:      bool
        self._galileo_e6:       bool
        self._beidou_b1:        bool
        self._beidou_b2:        bool
        self._sbas:             bool
        self._gbas:             bool
        self._rtk_base:         bool
        self._imu:              bool
        self._visual_odometry:  bool
        self._dead_reckoning:   bool
        self._uwb:              bool
        self._magnetic_compass: bool
        self._gyro_compass:     bool
        self._other_compass:    bool

        self.gps_l1 = gps_l1 if gps_l1 is not None else False

        self.gps_l2 = gps_l2 if gps_l2 is not None else False

        self.gps_l5 = gps_l5 if gps_l5 is not None else False

        self.glonass_l1 = glonass_l1 if glonass_l1 is not None else False

        self.glonass_l2 = glonass_l2 if glonass_l2 is not None else False

        self.glonass_l3 = glonass_l3 if glonass_l3 is not None else False

        self.galileo_e1 = galileo_e1 if galileo_e1 is not None else False

        self.galileo_e5a = galileo_e5a if galileo_e5a is not None else False

        self.galileo_e5b = galileo_e5b if galileo_e5b is not None else False

        self.galileo_e6 = galileo_e6 if galileo_e6 is not None else False

        self.beidou_b1 = beidou_b1 if beidou_b1 is not None else False

        self.beidou_b2 = beidou_b2 if beidou_b2 is not None else False

        self.sbas = sbas if sbas is not None else False

        self.gbas = gbas if gbas is not None else False

        self.rtk_base = rtk_base if rtk_base is not None else False

        self.imu = imu if imu is not None else False

        self.visual_odometry = visual_odometry if visual_odometry is not None else False

        self.dead_reckoning = dead_reckoning if dead_reckoning is not None else False

        self.uwb = uwb if uwb is not None else False

        self.magnetic_compass = magnetic_compass if magnetic_compass is not None else False

        self.gyro_compass = gyro_compass if gyro_compass is not None else False

        self.other_compass = other_compass if other_compass is not None else False

    @property
    def gps_l1(self) -> bool:
        """
        saturated bool gps_l1
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._gps_l1

    @gps_l1.setter
    def gps_l1(self, x: bool) -> None:
        self._gps_l1 = bool(x)  # Cast to bool implements saturation

    @property
    def gps_l2(self) -> bool:
        """
        saturated bool gps_l2
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._gps_l2

    @gps_l2.setter
    def gps_l2(self, x: bool) -> None:
        self._gps_l2 = bool(x)  # Cast to bool implements saturation

    @property
    def gps_l5(self) -> bool:
        """
        saturated bool gps_l5
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._gps_l5

    @gps_l5.setter
    def gps_l5(self, x: bool) -> None:
        self._gps_l5 = bool(x)  # Cast to bool implements saturation

    @property
    def glonass_l1(self) -> bool:
        """
        saturated bool glonass_l1
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._glonass_l1

    @glonass_l1.setter
    def glonass_l1(self, x: bool) -> None:
        self._glonass_l1 = bool(x)  # Cast to bool implements saturation

    @property
    def glonass_l2(self) -> bool:
        """
        saturated bool glonass_l2
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._glonass_l2

    @glonass_l2.setter
    def glonass_l2(self, x: bool) -> None:
        self._glonass_l2 = bool(x)  # Cast to bool implements saturation

    @property
    def glonass_l3(self) -> bool:
        """
        saturated bool glonass_l3
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._glonass_l3

    @glonass_l3.setter
    def glonass_l3(self, x: bool) -> None:
        self._glonass_l3 = bool(x)  # Cast to bool implements saturation

    @property
    def galileo_e1(self) -> bool:
        """
        saturated bool galileo_e1
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._galileo_e1

    @galileo_e1.setter
    def galileo_e1(self, x: bool) -> None:
        self._galileo_e1 = bool(x)  # Cast to bool implements saturation

    @property
    def galileo_e5a(self) -> bool:
        """
        saturated bool galileo_e5a
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._galileo_e5a

    @galileo_e5a.setter
    def galileo_e5a(self, x: bool) -> None:
        self._galileo_e5a = bool(x)  # Cast to bool implements saturation

    @property
    def galileo_e5b(self) -> bool:
        """
        saturated bool galileo_e5b
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._galileo_e5b

    @galileo_e5b.setter
    def galileo_e5b(self, x: bool) -> None:
        self._galileo_e5b = bool(x)  # Cast to bool implements saturation

    @property
    def galileo_e6(self) -> bool:
        """
        saturated bool galileo_e6
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._galileo_e6

    @galileo_e6.setter
    def galileo_e6(self, x: bool) -> None:
        self._galileo_e6 = bool(x)  # Cast to bool implements saturation

    @property
    def beidou_b1(self) -> bool:
        """
        saturated bool beidou_b1
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._beidou_b1

    @beidou_b1.setter
    def beidou_b1(self, x: bool) -> None:
        self._beidou_b1 = bool(x)  # Cast to bool implements saturation

    @property
    def beidou_b2(self) -> bool:
        """
        saturated bool beidou_b2
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._beidou_b2

    @beidou_b2.setter
    def beidou_b2(self, x: bool) -> None:
        self._beidou_b2 = bool(x)  # Cast to bool implements saturation

    @property
    def sbas(self) -> bool:
        """
        saturated bool sbas
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._sbas

    @sbas.setter
    def sbas(self, x: bool) -> None:
        self._sbas = bool(x)  # Cast to bool implements saturation

    @property
    def gbas(self) -> bool:
        """
        saturated bool gbas
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._gbas

    @gbas.setter
    def gbas(self, x: bool) -> None:
        self._gbas = bool(x)  # Cast to bool implements saturation

    @property
    def rtk_base(self) -> bool:
        """
        saturated bool rtk_base
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._rtk_base

    @rtk_base.setter
    def rtk_base(self, x: bool) -> None:
        self._rtk_base = bool(x)  # Cast to bool implements saturation

    @property
    def imu(self) -> bool:
        """
        saturated bool imu
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._imu

    @imu.setter
    def imu(self, x: bool) -> None:
        self._imu = bool(x)  # Cast to bool implements saturation

    @property
    def visual_odometry(self) -> bool:
        """
        saturated bool visual_odometry
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._visual_odometry

    @visual_odometry.setter
    def visual_odometry(self, x: bool) -> None:
        self._visual_odometry = bool(x)  # Cast to bool implements saturation

    @property
    def dead_reckoning(self) -> bool:
        """
        saturated bool dead_reckoning
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._dead_reckoning

    @dead_reckoning.setter
    def dead_reckoning(self, x: bool) -> None:
        self._dead_reckoning = bool(x)  # Cast to bool implements saturation

    @property
    def uwb(self) -> bool:
        """
        saturated bool uwb
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._uwb

    @uwb.setter
    def uwb(self, x: bool) -> None:
        self._uwb = bool(x)  # Cast to bool implements saturation

    @property
    def magnetic_compass(self) -> bool:
        """
        saturated bool magnetic_compass
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._magnetic_compass

    @magnetic_compass.setter
    def magnetic_compass(self, x: bool) -> None:
        self._magnetic_compass = bool(x)  # Cast to bool implements saturation

    @property
    def gyro_compass(self) -> bool:
        """
        saturated bool gyro_compass
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._gyro_compass

    @gyro_compass.setter
    def gyro_compass(self, x: bool) -> None:
        self._gyro_compass = bool(x)  # Cast to bool implements saturation

    @property
    def other_compass(self) -> bool:
        """
        saturated bool other_compass
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._other_compass

    @other_compass.setter
    def other_compass(self, x: bool) -> None:
        self._other_compass = bool(x)  # Cast to bool implements saturation

    # noinspection PyProtectedMember
    def _serialize_(self, _ser_: Sources_0_1._SerializerTypeVar_) -> None:
        assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
        _base_offset_ = _ser_.current_bit_length
        _ser_.add_unaligned_bit(self.gps_l1)
        _ser_.add_unaligned_bit(self.gps_l2)
        _ser_.add_unaligned_bit(self.gps_l5)
        _ser_.add_unaligned_bit(self.glonass_l1)
        _ser_.add_unaligned_bit(self.glonass_l2)
        _ser_.add_unaligned_bit(self.glonass_l3)
        _ser_.add_unaligned_bit(self.galileo_e1)
        _ser_.add_unaligned_bit(self.galileo_e5a)
        _ser_.add_unaligned_bit(self.galileo_e5b)
        _ser_.add_unaligned_bit(self.galileo_e6)
        _ser_.add_unaligned_bit(self.beidou_b1)
        _ser_.add_unaligned_bit(self.beidou_b2)
        _ser_.skip_bits(5)
        _ser_.add_unaligned_bit(self.sbas)
        _ser_.add_unaligned_bit(self.gbas)
        _ser_.add_unaligned_bit(self.rtk_base)
        _ser_.skip_bits(3)
        _ser_.add_unaligned_bit(self.imu)
        _ser_.add_unaligned_bit(self.visual_odometry)
        _ser_.add_unaligned_bit(self.dead_reckoning)
        _ser_.add_unaligned_bit(self.uwb)
        _ser_.skip_bits(4)
        _ser_.add_unaligned_bit(self.magnetic_compass)
        _ser_.add_unaligned_bit(self.gyro_compass)
        _ser_.add_unaligned_bit(self.other_compass)
        _ser_.skip_bits(14)
        _ser_.pad_to_alignment(8)
        assert 48 <= (_ser_.current_bit_length - _base_offset_) <= 48, \
            'Bad serialization of reg.drone.service.gnss.Sources.0.1'

    # noinspection PyProtectedMember
    @staticmethod
    def _deserialize_(_des_: Sources_0_1._DeserializerTypeVar_) -> Sources_0_1:
        assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
        _base_offset_ = _des_.consumed_bit_length
        # Temporary _f0_ holds the value of "gps_l1"
        _f0_ = _des_.fetch_unaligned_bit()
        # Temporary _f1_ holds the value of "gps_l2"
        _f1_ = _des_.fetch_unaligned_bit()
        # Temporary _f2_ holds the value of "gps_l5"
        _f2_ = _des_.fetch_unaligned_bit()
        # Temporary _f3_ holds the value of "glonass_l1"
        _f3_ = _des_.fetch_unaligned_bit()
        # Temporary _f4_ holds the value of "glonass_l2"
        _f4_ = _des_.fetch_unaligned_bit()
        # Temporary _f5_ holds the value of "glonass_l3"
        _f5_ = _des_.fetch_unaligned_bit()
        # Temporary _f6_ holds the value of "galileo_e1"
        _f6_ = _des_.fetch_unaligned_bit()
        # Temporary _f7_ holds the value of "galileo_e5a"
        _f7_ = _des_.fetch_unaligned_bit()
        # Temporary _f8_ holds the value of "galileo_e5b"
        _f8_ = _des_.fetch_unaligned_bit()
        # Temporary _f9_ holds the value of "galileo_e6"
        _f9_ = _des_.fetch_unaligned_bit()
        # Temporary _f10_ holds the value of "beidou_b1"
        _f10_ = _des_.fetch_unaligned_bit()
        # Temporary _f11_ holds the value of "beidou_b2"
        _f11_ = _des_.fetch_unaligned_bit()
        _des_.skip_bits(5)
        # Temporary _f12_ holds the value of "sbas"
        _f12_ = _des_.fetch_unaligned_bit()
        # Temporary _f13_ holds the value of "gbas"
        _f13_ = _des_.fetch_unaligned_bit()
        # Temporary _f14_ holds the value of "rtk_base"
        _f14_ = _des_.fetch_unaligned_bit()
        _des_.skip_bits(3)
        # Temporary _f15_ holds the value of "imu"
        _f15_ = _des_.fetch_unaligned_bit()
        # Temporary _f16_ holds the value of "visual_odometry"
        _f16_ = _des_.fetch_unaligned_bit()
        # Temporary _f17_ holds the value of "dead_reckoning"
        _f17_ = _des_.fetch_unaligned_bit()
        # Temporary _f18_ holds the value of "uwb"
        _f18_ = _des_.fetch_unaligned_bit()
        _des_.skip_bits(4)
        # Temporary _f19_ holds the value of "magnetic_compass"
        _f19_ = _des_.fetch_unaligned_bit()
        # Temporary _f20_ holds the value of "gyro_compass"
        _f20_ = _des_.fetch_unaligned_bit()
        # Temporary _f21_ holds the value of "other_compass"
        _f21_ = _des_.fetch_unaligned_bit()
        _des_.skip_bits(14)
        self = Sources_0_1(
            gps_l1=_f0_,
            gps_l2=_f1_,
            gps_l5=_f2_,
            glonass_l1=_f3_,
            glonass_l2=_f4_,
            glonass_l3=_f5_,
            galileo_e1=_f6_,
            galileo_e5a=_f7_,
            galileo_e5b=_f8_,
            galileo_e6=_f9_,
            beidou_b1=_f10_,
            beidou_b2=_f11_,
            sbas=_f12_,
            gbas=_f13_,
            rtk_base=_f14_,
            imu=_f15_,
            visual_odometry=_f16_,
            dead_reckoning=_f17_,
            uwb=_f18_,
            magnetic_compass=_f19_,
            gyro_compass=_f20_,
            other_compass=_f21_)
        _des_.pad_to_alignment(8)
        assert 48 <= (_des_.consumed_bit_length - _base_offset_) <= 48, \
            'Bad deserialization of reg.drone.service.gnss.Sources.0.1'
        assert isinstance(self, Sources_0_1)
        return self

    def __repr__(self) -> str:
        _o_0_ = ', '.join([
            'gps_l1=%s' % self.gps_l1,
            'gps_l2=%s' % self.gps_l2,
            'gps_l5=%s' % self.gps_l5,
            'glonass_l1=%s' % self.glonass_l1,
            'glonass_l2=%s' % self.glonass_l2,
            'glonass_l3=%s' % self.glonass_l3,
            'galileo_e1=%s' % self.galileo_e1,
            'galileo_e5a=%s' % self.galileo_e5a,
            'galileo_e5b=%s' % self.galileo_e5b,
            'galileo_e6=%s' % self.galileo_e6,
            'beidou_b1=%s' % self.beidou_b1,
            'beidou_b2=%s' % self.beidou_b2,
            'sbas=%s' % self.sbas,
            'gbas=%s' % self.gbas,
            'rtk_base=%s' % self.rtk_base,
            'imu=%s' % self.imu,
            'visual_odometry=%s' % self.visual_odometry,
            'dead_reckoning=%s' % self.dead_reckoning,
            'uwb=%s' % self.uwb,
            'magnetic_compass=%s' % self.magnetic_compass,
            'gyro_compass=%s' % self.gyro_compass,
            'other_compass=%s' % self.other_compass,
        ])
        return f'reg.drone.service.gnss.Sources.0.1({_o_0_})'

    _EXTENT_BYTES_ = 6

    _MODEL_: _pydsdl_.StructureType = _dsdl_.CompositeObject._restore_constant_(
        'ABzY8D1%gC0{`up&u<&Y700Dgl4VL!;>b;68HmR&kjSXG{Gne-dnjnfRRTteV=761z*x-gjyPlO&agYPlxeg;a%c;qTl7aZMGrmo'
        '&>qr54+V<;KyN{TqNf7=fBI&Jl<1JVOSQMcyl{8teLwH*%$qll{BZ6Qc6BEG#MiogPkO#(OA<2dvq#wRiDkPY=nBacN#bYPDvVqe'
        'h2*f`CCSIh&5x4rCF}9L&2a$ZFNdUKd7<FM0!ELy#OiP<t+t3lm&hbuw0k6!Oz?!x#24NlTz{OjW?Hj9NIpv9B^xUhGAB}Cejm^o'
        'L7iG9@%+~r@x8NP%C?6Uwv~=BOWqAxz!d9&#nLSye1iFtZ?t4POxZr+9YvGYEI?f>l^qC=B=mCp!rdW2%dFclwy%fun|wdHm&BKC'
        'sWA6&=#7FNM-H8j7dl;O`}HKAvpwNL1oiFRZELH6_TPMzfW>nr2D(aL7+hUx&C)gcGQBnmXe9JHXd8`PYo~Tj?Y7a@cXzC<?Wwip'
        'jxRWtY4D&&^_^M+eHk62nzg;tNI4sD$2j_SWp`ue{yCuy18r>W44_+^yZ<wEQ$tIKx0+MxAV+*6Y*IHfbk3DoI@NFE|7way0M1~2'
        'Yr9r`>l|w|1ndm-yRTWh(+6<TA<Pqz?W7a1T;JZTTea6;JHNhR^d|h%{9K8b?_$qmyz}I)rK|DU<gMBh%!9)5K75UCQSdu2wZj?h'
        '=f*vv3l8znkqD7cl!V9?Tq@%GSV4`E)>P5YNe4>}e4~xE7OGz57M8$mMxB6gmBLWF599!?f6#2UH_)BEgLmL-uesMe*g)@os|`0q'
        'xz^3;Ty_R7H}^sjaWC8726|)fZX2z?wSVVa9u`A&Y=aY`y}WXdV83$60)kqMlK>pJ66sMS2i|n~)Zn92@bPfUOM1#F2hOV#X8hh^'
        's}d5JaCj<B$)9f8ODu?Va97^qBvi2YXrEvS$Bdo=^d4twD$KJzCL`?I!V>{eVIPo`Pa|CM2=?rdxW|G+YNo5v<b9+cqtnNTd?#Yv'
        'G^BMn*sKk7LJ9HF(A{*aQHoB|oxS#+uR>foVIFbdq(JEz%Z&fYlRr0{{OMlmxd3-Kf#pq4a43dTPsehnABuCUo=KD7^Rfx=v2vP3'
        'TTRbHoSY!oXMsc@CrAlIxL$imO858#PEeF06>}Ku$G*-e60eT*3AWQW{fG90=q36p{SvLvn{<;_>FacxevN*W-l0v}qI>jRx=%l#'
        'ZF--6le*NVigxKE+M^%R@6sR9AJU)EAJbpZpVME_U((;uU(-+NZ|U#p?;_|3Jko_+(Ak|lj#um>_K<jXSA@!j3Uv@)vQ5szfKO})'
        'm?kl)s-Ro#<KswGbaAUZ3iwu|SM#gg$njxmpka#A4RhAC$Vve11PQA!R!y6!>Y$mb>Sn4sXr`>1RktGCb1_d~Iw+RlGlb-{2iD1B'
        'di@(~rJ0$-bY5W$1(B~<*N3e>tZp#->O_Rc66qW?+gL|3+`o|G%%!LsiXJ2?!jTeO1R|2CLqtXDWr5u~lDp*-rYM5r*MaA*fOZde'
        'h=m{qs4z!9?#MKfNDe9oP`P49eZ9YoFL8tv6<|FYM_G#?y1~6MBFGo+S<M<o=^>||j_w__+ekt-fgcX-nN=<y2&Fk#X#*XRK82({'
        'D|)04M$l(KRDpqFM?}hah0+M`tS>q4v5py+!jJTYh2GRN%;43K>=Kt9F&B}CIDo1CO1WHtVH_%lU}ZtlApNO;Bai81k|rFCOv4C$'
        '%S0b3y@#2fo{CRGb$!?1aVXa{8R;>Q6Yu~@Cn?O3UTyt0j4RTCH9x^UVwzNh1BZ1Y*lAi55(ogQeClzSdBgK$!fT8jBxpU-HQDdO'
        'u6A)(nrzp81;loHAB;nSgPTvhUl~pOfJDa(n~*@~9d01l{!ls~oBI;hPEnmiV~aLOl}YQSTX4sR-zBdMdylhb9k!AB{CyHH-(u?R'
        '^u7(ZgI**q*`k}oC<`L{fg@nI!#>?7fq>3Ndw-`3dqauv>_^9f?NSC!5&bNFcF-k_8PR{xzn@-x7Ju=!;ClM`L}Yx?5TPvSA5$aB'
        'e@>wN%M|E;Kec>n`PB0N)e>sUK?J{w!v0vbSg?E8k4W;9WW6=}Q|ZKu&{CvjC~3_`4iw9Pas6)yT;PZL;)4E11WLMAmu>Q}i+TEw'
        '&Ozin_`~eXOv-)mN4Od?iF6+P8SYzOc<>kV^;h@;qrbtImi<XT1#kIQ1@MxQmGa?PRt4}mBb&>IXIT}%=Z$PWAD(4Z0ADb&g?xCH'
        'RRR2hkzL4#XIT}%7maK&AD(4Z0KaHt7xUp+Rt4~~k(Kk|Sylz`B_mtPhi6$8z?Y3|IUk;7H4dL2g<mqVOZo6DtAfa%H?rsR;aOG%'
        '@KqyQ&4*`M6~HeW+2wqAmen}CGzx#w$X?8cXIT|Q{*sZsln>9cDu7=xvMc%UEUN<envt#L!?Uak;8%_8YCb&6Y8*Z{3cqG#*Ye?6'
        'Rt1qGBSZP{EUN<ebtAi;56`kHfZs5(8~N}ot8w_sD7<E5wTbY>DBnstkz@S_POc|)bQ=Hw'
    )
    assert isinstance(_MODEL_, _pydsdl_.StructureType)
