# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /tmp/yakut-dsdl-zmn42v0l/public_regulated_data_types-master/uavcan/metatransport/can/Frame.0.2.uavcan
#
# Generated at:  2021-09-29 15:15:51.726122 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     uavcan.metatransport.can.Frame
# Version:       0.2
#
# pylint: skip-file

from __future__ import annotations
import numpy as _np_
import typing as _ty_
import pydsdl as _pydsdl_
import pyuavcan.dsdl as _dsdl_
import uavcan.metatransport.can


# noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class Frame_0_2(_dsdl_.CompositeObject):
    """
    Generated property settings use relaxed type signatures, accepting a large variety of
    possible representations of the value, which are automatically converted to a well-defined
    internal representation. When accessing a property, this strict well-defined internal
    representation is always returned. The implicit strictification enables more precise static
    type analysis.

    The value returned by the __repr__() method may be invariant to some of the field values,
    and its format is not guaranteed to be stable. Therefore, the returned string representation
    can be used only for displaying purposes; any kind of automation build on top of that will
    be fragile and prone to mismaintenance.
    """
    def __init__(self, *,
                 error:                       _ty_.Optional[uavcan.metatransport.can.Error_0_1] = None,
                 data_fd:                     _ty_.Optional[uavcan.metatransport.can.DataFD_0_1] = None,
                 data_classic:                _ty_.Optional[uavcan.metatransport.can.DataClassic_0_1] = None,
                 remote_transmission_request: _ty_.Optional[uavcan.metatransport.can.RTR_0_1] = None) -> None:
        """
        uavcan.metatransport.can.Frame.0.2
        Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
        If no parameters are provided, the first field will be default-initialized and selected.
        If one parameter is provided, it will be used to initialize and select the field under the same name.
        If more than one parameter is provided, a ValueError will be raised.
        :param error:                       uavcan.metatransport.can.Error.0.1 error
        :param data_fd:                     uavcan.metatransport.can.DataFD.0.1 data_fd
        :param data_classic:                uavcan.metatransport.can.DataClassic.0.1 data_classic
        :param remote_transmission_request: uavcan.metatransport.can.RTR.0.1 remote_transmission_request
        """
        self._error:                       _ty_.Optional[uavcan.metatransport.can.Error_0_1] = None
        self._data_fd:                     _ty_.Optional[uavcan.metatransport.can.DataFD_0_1] = None
        self._data_classic:                _ty_.Optional[uavcan.metatransport.can.DataClassic_0_1] = None
        self._remote_transmission_request: _ty_.Optional[uavcan.metatransport.can.RTR_0_1] = None
        _init_cnt_: int = 0

        if error is not None:
            _init_cnt_ += 1
            self.error = error

        if data_fd is not None:
            _init_cnt_ += 1
            self.data_fd = data_fd

        if data_classic is not None:
            _init_cnt_ += 1
            self.data_classic = data_classic

        if remote_transmission_request is not None:
            _init_cnt_ += 1
            self.remote_transmission_request = remote_transmission_request

        if _init_cnt_ == 0:
            self.error = uavcan.metatransport.can.Error_0_1()  # Default initialization
        elif _init_cnt_ == 1:
            pass  # A value is already assigned, nothing to do
        else:
            raise ValueError(f'Union cannot hold values of more than one field')

    @property
    def error(self) -> _ty_.Optional[uavcan.metatransport.can.Error_0_1]:
        """
        uavcan.metatransport.can.Error.0.1 error
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._error

    @error.setter
    def error(self, x: uavcan.metatransport.can.Error_0_1) -> None:
        if isinstance(x, uavcan.metatransport.can.Error_0_1):
            self._error = x
        else:
            raise ValueError(f'error: expected uavcan.metatransport.can.Error_0_1 got {type(x).__name__}')
        self._data_fd = None
        self._data_classic = None
        self._remote_transmission_request = None

    @property
    def data_fd(self) -> _ty_.Optional[uavcan.metatransport.can.DataFD_0_1]:
        """
        uavcan.metatransport.can.DataFD.0.1 data_fd
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._data_fd

    @data_fd.setter
    def data_fd(self, x: uavcan.metatransport.can.DataFD_0_1) -> None:
        if isinstance(x, uavcan.metatransport.can.DataFD_0_1):
            self._data_fd = x
        else:
            raise ValueError(f'data_fd: expected uavcan.metatransport.can.DataFD_0_1 got {type(x).__name__}')
        self._error = None
        self._data_classic = None
        self._remote_transmission_request = None

    @property
    def data_classic(self) -> _ty_.Optional[uavcan.metatransport.can.DataClassic_0_1]:
        """
        uavcan.metatransport.can.DataClassic.0.1 data_classic
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._data_classic

    @data_classic.setter
    def data_classic(self, x: uavcan.metatransport.can.DataClassic_0_1) -> None:
        if isinstance(x, uavcan.metatransport.can.DataClassic_0_1):
            self._data_classic = x
        else:
            raise ValueError(f'data_classic: expected uavcan.metatransport.can.DataClassic_0_1 got {type(x).__name__}')
        self._error = None
        self._data_fd = None
        self._remote_transmission_request = None

    @property
    def remote_transmission_request(self) -> _ty_.Optional[uavcan.metatransport.can.RTR_0_1]:
        """
        uavcan.metatransport.can.RTR.0.1 remote_transmission_request
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._remote_transmission_request

    @remote_transmission_request.setter
    def remote_transmission_request(self, x: uavcan.metatransport.can.RTR_0_1) -> None:
        if isinstance(x, uavcan.metatransport.can.RTR_0_1):
            self._remote_transmission_request = x
        else:
            raise ValueError(f'remote_transmission_request: expected uavcan.metatransport.can.RTR_0_1 got {type(x).__name__}')
        self._error = None
        self._data_fd = None
        self._data_classic = None

    # noinspection PyProtectedMember
    def _serialize_(self, _ser_: Frame_0_2._SerializerTypeVar_) -> None:
        assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
        _base_offset_ = _ser_.current_bit_length
        if self.error is not None:  # Union tag 0
            _ser_.add_aligned_u8(0)
            _ser_.pad_to_alignment(8)
            self.error._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        elif self.data_fd is not None:  # Union tag 1
            _ser_.add_aligned_u8(1)
            _ser_.pad_to_alignment(8)
            self.data_fd._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        elif self.data_classic is not None:  # Union tag 2
            _ser_.add_aligned_u8(2)
            _ser_.pad_to_alignment(8)
            self.data_classic._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        elif self.remote_transmission_request is not None:  # Union tag 3
            _ser_.add_aligned_u8(3)
            _ser_.pad_to_alignment(8)
            self.remote_transmission_request._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        else:
            raise RuntimeError('Malformed union uavcan.metatransport.can.Frame.0.2')
        _ser_.pad_to_alignment(8)
        assert 40 <= (_ser_.current_bit_length - _base_offset_) <= 568, \
            'Bad serialization of uavcan.metatransport.can.Frame.0.2'

    # noinspection PyProtectedMember
    @staticmethod
    def _deserialize_(_des_: Frame_0_2._DeserializerTypeVar_) -> Frame_0_2:
        assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
        _base_offset_ = _des_.consumed_bit_length
        _tag0_ = _des_.fetch_aligned_u8()
        if _tag0_ == 0:
            _des_.pad_to_alignment(8)
            _uni0_ = uavcan.metatransport.can.Error_0_1._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = Frame_0_2(error=_uni0_)
        elif _tag0_ == 1:
            _des_.pad_to_alignment(8)
            _uni1_ = uavcan.metatransport.can.DataFD_0_1._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = Frame_0_2(data_fd=_uni1_)
        elif _tag0_ == 2:
            _des_.pad_to_alignment(8)
            _uni2_ = uavcan.metatransport.can.DataClassic_0_1._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = Frame_0_2(data_classic=_uni2_)
        elif _tag0_ == 3:
            _des_.pad_to_alignment(8)
            _uni3_ = uavcan.metatransport.can.RTR_0_1._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = Frame_0_2(remote_transmission_request=_uni3_)
        else:
            raise _des_.FormatError(f'uavcan.metatransport.can.Frame.0.2: Union tag value {_tag0_} is invalid')
        _des_.pad_to_alignment(8)
        assert 40 <= (_des_.consumed_bit_length - _base_offset_) <= 568, \
            'Bad deserialization of uavcan.metatransport.can.Frame.0.2'
        assert isinstance(self, Frame_0_2)
        return self

    def __repr__(self) -> str:
        _o_0_ = '(MALFORMED UNION)'
        if self.error is not None:
            _o_0_ = 'error=%s' % self.error
        if self.data_fd is not None:
            _o_0_ = 'data_fd=%s' % self.data_fd
        if self.data_classic is not None:
            _o_0_ = 'data_classic=%s' % self.data_classic
        if self.remote_transmission_request is not None:
            _o_0_ = 'remote_transmission_request=%s' % self.remote_transmission_request
        return f'uavcan.metatransport.can.Frame.0.2({_o_0_})'

    _EXTENT_BYTES_ = 71

    _MODEL_: _pydsdl_.UnionType = _dsdl_.CompositeObject._restore_constant_(
        'ABzY8CxcXB0{`t@OKcoRdY<8PsM3RaS+eDp+OkBoUKAzE7Uie>ScghwyoO)k#TXAcE%l6t!`YdkLTwPhd)NgXOt4Hm3-A&|NP>V^'
        'ECL@k0S`I&5CjB*AkK|IE=GU=JnoUl)ZhJ8Pj^q(yf{Nkb{jIQr~Z0;UDN-gzN)VIV(2&f{yAp<S3OgFm?>xSlc};<%BJ(#pQq>Y'
        '=45JqaiO?a&Q{D?b?oCpcCql$!=hRHs&?@gwLh;J)!|ejy&z<#m(maB(}l?evy!fq(uHzyu~eC)oOerhfkf(oSt^VAH7iyf{RG!v'
        ')p(2#{HpegT9u{Jl}af)w^T99wNFLU3P5hDT6Or{teMZ$!R$+A(v@_oLI_1K2R^KnmgXx<CDVu58g7F2C#BM2sb-B@V**&5fLZ%L'
        'tyu@F``=GzGTFj?f0x$L>NDXmA1r1w;;ugtiMMxgn{(MpDsL9<SF9S>%X0!wtX3ULWftda*2L0Wx_Z<z5~;a|&IsF8GiI@5&ZjG8'
        'ruJp^VCr6W+03K}drEZnUiEOQytq`FH-#W?riy9NL)E-iStwq6nErgJa+Ppi{rN)S=8Xqa`D?|cxqNm$RWk1{<*CW~;FYf~q{|hv'
        'bj=y2YrbK+MmhE{O-@Z-pLB}U1ZXQ=7JZh?LWPFnL3ZA(eQ8~&e*E^E@9A?(W!<DYddZ|lUe?WQ#WG8Jx}awZ6;Ve#4e5OTp?=>i'
        'm?eUP^7rWR(Zxkt&t%Ku%bZIW=FLeOvAKM?R-KT;UmsS{eI@w0R^9(rw(=+T=MTk4`E?AY7K^p2u4<(GaA9syjFPy&q`9ytzFY$O'
        '(;`6>&x!lwjilzStavW0Th&8&P#OwZuafk=rF=eJdKi?779OPYOJ?oYHG}J`<vF1+MW>+}Pb|%e+g->O!~;VY>1DbYO)V^D#8*dc'
        '^ElOut?~h+gOm=e@*#X4#^({Fqm&M<@&x2#ln$@*eULLs_pS2%lqOdB0ZK<!`9ah>gmUAkf0)uktNaM12Uqz~N)N2^W0dY+<;N*y'
        'tNbandxFxjRelofKTYZADt`w3oC2O_(Vs@?;3_|je$P-EU*$Ubf6f^<eirHTNY5cXk8}d*1*8Vji%2gay^Qn<(yK@(kzPYOh4ebo'
        '8%SS3dK2l3NMAyF3+Xh{+elwV`U=ulk-moXb);_~y@PZH=`2zU=`zw4q-#jmk!~Q}M7o7^8|jXdCKGX7oRk-ayqK03GxB0qURd&C'
        'SzfHji#2(%E-yCZ#iqR2k{8?ZVh0yX!q%J1MPZW2iy&{VJhw#Vbl7x^_=V~O*&fG^7#=f2=EP%6F4jb~acR)4<F1=HqjVGR2vhm)'
        'I}Luq@H8{vHZ!4Y=FO5YI3?Sr+-=@k9n>XdYj35?X4@^Q+-tFvUC36l4}^O?`mq?^`vo&|R}9^Kv*h=p=Q$H!!n|-4WQT;q{rBoq'
        '@5{<mbn<N>OOi-<`S>quAJnSHQsqjzkV%&^UN88i^Q}4d&$>WP(9+yHKWkr!?v9hMv?iPare%oC|F-_EY+d@&y8NDXrTVkJc)Er`'
        '^?E&Pl04jz>({S}0(v$>57@n|S(>a_Q`QR(@RzLHuKj=Ay}Ir33CG`FERa(#ggTe%nB!Z7W2LYtw6(XKu72VeSusw3#N%QRXE?L&'
        'ivRz(!9&CY9%2w4A`TBR9Pki>@DKy=5OH{j7(4`nhhXp!3?72PLoj#<1`omDAs9Ra3wQ_y55eFe7(4`nhhXp!3?72PLoj#<1`omD'
        'As9RagNI=75DXrI!9y^32nG+q;2{`11cQfQ@DL0hg26*DcnAg$!QdenJOqP>VDJzO9)iI`Fn9<C55eFe7(4`nhhXp!3?72PLoj#<'
        '1`omDAs9RagNI=75DXrI!9y^32nG+q;2{`11cQfQ@DL0hf=Lg-q=#VALon$fnDh`#dI%;x1d|?uNe{uKhhWk}FzF$f^bkyX2qrxQ'
        'lOBStE?Kw%p$A^|I4;z~ER$~NLO1jf-H4*6D0=#VM^Dze44H(dNGwI#5NSiC4fP4c(3}YRWF#6EgHNjYqh%4tWz0<bk^QC{PixkH'
        'SpQ{x+h#aC*bolqP7cIkxntr_Jt$u45B(E%mmz`ijoZ5jjQ`gu_J8dJy_z@Z)r2Y2+6a2%Fl9r5pf?UvHXI0g$6(4vVakSK$_8P|'
        ';xJ_gVag7`l<f}$z58Iw#$d`4FlD1KWg{?U!!Tt-FlB=<Wdkr}ahS3gOqm8#roohHFl8D{nFdp)!IWt*Wg1MG22-ZNlxZ+!8cdl6'
        'Q>MX`X)t9POqm8#roohHFl8D{nFdp)!IWt*Wg1MG22-ZNlxZ+!8cdl6Q>MX`X)t9POqm8#roohHFl8D{nFdp)!IWt*Wg1MG22-ZN'
        'lxZ+!8cdl6Q>MX`Y0{Kw(v)e^lxfnGY0{Kw(v)e^lxfnGY0{Kw(v)e^lxfnGY0{Kw(v)e^lxfnGY0{Kw!Jv0A3VI_qAG!G`=#8`?'
        '(gsD)n=ld7)jT1kkz*p9wEi{s(?Jnh?ibffZfLpCm(a3BNck)=`p%kQx?WPhN2{`vwd$c%C4E0-f5I|wJ-kjh;q{8R+pc0zuR~2x'
        'yy@j|57=wtLGIS6_&>R`V&EeG8(Eyl;@B3)Q3XS&g3&}3;sI5NK^2Ce3c~?a7=kLq0@Ji1s6rg7upg?h52}!WDvUrChM)=qP=y#&'
        ';V4w$2vp%PRAC&da0se!5UOwhs<1z>Hn9(?Fa}jfKov%z3L{X3VW`3oRACURFaTAELlt6B1p}&JKotzAf&o=9pb7?5!GJ0lPz3|3'
        'U_ccNsDc4iFrW$sRKb8M7*GWRs$f7B45)$uRWP6m22{a-Di}}&1FB#^6%43?0aY-d3I<fcfGQYJ1p}&JKotzAf+1DGkg8xvRWPI~'
        '7*Z7ssS1Wv1w*QWAyvVUs$fV}Fr+FNQWXrT3Wih#L#l!yRl)FvqLDU4+VG>-285yqJ)s@#Yzs26)l-VCfu&OVVXb=NleEYcInH*k'
        'H!0V@Yw<wJ%$p0eQ!Ok={7)XE-3oT7NUQJZVtPJXd069jsz>DRu<k<4w!_I2AEXQS%@53?S;?w)oPF+W1iKTULa8m=qQtDb$=E;>'
        'lM>_chIrG?<AW|I8WW$SiE(9onAFl|ZhSI6N@~2%tuJyCa>GEd93OLI)|mJt%~NPO&d7Wm^tCH;r3q8k;Rjq!Hs%_*rlt8IGGs>@'
        'dJ>Xx7{r$K`C&4Sj?omQ5<)T#<JneSev}`Bk!`>rq{m=*+ir^==TE^%(@0B0-BEphf}ez855*)(oP@#exLy7<e+Ev%9WNn0DOv7r'
        '+T*AAvv4#@yrR^za6(=8!8Lwb&TMFG3H5WkZjqmH=SMNFH^Wc8Ki`x7_;dU$TrKtK`5tJL&iAYj{yaYi7anVVXQKRBDtn=)ee?5t'
        'LWT??7vI^%p7+5oxS>c}_bF<~kfrB1_(gsRVUY9Po)c{v-tYHn-}>d3`4xm*ZI6Sfbp_#B-!Sp3d=jCb^Bfq?lW@K7z4B{(3PEN^'
        'BO+=}At>!TK7O6wK;Y|tVy=j`r{q)f;+|pQFYucPygME<QTrx>^*zJNU*s=gVo-m&rs(;)z2`XiEk2D&NmpYhTA0RUX3uf++x%rr'
        'pu(TSo1%|tdKO>%-th5P_^X)Ibv?eKl~*w#{NC<?zs6t3WYqV}(zib&bMN@`XZ`szw&Z<BX4Pe%1*Loz(^|jWLW!a*v*IoDMR+N`'
        'j45%<F0mq{BHR^q3{h%Y)SMAzXGMKW)L6!}*<W@|lzyZtzo9O_E^2%oR%f$yoefdzn_#`I_Umnmn%{csZg*aHOVs{O*5B#A{<di0'
        '526iF45E=_EZ%WDJKmN~23itLQ)9{Tcz5j?P1_UQQIknM-dU^D9kePSP{YZoczbQnbltXqMa?Jg#GCgp+oK)?RO%%8emuM%t1tZs'
        '_)b^J&*I+RmiMGLaZ}V`vKXg6S3G?tzvxr9;?5d-UJLD607B=<)&BOs-gf^2Dj*~u^%}*-u26`Z0FdO@yT`KGb1dTa04MoPH;A_O'
        '1d+ILfJ%Pb9<J^04VM@aFSO)$A?S7<KXhWm05JIn!Uzi8#h8o@JSH&3==qUi@i$@JO(vcsaymhzWS`0Dgu5-{$4pKW6&H)h>AsND'
        '_Sp8EoYq@Sc>6$3>;CWI2TM-t^#z3=4LMEse9r!MBXU}j)6R1ck<;PiwEu~T$mveWY58<bInP%_PIpO8J6<Uwr}u)Krm=P+8ZS9b'
        '6mcwsoUZ3LlG6^Y98;3het9@KEve~P3v${ivBFnL(^`<z{<5vf>G1N+$?4{G)Z}z~^}@;N&gwRj)7{nglhZ^BcG}LeucaN3)1H=y'
        '>l2N&OHMbmXDHhv-VRN+BBvW#o$jF37UXn8+cRCatstixdYJ7|4*_zzp&zR+{SfzMcjYCgcR)_}y*Ce$wF7e6?vrRN(JghlBI%(X'
        'b=yer?SPyP^i0guN}ZePYyazQ^uHE>&=on|6vf7_P;^XAH^s8qb1ZF;(@ha=?Fph#a=Iz5?e7g2@v1Jg@50gTJbvi><n#{6={hm}'
        'MIB@^G2pWR#7y@Cr;C#B_;5C|)A9rmdSlW5BIGZJVlnIYxqHL0SngLt-WMV7_2orK=ZL|^Hz1#(Hz41AN2jLnCS)=FFu$12^zd+v'
        '-0YyZTX~>H^lnP@Zpx4T-IUzgkbH@E%DS7JiWaY;H!H&4tQdFSjgA(tdb@Z<lk}Ktgrmi)Xz}WCUA!U+*zkY9Kl;ThLp}-7;+5jf'
        '3g?N57O%Qpyo%neh!(G&v^Ohg!F8IRT6<!3$F-F9Lae)Zb;m7F%Tw>mg)PgGeP&BZmavzc#(j%dQr>LwN-kaLqJ$yJBv58NWbtZ6'
        'NZVb!l4aLK=|}4F8>;f_c8%tXSL!;=7q42^Q!ifC$G}<SQP*v6@v3$Gz?&8Jp7yZu?R4?VZHd+b63#aDF55Gd?GgQGH%ZLC-o@fo'
        '8?6#gkA^#2yz01Z;@ydYyc2KT!)%XwXlwCG*^h@(ZRlr%Pb>Rrx_ISz2J5dl^s={*#VdCYc6)<K55m{22D81zt3c1hUMJjb)&1>%'
        'y{-O<I(HyEiuVJ>#;#D<1U~5d-DBD8DHd8tAUNN|yGOLOCy2USylM-V)LI)^4{)`;c;!Xst_-Obh5C*zeDTWrUIm7bmaZhm@d5c>'
        'Me^i;vv8Hv2LxP0U>zWw>mH<210Jx>>Q!s7?XO_DCyG6BEOm7LPsCD3EcN4a{!heG|FF;hiC(dYSnBRs>Z$ru6S357vefQ&^@yd8'
        '&i{FWS!#!G4ri$;Ka8a&*=J2yYDeCjrFP1E5wX;J!cuo$fA=i4;{2bkS!%`kKh2oZHdt!K`9G~&ZG)v&od45l+f7(%#rZ$G@1ec('
        'fBL~vgEii1JpZR3EVZ|{u=9VKu+$-g*)~5byKQp*PfM1%Z~eE!Qr9=4?}DXnieh6|C^}}Tn_}7QDV8=_>ZXXc_5_jY{2w*0?T&Eu'
        'ng{l=z&on*f10z@dyGzT{!c5G+U2PET7Ot-6{YTHsdwt{S&Z5*MBJkz{;Q|n%2xDJx?<|(Kh0L=E&X0TeP2({SF#Vxn&O98&nbV1'
        'm0q8CJD)C>v-3@Ve)V74_`QMLUkt@!&WGGz(rX~T6aRC6MOk#{f9|iv6;I^8YADl#Uj@kheI3L<+Wj;+_@Cc-EO~z_)tvJm#Jp*&'
        'ZLS~lq7Z&x&YRlh^9O)#pQth3l)E3a>oa?1chtwxJFPbI^A1X^351-%?;v&NbzY9$LF&vQz1%usl}L|MeiPnYq7_($i8|%u!xJ{D'
        'BQ!Jhao~iP(27~5;#_;(Mhv|CjEAQlvG2sj>*1w!8!_;@zd@@$V_p}yeW)kuJh%__1(_fBqgI^l?%+1+BYnw>+o+H9WiM`{KGIjb'
        'xQ+T~U-jZPByyMYbZ{FIxyx%hxDAQC$ywxH<Ti(NqY=5C|3V{jJO5@Qay$RUM&x$>OO43w{9BF4?ffR^Tubckp$sqkvAg-N__4eB'
        'ulljO`LFr0yZNvCvAg+i__4eByE^Z9+{bl<<S#4oR}}eciu`p&{)QrdQ<1-=$lq4v?}X>O=lnJZPO1ckN-(Vw%%}vjDuJaEEUN@7'
        'D#4mcu&xqps05oT!Iny}trF}g1nxPI4TAcyi+tuW3k_so(Cno(85oSV5gG&n1IiDat~k_TXy6SD4mAl4WMD8B2o1cgdP4&TX=7;M'
        'Jps`h7<iZ8y@7#u+1(o$9BC06_`(=ZXy6ZI>Y;%@kg10T{!;~YU=D@`Ixq)A109%yp@C}oS?AA(h6Y5chlK`2golL&!DZh-U_iJp'
        '$@}pH287%BsZoDmK)A2S`wUxF4Fm>+ds5!NComw~&QF#40|UaXI0?=l7@TlJ1Ak!flp7lO1B2skXy6YFj=7<MKQK7zh6et?;D{R<'
        ')R9lgphkJhSRklzLxVt2<Aw%-pvDai0zr)%8U%tGH#7(YHEw7?*bVz>aThnbJZ-9enw0;fsX+d+B7a4Zzoy7vSLAOf@;4RvTZ;T`'
        'MgC5BzWn*wM!`vyz)%UMRe~9nU{)otRDxxdU_~WZQwi2pf(?~mQzh6^3AR;&9fd&t{BEP5$(a{_I}(fK{)YZ6jfy{yM!d&feBQTX'
        'FTmS0o_%o&lIZY@=<ti^@Qb}X{NlGGp2IJA@v+`joS<hm<lGA%|JZa2QSVW;dsz17*<ajr3K18%qfWmf)H&Q_3gJw1#_ZaMLv{co'
        '<cD@UI2;t%G2F1j*SQyG--x|e#J7XjL2B<$ai<W3b)UdV6NnQ{cjd-K%VRduqoU=f-6_P7-Qz**d#UfRCA@^z*}G!z_zl@LOL(2B'
        '8BKXkyHkh(`(CMCYPG)Wl>+}!d(uOQpJ_RTh>I!2h&}Nk)TgMO38$TN=z(zCsBIheoZSO`dxYCY9Xf@eZ|;I0_a!+R6Mo#6<z(%='
        'ANLhG(&s|X4|v|5vR$qthpjwokIbbya@fweKt8}P){!fBI!ffUFX)iKeg;-nBA*m8nnIk0)s@Jv3hXq6&|G#=BEMo!A>{7BL3_jr'
        'IZYs5AmlGO?VPno{E|I^xIxHoIU_zG(2oi1Qv&&QLauz*`+~sk;Jzi0PZM_A!cT}EC2rbVbs84`yudDTzbNuGcmP5!ao_apCZkbj'
        '0=t8Jny|kvvDcAL6ZSXcs9&@v5QKc1uy^^+FYTn7viDN?cT#=k?xOO)=Sw@MoIO$gcY6c*Yl{4JMgE2&e^ZgarO4k_<nM&%!ykqS'
        'PO1ckN-(Vw%%}vjDuJaEEUN@7D#4mcu&xqps05oT!Iny}trF}g1c(Ph1iqJ!o|x#szxEhK2S3#4fb4W{q66{}VbKBg@cl;zgTQ?`'
        '5FONgY%n?)5ZDR##V0H}kjO9EyO<CAqJ!Wb`zJj*Q17*#L2eWsMA5-x9UXvR+;7u>^Kw(xh3c8m9bbjTN{d}z&nkC)eelr-4ZFSC'
        '+U%7k!ZY_ziC8T6JMpLNvYhjMVL1iPMt1Wx$!?a+g+(zac9n&!$XYCjyq_(Z<%(|5@MO$;*@BtT?=6;e=Q!YtE%{H$Y9=C9Gh#I('
        'R@124rBjZ+rM&u<g1)tBrkwQ>>$le7+*cz)&3>2rJ2EA|p{0|j#>Ah0NO+e{%)S_vcWFIDn3WrTv+}7lD`Y8LgMrnPl36U7WwTJR'
        '?ct>Uk(Dj$;$OuQ_GhtpHE%vJ^UiV$fzY!BJzFX31yQ$LOwXH>wcLk;9qo2)wII`E2kiYp?0|JjzMRX`VeEfKOH;p3NPb#(kG-(g'
        '-;?`Zgt<#j*E79l(3?*W#N_`2dw?c66}12W'
    )
    assert isinstance(_MODEL_, _pydsdl_.UnionType)
