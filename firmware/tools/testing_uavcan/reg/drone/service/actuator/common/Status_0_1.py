# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /tmp/yakut-dsdl-zmn42v0l/public_regulated_data_types-master/reg/drone/service/actuator/common/Status.0.1.uavcan
#
# Generated at:  2021-09-29 15:15:52.733495 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     reg.drone.service.actuator.common.Status
# Version:       0.1
#
# pylint: skip-file

from __future__ import annotations
import numpy as _np_
import typing as _ty_
import pydsdl as _pydsdl_
import pyuavcan.dsdl as _dsdl_
import reg.drone.service.actuator.common
import uavcan.si.unit.temperature


# noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class Status_0_1(_dsdl_.CompositeObject):
    """
    Generated property settings use relaxed type signatures, accepting a large variety of
    possible representations of the value, which are automatically converted to a well-defined
    internal representation. When accessing a property, this strict well-defined internal
    representation is always returned. The implicit strictification enables more precise static
    type analysis.

    The value returned by the __repr__() method may be invariant to some of the field values,
    and its format is not guaranteed to be stable. Therefore, the returned string representation
    can be used only for displaying purposes; any kind of automation build on top of that will
    be fragile and prone to mismaintenance.
    """
    def __init__(self,
                 motor_temperature:      _ty_.Optional[uavcan.si.unit.temperature.Scalar_1_0] = None,
                 controller_temperature: _ty_.Optional[uavcan.si.unit.temperature.Scalar_1_0] = None,
                 error_count:            _ty_.Optional[_ty_.Union[int, _np_.uint32]] = None,
                 fault_flags:            _ty_.Optional[reg.drone.service.actuator.common.FaultFlags_0_1] = None) -> None:
        """
        reg.drone.service.actuator.common.Status.0.1
        Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
        :param motor_temperature:      uavcan.si.unit.temperature.Scalar.1.0 motor_temperature
        :param controller_temperature: uavcan.si.unit.temperature.Scalar.1.0 controller_temperature
        :param error_count:            saturated uint32 error_count
        :param fault_flags:            reg.drone.service.actuator.common.FaultFlags.0.1 fault_flags
        """
        self._motor_temperature:      uavcan.si.unit.temperature.Scalar_1_0
        self._controller_temperature: uavcan.si.unit.temperature.Scalar_1_0
        self._error_count:            int
        self._fault_flags:            reg.drone.service.actuator.common.FaultFlags_0_1

        if motor_temperature is None:
            self.motor_temperature = uavcan.si.unit.temperature.Scalar_1_0()
        elif isinstance(motor_temperature, uavcan.si.unit.temperature.Scalar_1_0):
            self.motor_temperature = motor_temperature
        else:
            raise ValueError(f'motor_temperature: expected uavcan.si.unit.temperature.Scalar_1_0 '
                             f'got {type(motor_temperature).__name__}')

        if controller_temperature is None:
            self.controller_temperature = uavcan.si.unit.temperature.Scalar_1_0()
        elif isinstance(controller_temperature, uavcan.si.unit.temperature.Scalar_1_0):
            self.controller_temperature = controller_temperature
        else:
            raise ValueError(f'controller_temperature: expected uavcan.si.unit.temperature.Scalar_1_0 '
                             f'got {type(controller_temperature).__name__}')

        self.error_count = error_count if error_count is not None else 0

        if fault_flags is None:
            self.fault_flags = reg.drone.service.actuator.common.FaultFlags_0_1()
        elif isinstance(fault_flags, reg.drone.service.actuator.common.FaultFlags_0_1):
            self.fault_flags = fault_flags
        else:
            raise ValueError(f'fault_flags: expected reg.drone.service.actuator.common.FaultFlags_0_1 '
                             f'got {type(fault_flags).__name__}')

    @property
    def motor_temperature(self) -> uavcan.si.unit.temperature.Scalar_1_0:
        """
        uavcan.si.unit.temperature.Scalar.1.0 motor_temperature
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._motor_temperature

    @motor_temperature.setter
    def motor_temperature(self, x: uavcan.si.unit.temperature.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.temperature.Scalar_1_0):
            self._motor_temperature = x
        else:
            raise ValueError(f'motor_temperature: expected uavcan.si.unit.temperature.Scalar_1_0 got {type(x).__name__}')

    @property
    def controller_temperature(self) -> uavcan.si.unit.temperature.Scalar_1_0:
        """
        uavcan.si.unit.temperature.Scalar.1.0 controller_temperature
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._controller_temperature

    @controller_temperature.setter
    def controller_temperature(self, x: uavcan.si.unit.temperature.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.temperature.Scalar_1_0):
            self._controller_temperature = x
        else:
            raise ValueError(f'controller_temperature: expected uavcan.si.unit.temperature.Scalar_1_0 got {type(x).__name__}')

    @property
    def error_count(self) -> int:
        """
        saturated uint32 error_count
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._error_count

    @error_count.setter
    def error_count(self, x: _ty_.Union[int, _np_.uint32]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 4294967295:
            self._error_count = x
        else:
            raise ValueError(f'error_count: value {x} is not in [0, 4294967295]')

    @property
    def fault_flags(self) -> reg.drone.service.actuator.common.FaultFlags_0_1:
        """
        reg.drone.service.actuator.common.FaultFlags.0.1 fault_flags
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._fault_flags

    @fault_flags.setter
    def fault_flags(self, x: reg.drone.service.actuator.common.FaultFlags_0_1) -> None:
        if isinstance(x, reg.drone.service.actuator.common.FaultFlags_0_1):
            self._fault_flags = x
        else:
            raise ValueError(f'fault_flags: expected reg.drone.service.actuator.common.FaultFlags_0_1 got {type(x).__name__}')

    # noinspection PyProtectedMember
    def _serialize_(self, _ser_: Status_0_1._SerializerTypeVar_) -> None:
        assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
        _base_offset_ = _ser_.current_bit_length
        _ser_.pad_to_alignment(8)
        self.motor_temperature._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.controller_temperature._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.add_aligned_u32(max(min(self.error_count, 4294967295), 0))
        _ser_.pad_to_alignment(8)
        self.fault_flags._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        assert 112 <= (_ser_.current_bit_length - _base_offset_) <= 112, \
            'Bad serialization of reg.drone.service.actuator.common.Status.0.1'

    # noinspection PyProtectedMember
    @staticmethod
    def _deserialize_(_des_: Status_0_1._DeserializerTypeVar_) -> Status_0_1:
        assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
        _base_offset_ = _des_.consumed_bit_length
        # Temporary _f0_ holds the value of "motor_temperature"
        _des_.pad_to_alignment(8)
        _f0_ = uavcan.si.unit.temperature.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f1_ holds the value of "controller_temperature"
        _des_.pad_to_alignment(8)
        _f1_ = uavcan.si.unit.temperature.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f2_ holds the value of "error_count"
        _f2_ = _des_.fetch_aligned_u32()
        # Temporary _f3_ holds the value of "fault_flags"
        _des_.pad_to_alignment(8)
        _f3_ = reg.drone.service.actuator.common.FaultFlags_0_1._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        self = Status_0_1(
            motor_temperature=_f0_,
            controller_temperature=_f1_,
            error_count=_f2_,
            fault_flags=_f3_)
        _des_.pad_to_alignment(8)
        assert 112 <= (_des_.consumed_bit_length - _base_offset_) <= 112, \
            'Bad deserialization of reg.drone.service.actuator.common.Status.0.1'
        assert isinstance(self, Status_0_1)
        return self

    def __repr__(self) -> str:
        _o_0_ = ', '.join([
            'motor_temperature=%s' % self.motor_temperature,
            'controller_temperature=%s' % self.controller_temperature,
            'error_count=%s' % self.error_count,
            'fault_flags=%s' % self.fault_flags,
        ])
        return f'reg.drone.service.actuator.common.Status.0.1({_o_0_})'

    _EXTENT_BYTES_ = 63

    _MODEL_: _pydsdl_.DelimitedType = _dsdl_.CompositeObject._restore_constant_(
        'ABzY8D1%gC0{`t;%Wo9P8Mgu3gAEIaKsLEhND*r*c8_hwUbCCWdY6|o*dPq-N?Fuf(_J%F(B0MBRXs3BC|TtpNLmTfc5;Yvh;qn1'
        'hum_Dl)ov*{J!pad1eTZRgz0Ajokg!_kLIZ_{eYAnW^G0I~R9+;|GpwM51`0p72H>9M{uftc|iF&yHUffeP{H-|566|1w|tB7d4M'
        'X0xt}B9Y{BDm%V!lhm_mA`YU=xDgM*Vlfdd$4_)59EfQvPdFUt-0H-Eq)<oBzU4MGc~)`TA~8xw#CPsq_xa1bK2@LodHzM7Ex6p;'
        'L^V<?Onx6iUSdHXE6--GDiQbtwdP%)TkcxYRnC<_IiH<RdE4WWW0aFd$~snru}C<X<?MSr;IQ?We5*cPpCV1<sr$J+)1`j<WopC;'
        '`A)T=#?h;R=Jue67TkuiZXlwTm3f^(HIEzXhT4Z}=d-i7dgMgre1x-IIwF7kEWe#+UvrJ+k<Sx<n9(!v33&@fq&^95CU7_WNdCRr'
        'eFl&0or|^A^{w@bwav|oTN~?JTN{_Q*4Ex#t*vcctZmgc);2G#Z`5k5Imt>J@X_o;5wum5XGdILdwDhmFwag8#l&rN%BVlhWlf$l'
        'FwqxrB0P=^%AaR%xlQ$0_-?Ed>ncCr%TBpQr->(U5C}KsFd&mv8^+ZRf0)`8a_h>IFsiM$SA%MtHUj0j$fz_RmV;QDl@R_BNwth)'
        ')u<}Pu{spTY8gjo%~^FytQ^WqZXh-hk#)Q2nLn2sauY^20{HAgFSG*}1JRDY=h?9jmAz5C@8h)_<m|Ak<2++8V`4gCL&GF!vMWN3'
        '#G&xqEL7IXaJ_j_A&upg?8GhZ`zmUUA;}-m>0TPZ$j;~~IJ9|?iu~94Vx7G(4HR2kGRo_fv;lKNgcezd2mY8I<|q^4XHeHGL^k!p'
        'Ah*Qhm`6on?xhXWC^F+zs3FT8a&}HW#96;a<TrqK*3*$qbP$M9<m}UZ9>#(2*$~_~Y^TY>G_VRstT4bZ1dH)DR{<5-GE0P?7D>&N'
        'VTyQ!2xj5O6<;(}Bzz}7pvn2{^j%oc!pTl#MN1?H>QY{)Gx?7Ewp@Nz7`Gsj1jczfjVx*U%bmze3L(%|N1kBNmub&S6QmK^8@nwK'
        'TxK<UA`;CWNfEItd)KzFUAgSc-;sie$0$QqD5na|brV?JGPuWB6s{#RBUT8WXjUvDAFm^Z4cgiAtDEjs4!>Rvc*~TXt=nU%vn?KQ'
        '*20Hc2ZBeVPMR*A^t^CVMWc12#rfo+8W~A1q&simi0$9pX0QcniHM?0RyRbTA2BP7(-BkbWHEDX9a!EfGG=K%jpLxhx}bq9$oV%|'
        'zfKOng!Ese^@Tfw_php9r41TS*$y$jNIvEbqXT3M>zz<0*)iw8k(BvRc#=m7&64D7_G5{L8EFf}nV(=NMa)kHB{^pU3f4qj(#(7<'
        'QAgXVQRV_ks*<E3R{cX32-t_J@r3Zrn^|)lp=qjCIuP@%kA@-Sq)-`yK1fkf5t@whUyt{(ZrHmMdn5Y}S&)d&(WR(2bdMPwlN|D%'
        'LC#|M;k3~yEa{gei9DSh>vs2pTMJf<Z%$q@+8SdttK7rC;rfKCvj#fK&DYK084Ycc!a;jz8@)s-6KE0P_I0viV&SQ#@|H+jA>SoF'
        'kL2g_sqDy~$REjP@~84w@)t6fFXZp!Z{;84@8zH5ALU=<pHq41xqNR=zMq+|GTw1kE&5uu+t;c+2Ug3zRvq*;%=xw6q?g~tRR84e'
        '^wiWg;(|)`dX3i?7CDQ6G>MQki4u9>BL^*IMVx4OIy8g`szKzs3J^kD`66-Vw}*I8z-bB;-Jj4sjqzY&9r*=Uo?uUcMg6o^76iNr'
        '&lmlIkTB^uTSTreF>Y9QnDxY$A$fn^2*ISav3ajr6_N8uJyfyq6?b&fs?u9^A6(r&SC_a#SA(i18E6s~6$bY*iu;i6%LmMqf(KSI'
        'BXt`1tlJ6pZtm{vZQpQm`8~N^X5M9at-p`l=s#T>+ELD+0%;?RCN4YK(Q?<pETt9y72N(-3jO>4G5<T5x61Q<+6SkxM#{VOY4neK'
        'XeJ-y_X*B^h`n$OPZ&Zv1f)X)q#o@Ecrxu_ARQj39RW|KJp!a7<Fq5-$+R;-ni;1Z0Z*o#1=8#|?Fe`>?HrKi#%V{ulW8kJs*KZ)'
        'fG5))1=7)R+7a+D?QEa+1dvXQ(~f{A%RLFClf$%?bR68hZ!8pj)@_#CYcb)v)96!qR=V=OY)SrLAKhN6!Qj#V*}+qO#TXwt=V<7p'
        'k5!;>FYC{HW(ssnnx;;|au+GoFcLi;EtxY~5YZYjgiR;%B!uhK1f6A;nv@6Fe1Wybu0L_+cWkl8Xk!6YxR~H}fPn@n7zC{daOKgB'
        '!UxY*tC&A&5^IAS*8C2QCr~G%t>{`;zLD+3v$U;X1(EC_2BV>=*)zi|Gu-?kvzQglwA^zo3wej;Ln7jUd%~Z8q%b?s=~svYEB1(D'
        'i7CEJyvg|ZUo^ez{cL2&Mm9*&>t*VG0O$wfX+HuUPJ7l*`_F*%*?8KIfd5(|$AHG;$Opk?jmQPu>Q0uoxw9w;F4e0`<N+;6Mb<vJ'
        'ho@`~w|yj&&3FGXot<_4?#IBy#WLX2WvBRx<{!8>FV&~%i&1%do*33)caJ*dz@qT=+dOKC+qmso^|J3G56jOL-yfMxl^2B@?$xK{'
        '$55V})BlK3c&T(K;<@|wq4859cK!+4lTalq6#xJ'
    )
    assert isinstance(_MODEL_, _pydsdl_.DelimitedType)
