# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /tmp/yakut-dsdl-zmn42v0l/public_regulated_data_types-master/uavcan/pnp/8166.NodeIDAllocationData.1.0.uavcan
#
# Generated at:  2021-09-29 15:15:51.316699 UTC
# Is deprecated: no
# Fixed port ID: 8166
# Full name:     uavcan.pnp.NodeIDAllocationData
# Version:       1.0
#
# pylint: skip-file

from __future__ import annotations
import numpy as _np_
import typing as _ty_
import pydsdl as _pydsdl_
import pyuavcan.dsdl as _dsdl_
import uavcan.node


# noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class NodeIDAllocationData_1_0(_dsdl_.FixedPortCompositeObject):
    """
    Generated property settings use relaxed type signatures, accepting a large variety of
    possible representations of the value, which are automatically converted to a well-defined
    internal representation. When accessing a property, this strict well-defined internal
    representation is always returned. The implicit strictification enables more precise static
    type analysis.

    The value returned by the __repr__() method may be invariant to some of the field values,
    and its format is not guaranteed to be stable. Therefore, the returned string representation
    can be used only for displaying purposes; any kind of automation build on top of that will
    be fragile and prone to mismaintenance.
    """
    def __init__(self,
                 unique_id_hash:    _ty_.Optional[_ty_.Union[int, _np_.uint64]] = None,
                 allocated_node_id: _ty_.Optional[_ty_.Union[_np_.ndarray, _ty_.List[uavcan.node.ID_1_0]]] = None) -> None:
        """
        uavcan.pnp.NodeIDAllocationData.1.0
        Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
        :param unique_id_hash:    truncated uint48 unique_id_hash
        :param allocated_node_id: uavcan.node.ID.1.0[<=1] allocated_node_id
        """
        self._unique_id_hash:    int
        self._allocated_node_id: _np_.ndarray

        self.unique_id_hash = unique_id_hash if unique_id_hash is not None else 0

        if allocated_node_id is None:
            self.allocated_node_id = _np_.array([], object)
        else:
            if isinstance(allocated_node_id, _np_.ndarray) and allocated_node_id.dtype == object and allocated_node_id.ndim == 1 and allocated_node_id.size <= 1:
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._allocated_node_id = allocated_node_id
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                allocated_node_id = _np_.array(allocated_node_id, object).flatten()
                if not allocated_node_id.size <= 1:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'allocated_node_id: invalid array length: not {allocated_node_id.size} <= 1')
                self._allocated_node_id = allocated_node_id
            assert isinstance(self._allocated_node_id, _np_.ndarray)
            assert self._allocated_node_id.dtype == object
            assert self._allocated_node_id.ndim == 1
            assert len(self._allocated_node_id) <= 1

    @property
    def unique_id_hash(self) -> int:
        """
        truncated uint48 unique_id_hash
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._unique_id_hash

    @unique_id_hash.setter
    def unique_id_hash(self, x: _ty_.Union[int, _np_.uint64]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 281474976710655:
            self._unique_id_hash = x
        else:
            raise ValueError(f'unique_id_hash: value {x} is not in [0, 281474976710655]')

    @property
    def allocated_node_id(self) -> _np_.ndarray:
        """
        uavcan.node.ID.1.0[<=1] allocated_node_id
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._allocated_node_id

    @allocated_node_id.setter
    def allocated_node_id(self, x: _ty_.Union[_np_.ndarray, _ty_.List[uavcan.node.ID_1_0]]) -> None:
        if isinstance(x, _np_.ndarray) and x.dtype == object and x.ndim == 1 and x.size <= 1:
            # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
            self._allocated_node_id = x
        else:
            # Last resort, slow construction of a new array. New memory may be allocated.
            x = _np_.array(x, object).flatten()
            if not x.size <= 1:  # Length cannot be checked before casting and flattening
                raise ValueError(f'allocated_node_id: invalid array length: not {x.size} <= 1')
            self._allocated_node_id = x
        assert isinstance(self._allocated_node_id, _np_.ndarray)
        assert self._allocated_node_id.dtype == object
        assert self._allocated_node_id.ndim == 1
        assert len(self._allocated_node_id) <= 1

    # noinspection PyProtectedMember
    def _serialize_(self, _ser_: NodeIDAllocationData_1_0._SerializerTypeVar_) -> None:
        assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
        _base_offset_ = _ser_.current_bit_length
        _ser_.add_aligned_unsigned(self.unique_id_hash, 48)
        _ser_.pad_to_alignment(8)
        # Variable-length array: length field byte-aligned: True; all elements byte-aligned: True.
        assert len(self.allocated_node_id) <= 1, 'self.allocated_node_id: uavcan.node.ID.1.0[<=1]'
        _ser_.add_aligned_u8(len(self.allocated_node_id))
        for _elem0_ in self.allocated_node_id:
            _ser_.pad_to_alignment(8)
            _elem0_._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        _ser_.pad_to_alignment(8)
        assert 56 <= (_ser_.current_bit_length - _base_offset_) <= 72, \
            'Bad serialization of uavcan.pnp.NodeIDAllocationData.1.0'

    # noinspection PyProtectedMember
    @staticmethod
    def _deserialize_(_des_: NodeIDAllocationData_1_0._DeserializerTypeVar_) -> NodeIDAllocationData_1_0:
        assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
        _base_offset_ = _des_.consumed_bit_length
        # Temporary _f0_ holds the value of "unique_id_hash"
        _f0_ = _des_.fetch_aligned_unsigned(48)
        # Temporary _f1_ holds the value of "allocated_node_id"
        _des_.pad_to_alignment(8)
        # Length field byte-aligned: True; all elements byte-aligned: True.
        _len0_ = _des_.fetch_aligned_u8()
        assert _len0_ >= 0
        if _len0_ > 1:
            raise _des_.FormatError(f'Variable array length prefix {_len0_} > 1')
        _f1_ = _np_.empty(_len0_, object)
        for _i0_ in range(_len0_):
            _des_.pad_to_alignment(8)
            _e0_ = uavcan.node.ID_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            _f1_[_i0_] = _e0_
        assert len(_f1_) <= 1, 'uavcan.node.ID.1.0[<=1]'
        _des_.pad_to_alignment(8)
        self = NodeIDAllocationData_1_0(
            unique_id_hash=_f0_,
            allocated_node_id=_f1_)
        _des_.pad_to_alignment(8)
        assert 56 <= (_des_.consumed_bit_length - _base_offset_) <= 72, \
            'Bad deserialization of uavcan.pnp.NodeIDAllocationData.1.0'
        assert isinstance(self, NodeIDAllocationData_1_0)
        return self

    def __repr__(self) -> str:
        _o_0_ = ', '.join([
            'unique_id_hash=%s' % self.unique_id_hash,
            'allocated_node_id=%s' % _np_.array2string(self.allocated_node_id, separator=',', edgeitems=10, threshold=1024, max_line_width=10240000),
        ])
        return f'uavcan.pnp.NodeIDAllocationData.1.0({_o_0_})'

    _FIXED_PORT_ID_ = 8166
    _EXTENT_BYTES_ = 9

    _MODEL_: _pydsdl_.StructureType = _dsdl_.CompositeObject._restore_constant_(
        'ABzY8CxcXB0{^X9TW=gy5<X7i#F>PU5Fp{2L%76-@z@R_F-f=>J8ZH;LX;Z;ghpqk&$xT(+xF=mdm<q%54$4LNLZp*;wSJE;Ayqe'
        'O3P2+7p!>McOJLuoa&nPZ5OSG1Xa_0E>)+#`c75*Py7D*@8^X5H#(ILJ>!L~j?r15!r+1GhPu`1B~hA~AlK#Sk=uDz^ztIpcZR7h'
        'zbR+FEWaqHN0XgcMezPqp$0t_x6(Lm-AFurZDlD8lb*_hBwkUuDo0bDfzAy4EPXLLaF6tF%JxKC{H6S|93ASYJkNq|k!w?a25awP'
        '6^|-MlkW#Q^v2dSIv(uR$<f5!rl(mD1$i)l5y$VwCRmNNcP-BKs?IjMcBs=0@=mDZ)!Z-J^RReNnY<H$ccuUM=*gSaLO89p4DYVv'
        'EA;5k<*jn`c*o=__EhH87kXH9{mIdhA`bpo=uY5ud}aJ{w6EhOy>fJUDV8dO;hD;Y^4#Jqs1irWq%U({OE+)!+Di2R4>^=E?A$70'
        '>7&kg|M=*cT~05{)UX_#xToMLJo&(ywS-SMyZ=Z>hdR=6?vB&nLo1{4F4lI_Yb&LHz&}_;(LelIIX1$7lC-DVNByV$XWIf##y|Cy'
        'J%q`D3JX~Ig^>W$)#!K)0G;m8A?u6Mzu+$zh=!-rOar2{S3Vpa>GXqj?RC;5%i$Eu8>3?#lN4D`!;4UNQUzx{x;vLg>D*9#UgWcQ'
        '7_$$e_}tmSd^ndD-7x5NGQC=axa1f(W;TLQ>TJ$=Ifq`(U0Z1_wB}px5da6H276?9JaE2)pr^}+;K<)rbU%o-k;;Yy;?!!~fha|4'
        'J&1}(g2#a;t=}>*5?s=;2aCugrto??3x`3xDggqqLHA^+hB|9C?%^y00bkP@3|6sRIJ*dF(NcwLYG`Qjev-k1a6I3%8n<*G=OlIy'
        'lj>g34_t2A;ZXvM1aUuUArQNvDMznV=ov#79L=}>E=Pyo3v!2{+whanGuqop(sCqsTf_{bZUW~ICwW~*31Aa#`7qU)%9Cu2!Tp_{'
        'A3%cpS4WTDRGtUtvTcxm9pBz4!Vpqs>swgCf$ZyYx_xxRbb*Faw@}%hD!Slq6vSowC@N|ll>?aJ018~YJ%RJYMtcv*y(lL(+WYAD'
        'B>moxa^FV#0LncZ?J0VH5aof5b_3=9jrJjwlN;^BH2x8kdpFugXx^i=-cg!=%-P+3jO1~WkCS|Y<dY;%kUUB9DUwf<e1_z+B%dSs'
        'JjqieCCL{^o+kMs$(KmJO!5_yXGl(yoFVxt$=66WNzRgNk(?trPjZ3eS(2}lJV){klIKZYAh}5LO_CQ$ULtv!<Xa@)CixD@cS&9)'
        'd7q?Da-HN?B)=v39m(%W{z&pCl0TFD#mVba6QrE1l<7)Ytdy&ja=%jiN?EUzuPWu+O8Kr*zOR%YE9Iw3`MFYlA*FyzPOqmx9C$a='
        'v##kvq8x<VFIBxDAHw}MdaO$4K3>3dLyXCO3dsI>NApYmihb<=&i{QaVV_t|V&w98$IQpwF!6z3u@dlayCv?SMN^Q)o0d9pOU0}D'
        '7Eoy(>_#J>yX>BT32iXy<F@cWfh*}#%<(E$cg%IME!zd>yWor$n7ap^R%N^3d>5SYf^%MQ)(g&iu`Tlj=f2?V7o7is89*=x2xbAn'
        'JRq0}1apC4HW17Qf*C<DCkSQ*!Mq@t83c2KV0IA94}uv&Fh>Yx3Bf!em?;Evg<!T2%ol<gLojCuW(~o-A(%M?bBAE|5X>Kf8ALFL'
        '2xbw%JR+D$1apaCHWADxf*D0HrwC>h!MuW6;s3yDR~v-n6hQLiuY%;BEs)%cu-eb>EF>ooU>1^72*ifd_7NnfaNJ?134-KQ`w&5L'
        's@)(+PPGpbB&P_HQwZ?Kc-`Ypn<Plu9iDL7UV^0E>x9!L2$FW!r<`_@AZfK{SbLVW=U985wNtD~)?Q%kG;1%i_7ZC^v-S#WXIPtN'
        'ZHBd1S$mDOCTp{-wOE^DZJxCS*3Po_I&0@xdxN#}tX*Jjk+nBjyU5xl)-JR57He;__6}?BRvJOls+RMiL_eln7Y7A0*0We?LzVl%'
        'Z67Plu9iAV^C6UuGSkqOm|RBM7`3XQ=HxMHlDZn(jf0vrHhMe|N`LLYiDWMQV}JN)LJ0rG!oT#;zkK~)r~J1@pZ^9mJanaViwoz^'
        '@7S8wD|`PPsN(OxaYTqazOB!pnzxrq)ov-CT6utVd;t9;RPL_$F2K9BAopt(xLor!*6DE)52K_o?iJMJ#@6p4Hj>(FK!JWic8AdZ'
        ';C87RhKcf;(iA;kDkGOeWlYeM%S$&}61$3;d0<2jTDt&jNTAP_{Va*B!ATaZ1~IgVcbD$LL^+t>+yFGJsV0daB#Fn5O-sHHzSLYu'
        'U^VJHYKF*Z-CAumt@{27*lL^2rqp?_HG>9Z_JEY_F&e8nhPxSF+l~VZ3g|%VZtN5vIXDXevJT&jZ^|@F@}!r9GRTb%`>u^LJ?I-9'
        '!q92xr3-9borf3{d^$K=+lo%GJ`k541Q<qZcDH~E#K<D0-i(X~vyBEv6Tq_a@IZ3e4>G`h8ftjeYS@mi4-E-6XtskNckKYOGdX63'
        '>h+QcPP|GCB@Hwsp`Pt$(Dv4#Qo*c(jEiqA1ZYbm-vU<yDGcQhw$j%4P3C|dHtMiv1b~L+wtQ&_a(6uS$FP3V%@uUF9$>Vg($w{-'
        's{X~oj_en4&l*7u=h%CDSV@tm1po?EJg^*gk+=)&iwW#@hE5-j$0Zdm+TcY4=TP-+MK0f3o;`o=qbrnSNgNL8!^oQ6w0LfpHAR@)'
        'q=Pi|AXbF6Bs0!BQ>3=(-k#_-DIr532H3IF*DNEApA?}7Ek3Y-a*_051FybBZh=m%Irih0Ee*P<g8_^k1j=D_fdig&2LS*8-0>0_'
        'C%Nn;ZUc@dAMB+%HzmX>wIf7k33Wf8eW0^sHnp(TF8G^c3_O>4?o)vaHh6P7HM#&3c(>C{2)bu^&ccp9XIR4;+niRI{bM-FDjOkt'
        'Y96%YwH!l>Mz6-f15KG_H-HO5!C7R0S}+)N;0~Rkc?|>kDmBEUmzyzDTJLNc(e<Ut9R%z+gnYSGA8VW|)pr>j3~sFX0jx^lZV-@a'
        '<c~mV0$ZT5dT5UxB87$_2=WB-%YJ%etZ7YHi_}oY+76P5?OOD<>;@wfu*2r7AFTSb*YDh|(=x8n^OFRFk)SON$^g6(zzi5_Q#R7M'
        'pLhu2T7)nb)>gPI<KEDQ)dW!*@;v}nU#o$_;Mp7K1IKYh;54n4X84&Ys~x8eXp|tp`9h*f!KL}O2sB^{(=cJZsu`Nnhn$A<x#Zl#'
        'dj;A=J+O=f9>Sqm2f^SJjR%0){?wf|496_0mm`guK{kT8d%aw#Z;uw^u6R6E1nci@D3IA@1RN6(kyo_cY&aZQqkB4a$pM_-8?WH<'
        ')*v*&pK&@j34<=HvD(S(c^Q|8_LlAAjamWFX5pFx7N%)6Y3p4A;Zfsjy{i%NRE*%%-7g_y(|QbN*b|WQVO-}St<L~CVtzVsRM$4$'
        'Q#Ql1q*(PGp(SWC8ep`g>#PX1x!7n(c?&eT)RM5gz25A{Y>e+kcq!$=W+-V(Hntux?gk3j{+69^cH4wpVJe{+#LV(e5b3PCCBbPA'
        '(2G@G1`L7L-Kk*A2EJzv)az-Gsd~k@dBthF7hVp4H27`3luJ$dUK6rRF3+$}o96*UoRR<ABsmRy03d?!>9v_%T<&I2TH@a`jJ?3e'
        'l(40cZ_>4DLxj2HFgi{W@WX}9ILqPR=D%&=lUcC%*ZeVq?Q2zQZR<Z^E!T8RZ%XEwaUhm$AXGfu;SPtwbO0w4^r@V6$FD-D<|38%'
        '{NMicE2~z>s+~HBkFH+1bp@bd|9(*?PsqPnPQs=PS{h32Dw#J0%@N2<b!`9b-_ng0`2RFVbZflqK~ULPPvvu4Ygruq|LwRvs&(Ss'
        'EeA}Vq-Ga9GckbS&=~L`x<<?ulvHWq74KGged{U^&Ip>NoE9M>NvmRZhnmnWbgm_@tV7XU?)<s)L)OO6{^5rG6F+b6G_wB5a~?l='
        '-p9XJ_#e0D{ZHV(PvPAUH{ikF-N&OvczSjGv>LqmF*fzB{{XOQ_DJ|0000'
    )
    assert isinstance(_MODEL_, _pydsdl_.StructureType)
