# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/silver/zubax/sapog/firmware/tools/testing_uavcan/public_regulated_data_types/uavcan/register/385.List.1.0.uavcan
#
# Generated at:  2021-09-29 15:16:17.771612 UTC
# Is deprecated: no
# Fixed port ID: 385
# Full name:     uavcan.register.List
# Version:       1.0
#
# pylint: skip-file

from __future__ import annotations
import numpy as _np_
import typing as _ty_
import pydsdl as _pydsdl_
import pyuavcan.dsdl as _dsdl_
import uavcan.register


# noinspection PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class List_1_0(_dsdl_.FixedPortServiceObject):
    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Request(_dsdl_.CompositeObject):
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        def __init__(self,
                     index: _ty_.Optional[_ty_.Union[int, _np_.uint16]] = None) -> None:
            """
            uavcan.register.List.Request.1.0
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param index: saturated uint16 index
            """
            self._index: int

            self.index = index if index is not None else 0

        @property
        def index(self) -> int:
            """
            saturated uint16 index
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._index

        @index.setter
        def index(self, x: _ty_.Union[int, _np_.uint16]) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if 0 <= x <= 65535:
                self._index = x
            else:
                raise ValueError(f'index: value {x} is not in [0, 65535]')

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: List_1_0.Request._SerializerTypeVar_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.add_aligned_u16(max(min(self.index, 65535), 0))
            _ser_.pad_to_alignment(8)
            assert 16 <= (_ser_.current_bit_length - _base_offset_) <= 16, \
                'Bad serialization of uavcan.register.List.Request.1.0'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: List_1_0.Request._DeserializerTypeVar_) -> List_1_0.Request:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f0_ holds the value of "index"
            _f0_ = _des_.fetch_aligned_u16()
            self = List_1_0.Request(
                index=_f0_)
            _des_.pad_to_alignment(8)
            assert 16 <= (_des_.consumed_bit_length - _base_offset_) <= 16, \
                'Bad deserialization of uavcan.register.List.Request.1.0'
            assert isinstance(self, List_1_0.Request)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'index=%s' % self.index,
            ])
            return f'uavcan.register.List.Request.1.0({_o_0_})'

        _FIXED_PORT_ID_ = 385
        _EXTENT_BYTES_ = 2

        _MODEL_: _pydsdl_.StructureType = _dsdl_.CompositeObject._restore_constant_(
            'ABzY8L4#Cb0{?YX-D?yv5I?b1IX{cylVE%iecAN`(Psrg&eqaa@kK&*Gq(w3lQkcEcLhNo6or67<6q}L<K*t@wUyq>C7GGu%>3pz'
            '`+4p6pS8jK7jJhn?zk$b11p)5`>aw>(Au<}aneJImv_AlwGS5dW*wx1bpK2Gl<viKs#%NnTY>d8(}jgbIuEvZjeo@sd<@`xiWg`P'
            ')=8t27{v4Mmgj>sIx`x4OJ7pFNSXImR>6ZyAJS<R{c}oj{iOuOSCtGYXP!}?%R4Q+v$B<5_ULi_t#-1}z+Y((4cOytU8I%tRDo{1'
            'NTX{AUNh%uYd9ovBi`IT1j=E>3$$%!6E-yXns!pWL7iusGs}+xeGipbkLyx%n5MW!xv5heq)@SV{Yd|`nk`uUlmrnQ4y)nNS*V!@'
            'o_@qDbS$U9X=kjblBcb>L7fS<1~e$39m8C)FNJBLbW$Pp<vu2vmX39%DaX>b6K0|G#wb@}MlW?k7ZWVIP$^kc9Ar>A;fhvQE?o|X'
            'Tt0sGWHIQ6#e-sDL}saA4vVm$edfQHHKgz2&il<XgTbDVjw~MuQ_4&n@d8MVXRyQ@!lkQCpU?Q5X>i1hvnx4F>j>+aRC%Pt=(%4;'
            '1Usx|1l4L;?q~i!r<#njQpnhvmh6KyBxo-cVVXeO`Pn=P!Llr%zEKgyaJYxD#&Q%70%7`$wMy^AqMVjVO=_d_tUZ|sB>zY?bI71I'
            'LKMdV(V&edO<)!S0eJ3v2^VxNm~QZGBH(Cq7{ZrjVm^zLDYAwt<x;$RDEF1vka>Udp5mqF(!ZYHck#NEdpt``mm)b0#Le2upeAs%'
            'o6s6uCXd_urprVdyIPuav_=Ye5|855ZN@pa`k#|{nyp(wDQ0IUt%%Sw6(Idg_eR%#xeC7<-2y0$E`$o(ZKclphzB;!hx2(SQK&h3'
            'NMYJBJ^!?9h00Z-D*gf}9L>n)1ONa'
        )
        assert isinstance(_MODEL_, _pydsdl_.StructureType)

    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Response(_dsdl_.CompositeObject):
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        def __init__(self,
                     name: _ty_.Optional[uavcan.register.Name_1_0] = None) -> None:
            """
            uavcan.register.List.Response.1.0
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param name: uavcan.register.Name.1.0 name
            """
            self._name: uavcan.register.Name_1_0

            if name is None:
                self.name = uavcan.register.Name_1_0()
            elif isinstance(name, uavcan.register.Name_1_0):
                self.name = name
            else:
                raise ValueError(f'name: expected uavcan.register.Name_1_0 '
                                 f'got {type(name).__name__}')

        @property
        def name(self) -> uavcan.register.Name_1_0:
            """
            uavcan.register.Name.1.0 name
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._name

        @name.setter
        def name(self, x: uavcan.register.Name_1_0) -> None:
            if isinstance(x, uavcan.register.Name_1_0):
                self._name = x
            else:
                raise ValueError(f'name: expected uavcan.register.Name_1_0 got {type(x).__name__}')

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: List_1_0.Response._SerializerTypeVar_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.pad_to_alignment(8)
            self.name._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            assert 8 <= (_ser_.current_bit_length - _base_offset_) <= 2048, \
                'Bad serialization of uavcan.register.List.Response.1.0'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: List_1_0.Response._DeserializerTypeVar_) -> List_1_0.Response:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f1_ holds the value of "name"
            _des_.pad_to_alignment(8)
            _f1_ = uavcan.register.Name_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = List_1_0.Response(
                name=_f1_)
            _des_.pad_to_alignment(8)
            assert 8 <= (_des_.consumed_bit_length - _base_offset_) <= 2048, \
                'Bad deserialization of uavcan.register.List.Response.1.0'
            assert isinstance(self, List_1_0.Response)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'name=%s' % self.name,
            ])
            return f'uavcan.register.List.Response.1.0({_o_0_})'

        _FIXED_PORT_ID_ = 385
        _EXTENT_BYTES_ = 256

        _MODEL_: _pydsdl_.StructureType = _dsdl_.CompositeObject._restore_constant_(
            'ABzY8L4#Cb0{^{K--{eY5Z*KQV`CCyyl6mC2N69(G80iTD2g!{l*z5(^3!1G^i0=oHO_Po-978>fnXk#95fh6`@j08)jPYnyIl6w'
            'eb}Ats;>I#`|6wDSO4B!@6A5`-DWDRs8VLZNM6ZZUR02>QrC^P(n0X2ZaUMJt~GFL+CX?3K6(^>3tN7TDPB|j?Us*Au2KUdX&spK'
            'I{l<OU>mJ0#rtdw#!9UM_WZ`3`Sa6|ujIWy!=vC&Fz%d@MeD$Z2VohcXGy`YU6W9WeJC$8!5wEV;=`A^LtOJ`pGP)`fN=wlFM8w2'
            '2LWH5U)c0-E$M6wp9X*K4yRK(xejXN@Jc*AOvxz*71W?y2W8nLjghr<a!eVUx0RJ61>y(gU<BrHy%VgEj#aaEA@9?iCAW^%TF@Bp'
            '`8RGX3dL*bRf=uL5OLf4BkTl!mRZM@;6@xQ^tdhjajMktQo3o#|MjoULu?p%o%8tqoR$ysK5pUpd?l8|i}Cg<D=HiO2aECci_@g;'
            '`TxP6{8qY-w43yIKAu0ubQ65Ctcab~g|1{tByB^ji9AP(^J4>sJ8kw!T4yCn+6Mg6zkXG#k~>f@OpQawOaqG6Y>V<w58A5YW_l!Z'
            'osD_bLij6e<^3nNz^~?Hd_%X+?Qk`M9caMGWsrVhHJ=c*bm9BiA?Ax(GyZC+NTm2cY1{v7_>HJ)TX9OwS7K`Ki6y;Z(r`61%%ClR'
            'fZQcD?rrz__|t(z{F$P$GA;dT=gL(kG*Q<JZNdHK0f(_-+8LKHF?`d~k_l)GMBYT$^RLhnOhB+k8^@#w1Am5D-I@|8PyuT=t&lev'
            '>KZaDD>8SsOHC%3<&7R?Luu+?xq-}SUD=E}I;lpivtrh?1xd=tku)nc+&8Yx<|zxeX3?$b$LXcC3(y`g<dy)K=rFR>Se6j>@S%U_'
            'ib`(Zx_0>@sFDmIl0}UqPMQY%6hH4&_~MX~r*Ci}2;C6{Df%_NxSB3Z)@u(lf0S@SasRuzano7LL@L72y#bRNNW#P+ck~rQ0w#&H'
            'iEdq@he@GZCG3SnrjTApgtVn5PNy+rD3!DbB8@6yL46&bu_*Qs1~~NN|3QRLE`Qd&&<_ZK_!u7|e=)22*;9pPIdSQK@hH9*g$4is'
        )
        assert isinstance(_MODEL_, _pydsdl_.StructureType)

    def __repr__(self) -> str:
        return 'uavcan.register.List.1.0()'


    _FIXED_PORT_ID_ = 385
    _MODEL_: _pydsdl_.ServiceType = _dsdl_.CompositeObject._restore_constant_(
        'ABzY8L4#Cb0{^{M-ESN<5Wk3)T(2Lb^b1sIjeroK-7BhqA|a%<YN1>bswAyYrE2Bfo!nUL+KcVI<SJDn4@HfzM5UTH1meHst&Df?'
        'E|)Y>-^fe69?x$+elx%1mqULn9ck4+?qWI2OqNHn0WEkg9`PiHC{9&TDkCg-cXSo>K%}rXEWtnbA8+}`e!(4&HT+zGv9S&J*mB2L'
        't*%mA={+wG$C4L>^G?MFDVLFkzAzSav`D|Al?KJTc02%WgpvVk_WtPn-1laBtzZ2X<q>mhwMZ%p#y|82Wj=Z2-Qn8;@@yxQPMmSe'
        'n}iQ?FSRIy6$5&4>Yg;BFCn`lE%ZU}F6(HV2pi`h`xbp~j=)n+-6&K>-FVxby*ma9ZqZG$Ed>)5)OzAqygMBm%VoxOHVyQ&O0eS&'
        '3z@;DcZcFkrQWrCm2h`zs{S|`HeG$}@k2aoD4PsQ4Jo&f`E7S1UKg8?#ii0V7MWjmCu5^3odOwhh)Yhf+@Oo9fUXfawZ8j^f^2pT'
        'FIB(0E_AWMHFT{~x#?0wD`Y=z80?l+l8clEpkL)7;7(gjcl2aTa`)=B&l{pYi>^eCkvbbAH<W}1X+!_Rc=@L||Krk3tF?y0u+b&s'
        'd9F4Lvj{AuGiYWN%Y;eQAe`wsw81d79-gvsSi|^$i#$-ul&s$cM9`gN$Y`oH5B1ddb*tHWm=w0IRly#CR;-d%<cv!OMQMk15JqWf'
        'p!ueWh&r7$@>M#c;UORjAFy`98*I`kxR5MWGH`9#22%5<vZ)~}DG4Il4M+y5EbCWXlOsSD>K?&WGDR-?bhm*pT^zY&qcka=CT5~A'
        'LrHGDn;(z+&ahGE?cQ(ij@=M;vHo7A&(XNM*J4$A#|{E9!y-{M6GZJ26pEI~()RvPhDIyBvox>ADYYQ;_@#T}F3&P5^`%Gnb+9g1'
        'dCv84uayu6Jg>n2?iYG<&rCwPQ8qxn*RB#Ow-7SyBOUl=ILwBfq(KedoftMtE^BF7t`d`w#|au_QxZimlCs%R9v%1Y0g}}`_jnBF'
        '@Z>{}XGR`xP5GYQ>$@EGm0V7Y6>YbxJAZ(lY0Zb;ox9KJmTnquu7}&biVQgvVWXNd&X15U^xAk4-^UL~Tig*+sgkF{4t?*1dvi=;'
        'J^uUpz1N!wa#efd6}(y-@eBNFimWp?l?=)w_hmiA45ZVtlWZ^GjRxXYV6aUL?t(hE5+-{EO0eRf5&EfN_60fY#iAU)>$ULC(!aC#'
        '{bTyu5e%(o1{aBKFu~d;YpeaTwRY~fL$$2pJbpxShzkV%1RoguWE($S#!F8B50V)MWm+yV+QxZz;ksn^)^1<B3^JuP&n9A1i&NzH'
        'C+C~VDaUWag6!(ReucXSx27advhi}T0%&naZMdD%O%fYb*`R-ks$^y^F%dy@X(G|X@M2v^VKAuCxTnu>Wzti;jM3B3@K;sv+bb$K'
        'z2CM@mULliOWX8%cJ%+ti0diqGFjVtvgEZHLfQ-X7ygO=;NMl9`_k4-lReRc-71Ox120u>9#{zg00'
    )
    assert isinstance(_MODEL_, _pydsdl_.ServiceType)
