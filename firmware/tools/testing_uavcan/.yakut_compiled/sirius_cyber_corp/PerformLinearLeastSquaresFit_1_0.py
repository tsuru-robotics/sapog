# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/silver/zubax/sapog/firmware/tools/testing_uavcan/custom_data_types/sirius_cyber_corp/PerformLinearLeastSquaresFit.1.0.uavcan
#
# Generated at:  2021-09-29 15:16:15.541980 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     sirius_cyber_corp.PerformLinearLeastSquaresFit
# Version:       1.0
#
# pylint: skip-file

from __future__ import annotations
import numpy as _np_
import typing as _ty_
import pydsdl as _pydsdl_
import pyuavcan.dsdl as _dsdl_
import sirius_cyber_corp


# noinspection PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class PerformLinearLeastSquaresFit_1_0(_dsdl_.ServiceObject):
    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Request(_dsdl_.CompositeObject):
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        def __init__(self,
                     points: _ty_.Optional[_ty_.Union[_np_.ndarray, _ty_.List[sirius_cyber_corp.PointXY_1_0]]] = None) -> None:
            """
            sirius_cyber_corp.PerformLinearLeastSquaresFit.Request.1.0
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param points: sirius_cyber_corp.PointXY.1.0[<=63] points
            """
            self._points: _np_.ndarray

            if points is None:
                self.points = _np_.array([], object)
            else:
                if isinstance(points, _np_.ndarray) and points.dtype == object and points.ndim == 1 and points.size <= 63:
                    # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                    self._points = points
                else:
                    # Last resort, slow construction of a new array. New memory may be allocated.
                    points = _np_.array(points, object).flatten()
                    if not points.size <= 63:  # Length cannot be checked before casting and flattening
                        raise ValueError(f'points: invalid array length: not {points.size} <= 63')
                    self._points = points
                assert isinstance(self._points, _np_.ndarray)
                assert self._points.dtype == object
                assert self._points.ndim == 1
                assert len(self._points) <= 63

        @property
        def points(self) -> _np_.ndarray:
            """
            sirius_cyber_corp.PointXY.1.0[<=63] points
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._points

        @points.setter
        def points(self, x: _ty_.Union[_np_.ndarray, _ty_.List[sirius_cyber_corp.PointXY_1_0]]) -> None:
            if isinstance(x, _np_.ndarray) and x.dtype == object and x.ndim == 1 and x.size <= 63:
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._points = x
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                x = _np_.array(x, object).flatten()
                if not x.size <= 63:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'points: invalid array length: not {x.size} <= 63')
                self._points = x
            assert isinstance(self._points, _np_.ndarray)
            assert self._points.dtype == object
            assert self._points.ndim == 1
            assert len(self._points) <= 63

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: PerformLinearLeastSquaresFit_1_0.Request._SerializerTypeVar_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.pad_to_alignment(8)
            # Variable-length array: length field byte-aligned: True; all elements byte-aligned: True.
            assert len(self.points) <= 63, 'self.points: sirius_cyber_corp.PointXY.1.0[<=63]'
            _ser_.add_aligned_u8(len(self.points))
            for _elem0_ in self.points:
                _ser_.pad_to_alignment(8)
                _elem0_._serialize_(_ser_)
                assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            _ser_.pad_to_alignment(8)
            assert 8 <= (_ser_.current_bit_length - _base_offset_) <= 2024, \
                'Bad serialization of sirius_cyber_corp.PerformLinearLeastSquaresFit.Request.1.0'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: PerformLinearLeastSquaresFit_1_0.Request._DeserializerTypeVar_) -> PerformLinearLeastSquaresFit_1_0.Request:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f0_ holds the value of "points"
            _des_.pad_to_alignment(8)
            # Length field byte-aligned: True; all elements byte-aligned: True.
            _len0_ = _des_.fetch_aligned_u8()
            assert _len0_ >= 0
            if _len0_ > 63:
                raise _des_.FormatError(f'Variable array length prefix {_len0_} > 63')
            _f0_ = _np_.empty(_len0_, object)
            for _i0_ in range(_len0_):
                _des_.pad_to_alignment(8)
                _e0_ = sirius_cyber_corp.PointXY_1_0._deserialize_(_des_)
                assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
                _f0_[_i0_] = _e0_
            assert len(_f0_) <= 63, 'sirius_cyber_corp.PointXY.1.0[<=63]'
            _des_.pad_to_alignment(8)
            self = PerformLinearLeastSquaresFit_1_0.Request(
                points=_f0_)
            _des_.pad_to_alignment(8)
            assert 8 <= (_des_.consumed_bit_length - _base_offset_) <= 2024, \
                'Bad deserialization of sirius_cyber_corp.PerformLinearLeastSquaresFit.Request.1.0'
            assert isinstance(self, PerformLinearLeastSquaresFit_1_0.Request)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'points=%s' % _np_.array2string(self.points, separator=',', edgeitems=10, threshold=1024, max_line_width=10240000),
            ])
            return f'sirius_cyber_corp.PerformLinearLeastSquaresFit.Request.1.0({_o_0_})'

        _EXTENT_BYTES_ = 1024

        _MODEL_: _pydsdl_.DelimitedType = _dsdl_.CompositeObject._restore_constant_(
            'ABzY8KZ8_Z0{^vDU2hyU6y1n?Y?G!<8=8W6U|yiD)b93!=7EALXb41;-9||p6{N~|X6~*HGxo&xgxyL=E#f1QEKyPS1;HCXj5qih'
            'T<`2AyWK1gNbJjcY~SO1?mfqTI{osmYNhwHZ|B`aCuxmnP@Jax35`;ykyvKA)ZBoxi))bb42Q{sZVv8+yYkF^>n___!i50kSj8^x'
            '7*)ikP%ye>h6tJ=#H!|s7n;P~2oz$gytW0ZB~`Y`1yHpKRGXc>f-2DK+|;&VuK;bFt&)9EnoHqNncMA;U$}58to-PnIlDlpF^Wfp'
            '0qq{UNpy}jIXkn?Ax(~RoF@r2lo+45eQQFvQnc&r#a)WCII{_&ZP-VCc9ifUffO<jro>}&<vg3WZ=O&B$%T3Jxnrl<nE@eo?lEq^'
            '&<}fK5}#c8j_`d<`P6zUsToaUfkfPpw3np|mylzO1tytHFsDm)Wor=b!)o_%t>Krju9Y9$wzIDjZKz17N``?B5GSK;!A+6)gIkKm'
            '2K%A0PwV|LV%VA0+qbX3=R8soA@!+_v(qGzv9lFFbHt8a>5s04OY9oE!EPR~TWob4pzGKj_CXPWT^{N;iMpk}JjDC#9k#|kERcHw'
            'xq_IYVBMiTLt4B83CX20geR_P&k-#P6$37$Kyr%AY*uG7gSzG^>aG5yh-jy-X)fFK7FXFfsLQ&MGSziF)^O1#1>KLSsK<piGCNj~'
            'u8+03-fwg5M(uj740A|>QH^ISFBNR<K99j2dXiYFD8-7tJ81lI18}2x_1oFgA9GXcaR)#960olknL8Uy0@2+pk}1cIEH@yNC@bH*'
            '`#C6Tq#E{k%s9G*?bx$hG)a*9*e3RfJv<ui*bDch@WmG=LfTU$A`*9A>Bo^@3}KvY7HLXVcPx6A?9;RW_p`ekE<M)~UJ!Yi7G4QO'
            'gvHCaz#ij2?Re$SdC?as#o(~&qbkoe${0F16}`Kpi3<Cw2hOqqD(HyiO|};XObx}c!f%#gwV1rDBg_Ih(wxTJbX|DYo*z`c<u9K8'
            '#c;_kKg0yu0+J13pbcuo!RUx8I-(v<c@v;7@W@Sezsz%csA^x9Q?ak*FpVnG7-`GJZ7SNZ4LKM-sn=hZRlAD;yPjiMVS9}~=f+v~'
            '3WOQ%HU6GExd!Ok+1v|X_pM9WCz#u>Y(=wA57}o;wqd{fKTY><&&!Y#S$M$i*gqaHu7kc00~*JW8y(Of<=O<Y72I44dSrrFN`-1e'
            'dE>H30tNW!2^|;)0anFaYjJ~7{?MRRh~AZmLC|XPn4{NqZGNK_2pMRZ7QIF2;2HXA51~YZWF#WMtb-<P*4)VoIQGp?18oj<W~d=-'
            '0Uw$r|G==7@ouo+dZl2$qh+9j_BF0i3G52qrseCe2m_knUn$_HM?wuysNeqwi3Xz*{iQ#8*{Dq8=c{7wdk%A&AV<F#OmJlFA2Tcb'
            '#qtOM00'
        )
        assert isinstance(_MODEL_, _pydsdl_.DelimitedType)

    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Response(_dsdl_.CompositeObject):
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        def __init__(self,
                     slope:       _ty_.Optional[_ty_.Union[int, float, _np_.float64]] = None,
                     y_intercept: _ty_.Optional[_ty_.Union[int, float, _np_.float64]] = None) -> None:
            """
            sirius_cyber_corp.PerformLinearLeastSquaresFit.Response.1.0
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param slope:       saturated float64 slope
            :param y_intercept: saturated float64 y_intercept
            """
            self._slope:       float
            self._y_intercept: float

            self.slope = slope if slope is not None else 0.0

            self.y_intercept = y_intercept if y_intercept is not None else 0.0

        @property
        def slope(self) -> float:
            """
            saturated float64 slope
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._slope

        @slope.setter
        def slope(self, x: _ty_.Union[int, float, _np_.float64]) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            self._slope = float(x)  # Range check not required

        @property
        def y_intercept(self) -> float:
            """
            saturated float64 y_intercept
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._y_intercept

        @y_intercept.setter
        def y_intercept(self, x: _ty_.Union[int, float, _np_.float64]) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            self._y_intercept = float(x)  # Range check not required

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: PerformLinearLeastSquaresFit_1_0.Response._SerializerTypeVar_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            # Saturation not required due to compatible native representation of "saturated float64"
            _ser_.add_aligned_f64(self.slope)
            # Saturation not required due to compatible native representation of "saturated float64"
            _ser_.add_aligned_f64(self.y_intercept)
            _ser_.pad_to_alignment(8)
            assert 128 <= (_ser_.current_bit_length - _base_offset_) <= 128, \
                'Bad serialization of sirius_cyber_corp.PerformLinearLeastSquaresFit.Response.1.0'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: PerformLinearLeastSquaresFit_1_0.Response._DeserializerTypeVar_) -> PerformLinearLeastSquaresFit_1_0.Response:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f1_ holds the value of "slope"
            _f1_ = _des_.fetch_aligned_f64()
            # Temporary _f2_ holds the value of "y_intercept"
            _f2_ = _des_.fetch_aligned_f64()
            self = PerformLinearLeastSquaresFit_1_0.Response(
                slope=_f1_,
                y_intercept=_f2_)
            _des_.pad_to_alignment(8)
            assert 128 <= (_des_.consumed_bit_length - _base_offset_) <= 128, \
                'Bad deserialization of sirius_cyber_corp.PerformLinearLeastSquaresFit.Response.1.0'
            assert isinstance(self, PerformLinearLeastSquaresFit_1_0.Response)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'slope=%s' % self.slope,
                'y_intercept=%s' % self.y_intercept,
            ])
            return f'sirius_cyber_corp.PerformLinearLeastSquaresFit.Response.1.0({_o_0_})'

        _EXTENT_BYTES_ = 64

        _MODEL_: _pydsdl_.DelimitedType = _dsdl_.CompositeObject._restore_constant_(
            'ABzY8KZ8_Z0{`t*ZEqYk5WYa$q)AJuLIVhi2JxaG!L8T(=H*R+wn62R5G54x0c3f1owLQ>?qYjGt^%n=0=3dgM5_6}jPKIsLK?pC'
            'm6KLCwr8H1XKX)yaN)0C7J8Fkce5E6x+wcpb0t|R@3XAreVW&!rq<GM+g-iQOF06w_-5R2`^3Kg(Ee)Ix=U166<1dDx~qFewYg~('
            'KkagnR%`?iiIz&Xn&#t-E5KGwe}}96T8%bk#hKdVOq;!*TBf+(kfy)ObyHUwA{XcZS6bGUOEdrNvHipj<_5h#>_givQD%&iS!=kq'
            'KS0iN2tD(%-Ng;b%i^TUMOrY!sBxvA7v3n>0(k%)mp96qnbSm<XeJFUc{Mb`4%PuO2S#*M7u<^1yOo`%;V!Iy3)Z&W67cB#Zg*|>'
            '3e|>H1yjW=&?CSZv0)`mTe!sgisc6QYv{|yu?-mCMRUELpQK5g27VBd7zcioAmWD+PC^_cfuEo-h~gwAC_(Ta;fRD`n#NH|Qa=fk'
            'm>?H}W0VktFo^<^#3&+Z6p=W<NgR`e_=z8dD0H(y<c9&lVGQtLfc*f+grqR^2{@AwQox6TC`ckdPDzX)n~$O-jv^lujFK3KQJ5l>'
            'qJX3UhTsq-kc>o#gy0keDPX&70S;pD!WgF^@#Baf5=ChMS#bbtfg(^RIL0XS!!QBzP;3CzCO$!_pW-wn#K#eW+7XU@68bnKfEyF*'
            'n%`z(vAd|t+HL;@TGYAidT#c{baTaP;*DeL&B403Dc%<EJQDAUwg3D6-}}Ba1{E<}<-9Rgd?@;D#=GU2J596kR770=KM*S-7G4YY'
            't>BH~IRjO)kGq%XzC7dwZE9txEbMl7o$9&;R9GlEZ5Z69?l(`=BkpNgf~I))+l(E0nl<&%+m~weGl-98>ble(q&2b{(v}_Mtn%_!'
            'n|gF2652Z>XWqZcncqkKDV7Cpf@vs7@ya-jIgmNGj~sJ2dszur`@N?MbfN^{X#P32-IXt-*_@2`V0f%W-HWttY`1zIh#rr!x|DFn'
            'm$&$+27PlX@^!-%Gqsvk_gqL&NpYvUw!?}7`f<idd?mhoX5Hy-+^Q?LBh_;uyUSBVAntT}CUSEI<JxvxmQ0P$L|>u@tZcdc)2<EH'
            'k8}nvLo+Q4-hwuR=8a_Kq!$c!=!|(Mzir7}^djYl4XY-P$2J_i?<b&wK1Jg?6WQQ_$l)tsVc$8i!9sg>T4(OyiY0MHyezIeCM&|@'
            'BAGp(B7H1A+7=&+PsFFwy`6^wpfkp9^<L;!;Pg(PR7C}61^i7OA9yL2??I8niWhg`Rt&j1^~`|&tb+c$HJEev2UG|u`AmF1<#Kzb'
            'qr20od#<`!s;fZt)Rw)v%c>#Y<qbFTymRp5aYG?s7Hi>X(ur(a<iN?bXRzSrdq;ZGr%6lQ;_7o2U1<MrIZSX-hX?=w'
        )
        assert isinstance(_MODEL_, _pydsdl_.DelimitedType)

    def __repr__(self) -> str:
        return 'sirius_cyber_corp.PerformLinearLeastSquaresFit.1.0()'


    _MODEL_: _pydsdl_.ServiceType = _dsdl_.CompositeObject._restore_constant_(
        'ABzY8KZ8_Z0{`t-&5smC6rV+4m+yrYh!SI;%xZ9^zq>jfSUy66!>$O3s3D!2?wYN_p6;fqdf6c{0TT=)ok&6%6E8;NQU3*x9t=0R'
        'dGY9<;j8JH-Pw<UV1g%iv;9%^-mCZVd%xFvcjq_19&8MLsyB;%B9gQj3Bnmp*&W<TNi&M`UXcqXiK_NpA$*0!<Z8bl>alwJp87(~'
        'R|g_aZk0sHNa}Uks1BSXDeHksvQct(#IlU=fyfof%UG6tld)Y<hI??7FBoT~h~j>SaPWZ_%}a!LbKbkiGJ^R<f`z<ttHhj$^Gr4`'
        '*Dk1PCR!m}usqYJOkW#5KUVFjcH=8`4}yrWl$>=+NrbwgCWXBwq^e!#8A+3MANNKHmbi|#Ix#_=bKF<e@oN}XVdWypmL)x{S2t&m'
        'q@+i(QTF!N>-13d+BPZ3SthT4qUd2dHwuUzy8+^_57pk76i>l*Mc4|syytwHW4Y0deNl(WC>?mI+OrU23<-{Uc>+G2td3n8scW_7'
        'S=d|DTaeereRWw?uSP=REWtb(H}nAP^zd@VWSQuLyBx<7>LH*`=ZDW=quS+rp6M!Wsq8@LQ>&`l86|nFs)k-!i;gyjPgZ-D+SI4P'
        '1B&Q-TMhITU7)AS4yoqG>K%3ZHNLcoQ}i8rfu1QL_JkCi#25gp9##jVE?Xr@RODPnEKy6<;Yj2qj|ps~Bq}gOR`psm?~#^ZDd4Sj'
        'r|jU>mcT{6-0CvkyA8N($vjU*3yzg6TaHS+6635DmqO;fbp(mlmNK`7Wo}wcvstSt2!mn)XLAh|QTL&GsDp$|byCRaTcg6S7XSq1'
        '=66-?Kf`2=$1CtUgh2I5lozTpCK(a^UMEi(RAg?E^m2feF5U+P;aKK;yvJk8pj+tm>d+;eBoO)*A$o&;y7qLvI(jzGbn>%pO;&qq'
        'ix9ZdNMF~C#%vr~D$^A6{ub@s(F#sWqP|x1?b%170|ZgjZUH5f9Y|h}Wl&?d<5i9PX$|@^#h~1t(OQj10$@y53!DwOWC;+K4~$bj'
        'vPwjUmP>S{ZP43edi0JKmhG8x^0w%J7Z4*ZaLi<1wNF(?Mw#zw;u#Xd$!hK+a9}wj$%RakWx_XfFm%KWbcEZU(oFz;0Y`pFuhxEk'
        'JeD<5FHxP#@i1l}j16Tuei>)W<T5FUWRq(Bd7ZUWpzxWFvE866i+@dTjdGA6@Ni}E@9FJx0A0Jg(7+eN*2VOF@a=ngLePs3>EaSy'
        's=j=gP4}$vGS-Ro(gV6s{dAQwVGR4wz;R3pDGY3+Oh_Z|8umG35R4J$IR~@>ykR>_3{GI^Wx|k@7?2hDZkI{W(uW$|G8<4LD3NZL'
        '#SD5~H1}TU8d+|LJS_*CWEIX3CkGa4Yb4pAVSv}h5?*Sm?GdovH`NH6W0e^z2%UvNb5su)dSYue=nsQb&>x{?$SSn2RErIxItFZ7'
        'Pk$a!f)lva0KUHlR0Dwe@LxdG*a*>Yhfm)vHg>}6W-t$X4t$ybN4;rG>d1reRU--*Rb=S?^zgL3V<S3v;jfh1q#EUQe%sNuFgDt*'
        'dsB^u6@-BwI+o)i-*zl7Fp=eYcHr7h;8=m_I-Vbd$P7%ld$xyMHw=9*M4=V9fsahBWBX=+Ow&f5g96|5Q0RHcckICTQGl$#@?6u^'
        'tBz;64zgVz%)5?lIkt~b2(K0bVdTOQ@Mk)n6L^*%BHx75EYk~M2wOI?&A_)^&kap8G#wN=HYmGh0EZ#ZL@o$9P6)R3X^!pqAZ6Qj'
        '=pxJakcm7mbl_CmfoLH_2p!qJZMv501`s?r>wvd`h0M?j?Jz{hvSIkcukBmNwQLuGT_3G~4eSzWu1h$emH#vTA7p%AA3pVg0W>X+'
        'zQi<v%+o*U6Z$88T5e{M)6e6o?df4V$#EiB(3Bzdqz95)fC;>?#&KKZ>KSzxgzl~jjR<n%@{k{YU+?25^yzaW{CTmlgZ}aoi4dZD'
        '1`qCd77y;2IF*|(MsnM7+YH#59{!uSwGV%T-5I{djbm`Rc?5d#=B&OP)t5QAY)GvB0{*e=H2(nvw{C>V4gdf'
    )
    assert isinstance(_MODEL_, _pydsdl_.ServiceType)
