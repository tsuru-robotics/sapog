# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /tmp/yakut-dsdl-zmn42v0l/public_regulated_data_types-master/reg/drone/physics/kinematics/translation/LinearVarTs.0.1.uavcan
#
# Generated at:  2021-09-29 15:15:52.646368 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     reg.drone.physics.kinematics.translation.LinearVarTs
# Version:       0.1
#
# pylint: skip-file

from __future__ import annotations
import numpy as _np_
import typing as _ty_
import pydsdl as _pydsdl_
import pyuavcan.dsdl as _dsdl_
import reg.drone.physics.kinematics.translation


# noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class LinearVarTs_0_1(_dsdl_.CompositeObject):
    """
    Generated property settings use relaxed type signatures, accepting a large variety of
    possible representations of the value, which are automatically converted to a well-defined
    internal representation. When accessing a property, this strict well-defined internal
    representation is always returned. The implicit strictification enables more precise static
    type analysis.

    The value returned by the __repr__() method may be invariant to some of the field values,
    and its format is not guaranteed to be stable. Therefore, the returned string representation
    can be used only for displaying purposes; any kind of automation build on top of that will
    be fragile and prone to mismaintenance.
    """
    def __init__(self,
                 value:                       _ty_.Optional[reg.drone.physics.kinematics.translation.LinearTs_0_1] = None,
                 position_error_variance:     _ty_.Optional[_ty_.Union[int, float, _np_.float16]] = None,
                 velocity_error_variance:     _ty_.Optional[_ty_.Union[int, float, _np_.float16]] = None,
                 acceleration_error_variance: _ty_.Optional[_ty_.Union[int, float, _np_.float16]] = None) -> None:
        """
        reg.drone.physics.kinematics.translation.LinearVarTs.0.1
        Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
        :param value:                       reg.drone.physics.kinematics.translation.LinearTs.0.1 value
        :param position_error_variance:     saturated float16 position_error_variance
        :param velocity_error_variance:     saturated float16 velocity_error_variance
        :param acceleration_error_variance: saturated float16 acceleration_error_variance
        """
        self._value:                       reg.drone.physics.kinematics.translation.LinearTs_0_1
        self._position_error_variance:     float
        self._velocity_error_variance:     float
        self._acceleration_error_variance: float

        if value is None:
            self.value = reg.drone.physics.kinematics.translation.LinearTs_0_1()
        elif isinstance(value, reg.drone.physics.kinematics.translation.LinearTs_0_1):
            self.value = value
        else:
            raise ValueError(f'value: expected reg.drone.physics.kinematics.translation.LinearTs_0_1 '
                             f'got {type(value).__name__}')

        self.position_error_variance = position_error_variance if position_error_variance is not None else 0.0

        self.velocity_error_variance = velocity_error_variance if velocity_error_variance is not None else 0.0

        self.acceleration_error_variance = acceleration_error_variance if acceleration_error_variance is not None else 0.0

    @property
    def value(self) -> reg.drone.physics.kinematics.translation.LinearTs_0_1:
        """
        reg.drone.physics.kinematics.translation.LinearTs.0.1 value
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._value

    @value.setter
    def value(self, x: reg.drone.physics.kinematics.translation.LinearTs_0_1) -> None:
        if isinstance(x, reg.drone.physics.kinematics.translation.LinearTs_0_1):
            self._value = x
        else:
            raise ValueError(f'value: expected reg.drone.physics.kinematics.translation.LinearTs_0_1 got {type(x).__name__}')

    @property
    def position_error_variance(self) -> float:
        """
        saturated float16 position_error_variance
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._position_error_variance

    @position_error_variance.setter
    def position_error_variance(self, x: _ty_.Union[int, float, _np_.float16]) -> None:
        """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
        x = float(x)
        in_range = -65504.0 <= x <= 65504.0
        if in_range or not _np_.isfinite(x):
            self._position_error_variance = x
        else:
            raise ValueError(f'position_error_variance: value {x} is not in [-65504, 65504]')

    @property
    def velocity_error_variance(self) -> float:
        """
        saturated float16 velocity_error_variance
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._velocity_error_variance

    @velocity_error_variance.setter
    def velocity_error_variance(self, x: _ty_.Union[int, float, _np_.float16]) -> None:
        """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
        x = float(x)
        in_range = -65504.0 <= x <= 65504.0
        if in_range or not _np_.isfinite(x):
            self._velocity_error_variance = x
        else:
            raise ValueError(f'velocity_error_variance: value {x} is not in [-65504, 65504]')

    @property
    def acceleration_error_variance(self) -> float:
        """
        saturated float16 acceleration_error_variance
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._acceleration_error_variance

    @acceleration_error_variance.setter
    def acceleration_error_variance(self, x: _ty_.Union[int, float, _np_.float16]) -> None:
        """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
        x = float(x)
        in_range = -65504.0 <= x <= 65504.0
        if in_range or not _np_.isfinite(x):
            self._acceleration_error_variance = x
        else:
            raise ValueError(f'acceleration_error_variance: value {x} is not in [-65504, 65504]')

    # noinspection PyProtectedMember
    def _serialize_(self, _ser_: LinearVarTs_0_1._SerializerTypeVar_) -> None:
        assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
        _base_offset_ = _ser_.current_bit_length
        _ser_.pad_to_alignment(8)
        self.value._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        if _np_.isfinite(self.position_error_variance):
            if self.position_error_variance > 65504.0:
                _ser_.add_aligned_f16(65504.0)
            elif self.position_error_variance < -65504.0:
                _ser_.add_aligned_f16(-65504.0)
            else:
                _ser_.add_aligned_f16(self.position_error_variance)
        else:
            _ser_.add_aligned_f16(self.position_error_variance)
        if _np_.isfinite(self.velocity_error_variance):
            if self.velocity_error_variance > 65504.0:
                _ser_.add_aligned_f16(65504.0)
            elif self.velocity_error_variance < -65504.0:
                _ser_.add_aligned_f16(-65504.0)
            else:
                _ser_.add_aligned_f16(self.velocity_error_variance)
        else:
            _ser_.add_aligned_f16(self.velocity_error_variance)
        if _np_.isfinite(self.acceleration_error_variance):
            if self.acceleration_error_variance > 65504.0:
                _ser_.add_aligned_f16(65504.0)
            elif self.acceleration_error_variance < -65504.0:
                _ser_.add_aligned_f16(-65504.0)
            else:
                _ser_.add_aligned_f16(self.acceleration_error_variance)
        else:
            _ser_.add_aligned_f16(self.acceleration_error_variance)
        _ser_.pad_to_alignment(8)
        assert 200 <= (_ser_.current_bit_length - _base_offset_) <= 200, \
            'Bad serialization of reg.drone.physics.kinematics.translation.LinearVarTs.0.1'

    # noinspection PyProtectedMember
    @staticmethod
    def _deserialize_(_des_: LinearVarTs_0_1._DeserializerTypeVar_) -> LinearVarTs_0_1:
        assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
        _base_offset_ = _des_.consumed_bit_length
        # Temporary _f0_ holds the value of "value"
        _des_.pad_to_alignment(8)
        _f0_ = reg.drone.physics.kinematics.translation.LinearTs_0_1._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f1_ holds the value of "position_error_variance"
        _f1_ = _des_.fetch_aligned_f16()
        # Temporary _f2_ holds the value of "velocity_error_variance"
        _f2_ = _des_.fetch_aligned_f16()
        # Temporary _f3_ holds the value of "acceleration_error_variance"
        _f3_ = _des_.fetch_aligned_f16()
        self = LinearVarTs_0_1(
            value=_f0_,
            position_error_variance=_f1_,
            velocity_error_variance=_f2_,
            acceleration_error_variance=_f3_)
        _des_.pad_to_alignment(8)
        assert 200 <= (_des_.consumed_bit_length - _base_offset_) <= 200, \
            'Bad deserialization of reg.drone.physics.kinematics.translation.LinearVarTs.0.1'
        assert isinstance(self, LinearVarTs_0_1)
        return self

    def __repr__(self) -> str:
        _o_0_ = ', '.join([
            'value=%s' % self.value,
            'position_error_variance=%s' % self.position_error_variance,
            'velocity_error_variance=%s' % self.velocity_error_variance,
            'acceleration_error_variance=%s' % self.acceleration_error_variance,
        ])
        return f'reg.drone.physics.kinematics.translation.LinearVarTs.0.1({_o_0_})'

    _EXTENT_BYTES_ = 25

    _MODEL_: _pydsdl_.StructureType = _dsdl_.CompositeObject._restore_constant_(
        'ABzY8D1%gC0{^{OTaOgS6`lo_y>MGtZU$e<gut%D^z05Z%YZ|ILxOBIyEtaS1O)Ax?%Jsu`ZDh7p54K+6i120DlMfYcO-rSKY^cs'
        ';ymWT50N6}A+nO!MDk0doYP%Bmt__LA*{50s;f?)`}wMBe!1=Ui-!y8U-VY1V@b=_49R>!ZE=s*ZKfHf=d?U20+vL(t_FT+2BFWE'
        'J1v%cmCSyTe4fliqlQZzSg-i3p;^A?GOfisQkYV^D_rK#0EdB3U1`JEbG6GbP5tZCUzSNUZnT*%VLIW3XzaQgf0gJ3edNpJizM1%'
        '&>-+dJq(ykZiB*2Ozm<d(dZ??Y^!JDq+!v38UfnPw`7xiG@5@-i@{tz#wT*i_)f5fPbqQJeS+T(Y1^c(76^xFS39oBL5aA>tYw&x'
        '0d-oLpb@<=M9^jqwtV4;K(xWZ>1(bO4VPITxB+W0e=s9EjJgO6o4JjECwdLsH>nH^$Fsow<I%wnb3yo-b`jPVaS38R@|)zNB-(F)'
        'jjly~t6$K1SO?d3IKuQj$xP3+l4zS@d1i9s?^_CmWzL8jI(6m~Z-w-6NfK}x5Kh~Sw5XKKB2u^}Bhqsip+2basox<Eyt)AqF7T(E'
        'fi{Uk)jSCGe9?gA8KE)lRLX?`CUq*=ED@4eYz6XUkrwldwAHeOnPrcl7&G*Jl+*nLHHDH*LZV2W5ube;LT=#m72k7u(q%V&sW9Sz'
        'Vaz{8Bx5O)>499?0!M}0fLXsSz_-*Ck!qg=FTl7qwL^wh1|D%)8^Z*T728|Q?CY*q7m5%PvMMaFlbIB3JU2N>NRgE9R2K##3+%M+'
        'g#js-YgN*L8kMKWDi<clr50o^=xF3UvQSB7_I(R>hfq5{S@lBO0!5&KkkECR$)u#dusfLvPzXc>vTH4b4L$>FF(Xyb8gMU^$d#&x'
        'Wh(>`gn~8@%+>_N%MGB8iRlX|q?S2z(S}+OX7S>COJv6N0&?l6vn1`gmgj>$llo8;VGHARhSWRI{iv};JGMvD97Cc2c(l~;<vdly'
        'LGv5HEIGAp%rKT)!)C>lJyWs5dVz8nOk_10bn^g3aWcTNz!><r>Ox`&1W{@UG{Wv^{G#V#n*`my0|+>wMzea2zr#=I1?(qY%35da'
        '+LFF><>RG<&qpV2GT+;%I;}Uz8%E=<>#e$45^Xn9gOcct92D4E3knWVasU#>KT7M9+POXad^7<rn>dR&dr6I9JsO!y&@x#M>nxh?'
        '16ZTp$>1ElnB&LzySy3#pjZr)LOU@lS&w!bD`JgV1}4f7R<acBHKZ5%CW8f=87&HM5%E&sv`QU%Hw=nsdGVg(R?6);yVMHn(3=LJ'
        'Z)l^)9y-fn)?TFyKuZ{r(og`^=CwI3;{rG|IF+Cl8{AMWn5;vXzh25(8Wj*!fb{?!?)lK~7)Gp2Xj=*`8LWE#-C|nvvQJ~0l~g6v'
        'Lcj-l2n2X`n00yD<UKv`!bO8a7eU-S2O!K+im@W=9!LWG$#FLAvNrH|eo?lVDON;ZCBqhQmuZN$bsI8yBCmuVID^x{#`h%J`4bUb'
        'PT#MxZka|~4X>3%WHTYM<J3J!4@7m5Ii7;OE6{H=@ciB;v)wQ`G<d>qM0-A@7NXx1O#C*kE`_!Y0KajSpZ{Glqt{|thciGclaT1+'
        'VIBN*go_&&4CopT#&Gk3VnLz$2!2<H^(~5SMY<){x2gA0q$9DuUCocF`Ef-j)chpU?XkW?@$W=B9_zc1Zj1HZihmE%9kD*8*7qVE'
        'jrDy>&NR|}vA!SaRIDFBx;xenBHbD5hmcOj`eF6`YfA4CrRS)U^SaXa2GXOk{wC5RvHlj)*J7O@Jsj(ABRv%B$B-V3_3t4)5bMX0'
        '?vM5FBb|=*6UwfWNcYD2jIwVQ>7H1BN7?xUq`PAMl(M&|{MD4*C8QIvKBw%TM>-bkW#z|d6_1MYr;2oItS>0P&Zzj-lz(TlyzA!_'
        'eOJ*RDyr&2|B<3UR`i0R?<;ykQLgBkqW2Yjpy)$IA1V4+(Qg#}R?+V=x;Q?f28Z*(Og^aPgZJ~njeNlK!CF4JpAR17gNOOxQ9gK_'
        '55CC<-{ynw)F6cO8(=={6bRmGu8z<Rd&)%6J5kO@1>Bm39Y{;hdD8ta&$+LwbFLIx2&Ww_!x8PON$p%l-x0S@#PMk25^Uqaz_}H6'
        'O#-{-IbOOCE<3aVB11f~{wz9qx-wU;l}}d|7Eafy<yx(Jwl+V1X09?{J6)+&s`CqH%hgIH+tt#*j5-YV5eN$ZI;>Ov0pQKw_@5=$'
        '*ZJioz8IM=VRw?Egl?BIw@aDZ{Tma%vW^DupY!Dm@;>G_yU1vCM`j-$62L>=Kp5m4!Xe<l`FWCKm*kI^y15@uZ)WMuDfMz_ir(Ci'
        'qBgTVQ^2Y4*-84#6KUapeW6@TrMWNw{|$9<=u1m;+eo3n|J}<Bdx@FJy?yn$$u&PMH^(;QhMFd`ag)SGe1-Wrx-mbSrRo@@s(BP1'
        'y=;k>n5};QUwOuM_G?#OGxU0f|C9fzxeu%KU(Gp;z%)F<ZUox@O9Wu8l;Uzp;c}^m%cVYCE@ik3!I&QiM|5ZrE@tTknc5znWL-kx'
        '%B3aG3e(NLBiaGD%i!VO9eUP_CbFX*oUZZrm#0f>o`>M1FU<=u+Km4n&&o=30={MvIW7Rlg(o?>5;j?Hp6p8a1UNo<iiAzpRb`B3'
        'H?V<{_ya%E`~{Z8AA5zc_6iGOSw2w;&+d%pP13DyfNBt++K>=0bVK|AI37GD#G9-S3-M5ho9c(S(S>StuF?arL-|f<FyHrlxH9{K'
        'x+V&YCT^wZcBgzhc_Gm`kPi{P@77EzyOcrY?2GC++7CTL^z0whbEm8{WwqG+6zgzrvxCs&<KtKO_zWMv#mBD);OetiSf$s87HV`e'
        'y({ByS8xH&ep9A4kzqZ(IeROlTjP`0@UjdCT+#^PHcZ4y`a?+?B9ey)C55i~!Q^H4!2g-Qc?Xl%&_@QFB<r32oootrvaHh{0@K4D'
        'Q~vFS>EYi#0;We#e!F3M__vRN>2d$JSz`}QV?S&E0h4xwAXpdx00'
    )
    assert isinstance(_MODEL_, _pydsdl_.StructureType)
