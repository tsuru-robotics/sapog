# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/silver/zubax/sapog/firmware/tools/testing_uavcan/public_regulated_data_types/uavcan/file/407.Modify.1.1.uavcan
#
# Generated at:  2021-09-29 15:16:17.908352 UTC
# Is deprecated: no
# Fixed port ID: 407
# Full name:     uavcan.file.Modify
# Version:       1.1
#
# pylint: skip-file

from __future__ import annotations
import numpy as _np_
import typing as _ty_
import pydsdl as _pydsdl_
import pyuavcan.dsdl as _dsdl_
import uavcan.file


# noinspection PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class Modify_1_1(_dsdl_.FixedPortServiceObject):
    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Request(_dsdl_.CompositeObject):
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        def __init__(self,
                     preserve_source:       _ty_.Optional[bool] = None,
                     overwrite_destination: _ty_.Optional[bool] = None,
                     source:                _ty_.Optional[uavcan.file.Path_2_0] = None,
                     destination:           _ty_.Optional[uavcan.file.Path_2_0] = None) -> None:
            """
            uavcan.file.Modify.Request.1.1
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param preserve_source:       saturated bool preserve_source
            :param overwrite_destination: saturated bool overwrite_destination
            :param source:                uavcan.file.Path.2.0 source
            :param destination:           uavcan.file.Path.2.0 destination
            """
            self._preserve_source:       bool
            self._overwrite_destination: bool
            self._source:                uavcan.file.Path_2_0
            self._destination:           uavcan.file.Path_2_0

            self.preserve_source = preserve_source if preserve_source is not None else False

            self.overwrite_destination = overwrite_destination if overwrite_destination is not None else False

            if source is None:
                self.source = uavcan.file.Path_2_0()
            elif isinstance(source, uavcan.file.Path_2_0):
                self.source = source
            else:
                raise ValueError(f'source: expected uavcan.file.Path_2_0 '
                                 f'got {type(source).__name__}')

            if destination is None:
                self.destination = uavcan.file.Path_2_0()
            elif isinstance(destination, uavcan.file.Path_2_0):
                self.destination = destination
            else:
                raise ValueError(f'destination: expected uavcan.file.Path_2_0 '
                                 f'got {type(destination).__name__}')

        @property
        def preserve_source(self) -> bool:
            """
            saturated bool preserve_source
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._preserve_source

        @preserve_source.setter
        def preserve_source(self, x: bool) -> None:
            self._preserve_source = bool(x)  # Cast to bool implements saturation

        @property
        def overwrite_destination(self) -> bool:
            """
            saturated bool overwrite_destination
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._overwrite_destination

        @overwrite_destination.setter
        def overwrite_destination(self, x: bool) -> None:
            self._overwrite_destination = bool(x)  # Cast to bool implements saturation

        @property
        def source(self) -> uavcan.file.Path_2_0:
            """
            uavcan.file.Path.2.0 source
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._source

        @source.setter
        def source(self, x: uavcan.file.Path_2_0) -> None:
            if isinstance(x, uavcan.file.Path_2_0):
                self._source = x
            else:
                raise ValueError(f'source: expected uavcan.file.Path_2_0 got {type(x).__name__}')

        @property
        def destination(self) -> uavcan.file.Path_2_0:
            """
            uavcan.file.Path.2.0 destination
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._destination

        @destination.setter
        def destination(self, x: uavcan.file.Path_2_0) -> None:
            if isinstance(x, uavcan.file.Path_2_0):
                self._destination = x
            else:
                raise ValueError(f'destination: expected uavcan.file.Path_2_0 got {type(x).__name__}')

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: Modify_1_1.Request._SerializerTypeVar_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.add_unaligned_bit(self.preserve_source)
            _ser_.add_unaligned_bit(self.overwrite_destination)
            _ser_.skip_bits(30)
            _ser_.pad_to_alignment(8)
            self.source._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            self.destination._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            assert 48 <= (_ser_.current_bit_length - _base_offset_) <= 4128, \
                'Bad serialization of uavcan.file.Modify.Request.1.1'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: Modify_1_1.Request._DeserializerTypeVar_) -> Modify_1_1.Request:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f0_ holds the value of "preserve_source"
            _f0_ = _des_.fetch_unaligned_bit()
            # Temporary _f1_ holds the value of "overwrite_destination"
            _f1_ = _des_.fetch_unaligned_bit()
            _des_.skip_bits(30)
            # Temporary _f2_ holds the value of "source"
            _des_.pad_to_alignment(8)
            _f2_ = uavcan.file.Path_2_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            # Temporary _f3_ holds the value of "destination"
            _des_.pad_to_alignment(8)
            _f3_ = uavcan.file.Path_2_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = Modify_1_1.Request(
                preserve_source=_f0_,
                overwrite_destination=_f1_,
                source=_f2_,
                destination=_f3_)
            _des_.pad_to_alignment(8)
            assert 48 <= (_des_.consumed_bit_length - _base_offset_) <= 4128, \
                'Bad deserialization of uavcan.file.Modify.Request.1.1'
            assert isinstance(self, Modify_1_1.Request)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'preserve_source=%s' % self.preserve_source,
                'overwrite_destination=%s' % self.overwrite_destination,
                'source=%s' % self.source,
                'destination=%s' % self.destination,
            ])
            return f'uavcan.file.Modify.Request.1.1({_o_0_})'

        _FIXED_PORT_ID_ = 407
        _EXTENT_BYTES_ = 600

        _MODEL_: _pydsdl_.DelimitedType = _dsdl_.CompositeObject._restore_constant_(
            'ABzY8L4#Cb0{_ieU2j}R8D6_-vRNlh8aHWaMLHOWY{@xms#Ynz!cA+4HtPn*iGuhz%$_s5GxGWBnK`yMQbjBA(MU%kQV%x>5En>D'
            'hzh|k=uhDX@B<Jx@Vql;*JsyudsT@<k&kEIc|V``nRoKxncpnG(6WEZSF>@b!^rcs$Q6&&V?Kz4=Lcz=rCJ$Ll^5R;k&5vd?v682'
            'eNwG`RDDpbmS=sHBqFb5tGsyM<V9eLT+E6*>nA*hikAz%AMnH*D(LQ~p&E|89r1o4w5iIrzb|sF(u6dfdsu&eQuP*k3%{&Bs>&sw'
            '8<VR+VT7)J47I2DJe8`-XSbAy!XrmIe#i~?4S9Fk@hqn()jlMa-cHj<@MJccC4ZodABkjSB)o&tfNSH&X(%fBmGauXi2^$2-Ns&@'
            'wh&3{7u8NxzTj)alaS|OQ_+)RAUoxyEEjNRU-&vL@&G=Z@xwHz%5T4uvLrPu7je2Tn2~}x36DL{B4j3IL7I)3O0*F?Wa*GWP$eU;'
            'g5s;rb@`HfrT)6!Tad5Hugh;ZyH}w!KgdyCKSVWD!i}xOjdJ78&{}IOGjXW2(d!dulwkugOmiU-mbJHBUbx4@5awqKAYUq9J~`|A'
            'sS1IChxpOVHvGJ<$-x$Uk+)_-Iahym%F9h$-Q&onyda<JE%sUj9Qi!Ja&)eI<rLWDIUiT$iw`+gv2xeeWs_EC>wnP~k%&cN9F9=('
            '<p+sYqeO&v5+g<;pOHrhZI|kgi$QrFV99u(%(&|Px4cqU-yc$%YJGQR&V8-7K&Wx2&-jB#SLKaK1V{KmFlPSus=V;FGA@q$__g+^'
            'e8x|+s${1r(c^fKMhc)??xVoS4;B5rOyu08d9(2YsZd<`gYxR_Gzqv7$%&#AG)d+np}vLurR^e$cs@QRdDh?OQ6Z{dSF64DQ&j$k'
            'buxZ}Q!noDWF&S(CX71Gr9D69he$0B3>|{hM3>E9tP=DgeL$@L?{nojYTP2?5bZ6HXzQs)ON+ydCzgS>i-CY61*);%Z?)w?Lr^}('
            'E@=h`&tw*O4yDUw8!4eaHx2O5mDWK5N6+7X_ul5t=I(nt_PkW(S0}}RA7BJ>WQLjAJ2ulinl_3m&ku7R&?*qp-m1T`UoO6Wt0D|p'
            'M}PK3&UE^lkNmsuZhv?8d$l+6SG5UQme0KQ#v4;*qFiopvOgF*o+qUr$nVIX%MX!|rv(@@6bOS55>`*j=K%LZ5&Bu08y{`IT|Qsa'
            'olhO?+eDU0SEjM(Y88Q+x{r$iKkRCrrK9dp<?#W}Mc06yb=O#C8u^X{x>+#*c>P?AP*oT_qI})0MaW8*c*1+l+wj~X(C$mFVLYeS'
            'CK6WQ-zW0MqyH?lTH7!}G)t7;*<_@F=`q$~M(#3^1R(hk{L3EfZoTQTU2tZaL}La(tB`2{#ROKSwB=LqC1Suv#I<BA-4#-+5eF%@'
            'YpYmX1IG?=6%xPGsXWCU5Gv#ns>W=U)}l0Uv<%KakSdU5A{0XfLSlolyDR8U$=AHjjzCfXA*UB!3(Z!AH}cqu=fNDJxA)BCJQ&^n'
            'j#dNqC<UuLGBPbj5{h9c=3^E}YD|jVMpn=S09)vQedLl5$yP~;NDy@(!nL<LjNN3LE_GR|5-K3Y$X#ZUCe9+2?9rObHB3g%6#<tH'
            '6b|yEta_&_Jjxcd+Lejoqn%p&iJB|9BOka1cr-&tm+C9-7!6_fM;K=^w_Wwx#Vma^S>tSd&mX(p-oob6>|IO}LjIQazbUWDb-614'
            'D&LfUlb;sycTeQ+x8)y7^Cfr9>l?QwliRoOx9%PJ$B)q`|2o@h^?9N)s{%=+`2ZiyW&s}ZvBx&EEK)*G%8OZIQVd1E5bCH(nxT32'
            '&~fz;QY*Ad2<46H;!qT^#I-32kop6KwE<ii4k0DNbr?*&PG@)85|h%ShQMZQm87<y7PhEstO6`Tf04k^$r3Jba)9uti;S4eHd}|h'
            'ERs;<(U=g}2pwiO?NK|Z(IzrS&I#)rdJ<$I;w(zXu5asL6Yz?z2P~{{!jx^0p@I7}vthy7wZ@Q9+;O-l9=j<K<GWS^6_LXr2wV#S'
            '4kV$yLABS}f+}&yVOOlrTS2Svd{iqQ=4ssEl6CtXU?(xKIFbf=Gj<NeaU(jMA!sB9*Ss4|VI7kqV5p5foLD<f4fb8tL(Epjj+8|P'
            'N~8A&7U=q8cY%ZhrNuf_YXk`2m^P@C7>%d7oa7I2OmedhRs_|tX^K!c>xC7-(1MaO-Z}DiLa5Fo>nY8-cF0zS4&&l&4#bx2HDH!y'
            'dCCJx5SHnIpfq)eAR`-Sotm1eLvUtfS!!z7wgOWQ>j4@BsU31GhK{Z@iYe$U_Tvt0WrVYJyacd<AabSmCV)mV4Bvz6;6jjI5Tr$7'
            'fWbZ@>E1@Z!I<|m5ulSBuL(z>b=WgAKWz}p)}2_3hpBK)V4nmI6Vvu_?MDI7K}?_ykh3owHjMaa`h3Ab)QX~UId51z{s6Ilp7?N?'
            'wx;-epK8^HP;Ol8DhZ+@v{5BDtsSbu3_Ib-cuFk}?YI_+sMt!p2T^u2TUjHTNsB<v<#|4*Hi#INI#vb1!i*bUx<wcHswLwo`E`jb'
            '*VZjMV`67jj|4`=V(My<h2-kI%J~{1_13g&mbo~;{H!sy1w?2&iQrKMK7vuqEd+<p!R(0{nN9Ao)K4?K1w2d}?}VhB?A0lg!JnsJ'
            'M{7TIVgWsW{{JMKFQo-~b^WEcU}u&ExsQL7k>!}2dlxN2Xz@sBa&~UHdG`ABEQ1hho^`X*-148C@G2%K);=yhzg~-P(DLQu;&bb6'
            '5R*&tg1qehtKb?2s|^fRpMJrxCI4>c9{CSEBE=ygzUqH=rMw0va{p77`x3;DAM+1;h6mU8-Gl2y2sI1VOdOki5-0W7`~63YCq8&('
            'v5jCqyJ8=$?dGG^rieEGdBP?g_5KHmwIy606aWA'
        )
        assert isinstance(_MODEL_, _pydsdl_.DelimitedType)

    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Response(_dsdl_.CompositeObject):
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        def __init__(self,
                     error: _ty_.Optional[uavcan.file.Error_1_0] = None) -> None:
            """
            uavcan.file.Modify.Response.1.1
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param error: uavcan.file.Error.1.0 error
            """
            self._error: uavcan.file.Error_1_0

            if error is None:
                self.error = uavcan.file.Error_1_0()
            elif isinstance(error, uavcan.file.Error_1_0):
                self.error = error
            else:
                raise ValueError(f'error: expected uavcan.file.Error_1_0 '
                                 f'got {type(error).__name__}')

        @property
        def error(self) -> uavcan.file.Error_1_0:
            """
            uavcan.file.Error.1.0 error
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._error

        @error.setter
        def error(self, x: uavcan.file.Error_1_0) -> None:
            if isinstance(x, uavcan.file.Error_1_0):
                self._error = x
            else:
                raise ValueError(f'error: expected uavcan.file.Error_1_0 got {type(x).__name__}')

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: Modify_1_1.Response._SerializerTypeVar_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.pad_to_alignment(8)
            self.error._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            assert 16 <= (_ser_.current_bit_length - _base_offset_) <= 16, \
                'Bad serialization of uavcan.file.Modify.Response.1.1'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: Modify_1_1.Response._DeserializerTypeVar_) -> Modify_1_1.Response:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f4_ holds the value of "error"
            _des_.pad_to_alignment(8)
            _f4_ = uavcan.file.Error_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = Modify_1_1.Response(
                error=_f4_)
            _des_.pad_to_alignment(8)
            assert 16 <= (_des_.consumed_bit_length - _base_offset_) <= 16, \
                'Bad deserialization of uavcan.file.Modify.Response.1.1'
            assert isinstance(self, Modify_1_1.Response)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'error=%s' % self.error,
            ])
            return f'uavcan.file.Modify.Response.1.1({_o_0_})'

        _FIXED_PORT_ID_ = 407
        _EXTENT_BYTES_ = 48

        _MODEL_: _pydsdl_.DelimitedType = _dsdl_.CompositeObject._restore_constant_(
            'ABzY8L4#Cb0{^vE-D?|15Vz8}k)1eoNaF@d$(2Hy(B$NgCN6ymt}F*3TXJPPp_H)f=~kL0r`uz9&#?l9<RK-Y3khWN(5HS;3WbK2'
            '(uY1YDYW$O>a0$d<wU0Fp%Ri-`|+FK%>HKP?i_w{adNEtGG~%bsKUr6ib+l*ewzjn^GQRr6QQ_f)=Vw4h_`VVZgvu8AKUYH?PvC!'
            'd6n=uX41l#ncC1YZRk|8{aeOKOxp<YW=gjkH1?YuvDZY%n;pN-R3c)9t9i1`q~aoWP)Dxy#*b|!SIK>D?^<(|P^~2oQq7dTVGrWm'
            '-(=1B3TIKcM`V(OR8yiIJ2;X}!lXGd$g3o!KyQx0aWp*U48w^Vxb0ML`{{%1Cenq6Z=>ClTe0G;n1$t7vlf&4!*P@ZT$6~!Ee*CZ'
            'jjS3}Y0?%UvU=OhtnUK3V}23W*4z?CV(gx+Tk|?mn#LiO;ULicG(cCzw`r6jgTo{g4Qs|M&Ym>+B8C{x=spQJ4e#_uXDie2F1!a9'
            'GK535iUl7Ec(FaKw|4zyJBeh<UCTai^L46mjz+uauxKWlk~Z9|!u6Hj7}rg1);cFtfX3$ji_6qjwNkBJuaZ)|UaNO$!6JOvGXhu4'
            '_~lEN7A}o|I8m)_l9k$4b$JL{Zhi!$e7SZYt=uS-rk0Au(#8f^E>+8=VYCj-EsOwntc+0Qda1ZstAB!M=1SRT{sj-yg0&M&Ur#a`'
            '7H&yQWlzK&^%APV(?GSC2p((YX@RpLm#m?M?ARCB%+HPDT)BE}X|=pe@O!J|=q#4}7SeIK=DD)qaplEAdnh&@dQBmb3iC9TEvB<w'
            's-uwlOEgBgtm7-?)e_mP)yV2n{c34gkmnai336>~lhjto#`;omINArJ1j&hVV{3iAR^J@1fQ3CcW=;;&K@xPb;_6^8!Wp;>^Kcc4'
            '@G-2xr*It@P!MnvZo@X*gS+q$zJM>`Ns3h{WSGtkijuGo%yH7>J1iuLkecw&R?P{bL@FDMxJw{TB-V%mh&C%I9$~F6+)e|!Q&2P!'
            'twNK__AM$|K?@P70#egFZjr3A7LqiGc!NmRN+V}*uMVq1Z;P{1=oVjp&Y$(OSuCXls6y+K#o86zZQfw^0qUqwMH8rI2jWj+8%ZPW'
            'i6$y{Ks266nCw<3-_^t*!g6$Wx18-2PXyL4{<r4XM_jLV|8KB<<utDlkyzs$1fn|aK%lS4e2ujQHV0?D)}?`cWuR>~fMaihr{=YF'
            '8ip9Gmo~w#Znc_55tW@6S7Gs?Jy)52qyp@mNrqr6`7}U3+dOuS1qXD;4UV|xf|18#mApGP_DEsd!Fo>PZkMg5L078SKv>rQP=k28'
            '@D&>R8)g)I^8miB!gogh&kA^dc5(O7U=H6s8Nm1VyIJuA{Fpia6a3td(Qp0HFYt$p06fF|dXAqzapzxs-{2^A^=a45VdiDe;Gdom'
            'j27F`C^x%yCue3bO|s`6NdOBc{$!62d%5gkE}yUDT!Lm9J(T5Ba|*k#OSgEaB+Nvn2o$<?&l|rF+_HzaybtP)I*nVb&Jw2iLHfFx'
            '-To{d7{tmy>PF*P6`rGiE<}AvbYsO-Z}ICPi|(lZFFM%2d^idK00'
        )
        assert isinstance(_MODEL_, _pydsdl_.DelimitedType)

    def __repr__(self) -> str:
        return 'uavcan.file.Modify.1.1()'


    _FIXED_PORT_ID_ = 407
    _MODEL_: _pydsdl_.ServiceType = _dsdl_.CompositeObject._restore_constant_(
        'ABzY8L4#Cb0{_if-ESOM72kF9;cSw|N!qk()NqxeVpC@~9}Ou`RJqQ&SR3zJYdcMm%JlBc-MwSa&J6Qmds9$bXi+VVpr}(-Jn<zS'
        'kdP1+f(HcZGk*nt0MCGUf#11zc6WBYPUMG3B+B*p&b{aR{LVR(caMDXw~Gb!C;5WkvqH-$8=(kn?%4Nv%MoS6^t!$m+L1_;lWQW_'
        'woS3#^F{h`I`>}sy>vD?Z3N;wu?Qn0qJ3FNPTv-e-NhAa^yD$ac3lyuBWqC*n^7E$5j$$QybD&(#C+T2Zn<qkh854U+r4sAvq_U_'
        'V_O8F?YTth_}%RJ<Fr<+6@Qq%2SE)UMS<OlBN3)=g6sjh4Nj%W(Is0r)=-d=VeyD-l@7Y@2c)IFO{RI(^Blq5QEg5dEjuzC;dUYk'
        '=|I%vuv6EwV5dvTh1EU*x>jDqyA^r`O$r~R%`|z!2qW%VJh1YF_TrX2lbrDb0dcm45qfc8LWU!T<(X;n)!QC(y@&;(>un1bNx}4q'
        'GTR7+#UhWHp5J4(8%Ba#%xg0owB1fQ1>tA3=<->~vZv>2MfpWJE9W%dCqXpW3E*ABf;ViJN6Hf~Bv+T)id$}*iCsI4!uh^1cEnnu'
        '?FB+YEyeHY<kTv+EU+JSfP6N2X0p|{J=;PI+{KT)wIS!FkOVA17WwjsDyOoiGs#Rou2wm$DbLFDwW(Tx0!Lmzung}d7Y_)VAmF_;'
        'dFn35E_UuHzbw%1cxnhobcNebjZ4Y-4L7tquCSKfNOVLnavmy7Yg2z1w~`YG7N47T)JtpsP0nTBH`-*Tj9z`@-t)C0MUB3F#ArET'
        'nmpgvU>HA8CK~@eO-{XPM_P|H{F+IWJZ5-)ny`b2guQOdb8H0N`4u=A_93S?d=c=-3-XC?N*m6V-%g%f^jwoi!ku`Ol%|t`a4Bzb'
        '{!Be~93J%cojhi2b0-$*kJH)O^hfagTbVIT+<L0X-HvDqUqtpnB5fI6z6;ah!j_I8w@*viuWP%=Lwdlmm46>kj#J{s4#&}2k&YHV'
        '3X#%c*XOQ6pnBXA5ad3*@%Bn#T7EZoP`-n=L>WPN#8-i*qx9)y8YZDUk8;63=2{&RxO!r(y1LL@SZ_4ded#98_MHPcfCwbW2r^AK'
        'm8H2eNEA0Y(GIvtyNHnKrR*8+lc^VPr4&O-(DxrEOlf7|o^hvIe{KDnnKUxVSje9wk6picb3jZa=X02Bw0auniRkxbRqn|T<WJ=%'
        'F%Z)dP=g}GO81h-5$?OfGJG$H45WQMIh(<qK^bf)LndxTdR<WoZ3oa)xgWRqZYAWt*QvDapu58ZQHcQ0VI@+?)G;&&RQ$Mw;6?fB'
        'z^h<5g#56Q9U(3i!in<r^3}55M6?@{hhQF1YKOWgrhD>*d;cjG3Ux3cm?cOrEij_M!XEazjKpQaH39M#@Rx0@FTGS|>%dIUb$Sc|'
        'ZCfl9AWXr^>`>t;@De)Ug~LP1E>|uS*${dVVYN4l%{gFf8>Nu&oo)plYJg?KmLSz*v$W@UriNu;{*JUwNh~bUwgE`2)zh_tYDzFy'
        'E;R*=f)LVlA+-qEtSEQN>~gsbcF<ncnf`qsy80cdhS(z$%yK7^Ufhu&3`SkvW2U6UB;A!}F?9gog$&q+Eh!?|ED;edv^Iq`_q7sZ'
        'SJ;9!o$uK$IgoVZ+OjYcXO8V|(Vn(7SUOr10g-lWT;xNmmJcR4v=*qUoj&2=n~eHI%Bg%^eoH67n<H>^CM$9KU<hwH+8JNJPHWTg'
        'D178m<5*Vb_f@x7@bctnEv6Gf{*2y#SzeUa<Q4gQ`3?C8`B^M~u_u37m%mD)N1Qb;UcJ@t+^*qomOJv-A0kiwajZ~S;jZl~5-=k5'
        '2YARQ3*sT@mDz&tJGKb>?nN)rcZN;BP}Gr^LWbnoLdIoHNJdZ*p(xLJ7ndA|xjIeh0FmFZvDbnq?KVycYaR@}a;daFNQu7d;X}k`'
        'R}t})Lsi(quU*^3Cg{g51nqC3fRg|ek74W+lBr}Xk(9A(iNNVm1m;u++XZ!1HEQ${mLuVW5)L^Dun=9}@p?LMGi6=iN|-fR*y9va'
        'DnZ&2#HXGO8;Y-D28*J`p-|k{T_W22&~Did2@HThSr8DwwNwQS%cUid61yCH#r!xIqzVr@8R2%|b#quUubxf3aU*c-$Ov|eR3D1#'
        'ktlHnrC}J9dEJ_VJ32*#VHl~)uHvJ~;Jx;`h2APsEoJNj(r8Y>29-Z{2a&L2hhiS2LnsK@SQx=mqSG7LvTr}=(YMV!P!Uka1}1{v'
        'loaX!nijZ}@zPM*KA>uel%&+>swUfx=rRg#z9Cj<A0o_rKk&FIDTJlBBgjl80!T+GnwchpY73a@D3ls7R;j>j9qT3%1g33sY+4$w'
        'LO4^<UA*s>z{{sNo5v)89Vijl;Z{GOVT_1xL3CgtK+iP2*o_c_E6}8}2zvuD*L-0jlXKIA2GC6Hk)EGk5Xxqmm>st~p_4$31Ue=L'
        '>7&z+6rhXfKy^TlPB^UX@Xla-!A1Crw9z)taoj(EC^;t%E`!t*50)t-9Z{4=T6fzuo!C-ZxmOe)^1=u@;Yx1+Ejrp!773`><?a@a'
        'vMc`OIf5B4HszR|$8D;V=)zO`ynwKXdO0cerq+B`f$;$RDg>5u^C~*KgwA%>5=3@a3`C86i$onKIqpN4Ua{86GN$LFw;E$hh=@>i'
        'A{eTGM_`J+g~H(hF+0&BqsHB5`hkU)5D$aIn_!g5QXSA4{C4m(+!Okkr19tf?__>bD$>;TyIN88EJgV?{`FgyedqLCG=)P`!$bYM'
        'W83+=mj-tk4zc`Q-7Af4|3)94MF+*E_n#i$&yHWE?V0_@$M$t2CTHYX`K10-a1o8wO*B@YJ*3%^e^h;s{1b*qu}cx3u6%wjxd0^6'
        'U&;bQ0{HP`e6VL2xbEtKYhnoH9hNs78y$(m>}h-D-qgf_SKhBf+0W0Zp>;Yxv?>$P%fC-}sb=NJ(F~&CxS`0zKb~<b<-WXJocKjg'
        'UrYNIo%qe>Z2o372+%*Pk2b}LA8m5Bo5>HWNA>4|tb2a{VaKN$wFxtA@#=%e;}H_4H|n)|<Mp~xZ8it<dY;<RuiU(O<K`hKo~Sq0'
        'jits${q`i;t{;NZ^m5}sv5JQg>GZ<lVs&lJxLvI;S0{-zb?wF>$emgSspV#MalO%egFY(0vRoErRGNr-AF2b?3071Y$Iy(vQ(>^`'
        'Y1A+mj*W8Zm^9a~9Y(q3`rU;)%eM`z8&wkLRuu#Aysmfj1*6|S=+T{8$y~k5we<VMIE=F%Us}FXHP#yq<IY0!wdy1zU%z!2BR4kI'
        'jmDC(wz{x5nc7Q-F%kvk+Q#Z?qq#mg0&Wb+X`I}=Tr3neFVXTPTArij8ZB37`8qAPXsOb&Kud#`8ZB?ovO$YQ%UiT~v~1DRqa~*0'
        '2eiC{WjOMBk9g!&;DlNC>TufKL(o)4J_!NzVke^BoR7@AgU0jW-9jF|XLJ?T1#1S?aAq<}69ftko(cjvd1CWZGSUSs;drTf`5{7V'
        '{s_1BGtTkbe1cA7$gY??oaaAR-Yv?1J;M5jntpKkd$;(2^7r%NfrdS|zqX~rCSh2brg8Ro_P=HOzT<4pkhuWO!JsPUzT<5Eg{<~x'
        'T0W=cuY<r|`Lw7lxJL~}+$#SMvsbXS)f)f+'
    )
    assert isinstance(_MODEL_, _pydsdl_.ServiceType)
