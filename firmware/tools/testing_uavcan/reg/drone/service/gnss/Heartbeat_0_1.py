# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /tmp/yakut-dsdl-zmn42v0l/public_regulated_data_types-master/reg/drone/service/gnss/Heartbeat.0.1.uavcan
#
# Generated at:  2021-09-29 15:15:52.761394 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     reg.drone.service.gnss.Heartbeat
# Version:       0.1
#
# pylint: skip-file

from __future__ import annotations
import numpy as _np_
import typing as _ty_
import pydsdl as _pydsdl_
import pyuavcan.dsdl as _dsdl_
import reg.drone.service.common
import reg.drone.service.gnss


# noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class Heartbeat_0_1(_dsdl_.CompositeObject):
    """
    Generated property settings use relaxed type signatures, accepting a large variety of
    possible representations of the value, which are automatically converted to a well-defined
    internal representation. When accessing a property, this strict well-defined internal
    representation is always returned. The implicit strictification enables more precise static
    type analysis.

    The value returned by the __repr__() method may be invariant to some of the field values,
    and its format is not guaranteed to be stable. Therefore, the returned string representation
    can be used only for displaying purposes; any kind of automation build on top of that will
    be fragile and prone to mismaintenance.
    """
    def __init__(self,
                 heartbeat:              _ty_.Optional[reg.drone.service.common.Heartbeat_0_1] = None,
                 sources:                _ty_.Optional[reg.drone.service.gnss.Sources_0_1] = None,
                 dop:                    _ty_.Optional[reg.drone.service.gnss.DilutionOfPrecision_0_1] = None,
                 num_visible_satellites: _ty_.Optional[_ty_.Union[int, _np_.uint8]] = None,
                 num_used_satellites:    _ty_.Optional[_ty_.Union[int, _np_.uint8]] = None,
                 fix:                    _ty_.Optional[bool] = None,
                 rtk_fix:                _ty_.Optional[bool] = None) -> None:
        """
        reg.drone.service.gnss.Heartbeat.0.1
        Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
        :param heartbeat:              reg.drone.service.common.Heartbeat.0.1 heartbeat
        :param sources:                reg.drone.service.gnss.Sources.0.1 sources
        :param dop:                    reg.drone.service.gnss.DilutionOfPrecision.0.1 dop
        :param num_visible_satellites: saturated uint8 num_visible_satellites
        :param num_used_satellites:    saturated uint8 num_used_satellites
        :param fix:                    saturated bool fix
        :param rtk_fix:                saturated bool rtk_fix
        """
        self._heartbeat:              reg.drone.service.common.Heartbeat_0_1
        self._sources:                reg.drone.service.gnss.Sources_0_1
        self._dop:                    reg.drone.service.gnss.DilutionOfPrecision_0_1
        self._num_visible_satellites: int
        self._num_used_satellites:    int
        self._fix:                    bool
        self._rtk_fix:                bool

        if heartbeat is None:
            self.heartbeat = reg.drone.service.common.Heartbeat_0_1()
        elif isinstance(heartbeat, reg.drone.service.common.Heartbeat_0_1):
            self.heartbeat = heartbeat
        else:
            raise ValueError(f'heartbeat: expected reg.drone.service.common.Heartbeat_0_1 '
                             f'got {type(heartbeat).__name__}')

        if sources is None:
            self.sources = reg.drone.service.gnss.Sources_0_1()
        elif isinstance(sources, reg.drone.service.gnss.Sources_0_1):
            self.sources = sources
        else:
            raise ValueError(f'sources: expected reg.drone.service.gnss.Sources_0_1 '
                             f'got {type(sources).__name__}')

        if dop is None:
            self.dop = reg.drone.service.gnss.DilutionOfPrecision_0_1()
        elif isinstance(dop, reg.drone.service.gnss.DilutionOfPrecision_0_1):
            self.dop = dop
        else:
            raise ValueError(f'dop: expected reg.drone.service.gnss.DilutionOfPrecision_0_1 '
                             f'got {type(dop).__name__}')

        self.num_visible_satellites = num_visible_satellites if num_visible_satellites is not None else 0

        self.num_used_satellites = num_used_satellites if num_used_satellites is not None else 0

        self.fix = fix if fix is not None else False

        self.rtk_fix = rtk_fix if rtk_fix is not None else False

    @property
    def heartbeat(self) -> reg.drone.service.common.Heartbeat_0_1:
        """
        reg.drone.service.common.Heartbeat.0.1 heartbeat
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._heartbeat

    @heartbeat.setter
    def heartbeat(self, x: reg.drone.service.common.Heartbeat_0_1) -> None:
        if isinstance(x, reg.drone.service.common.Heartbeat_0_1):
            self._heartbeat = x
        else:
            raise ValueError(f'heartbeat: expected reg.drone.service.common.Heartbeat_0_1 got {type(x).__name__}')

    @property
    def sources(self) -> reg.drone.service.gnss.Sources_0_1:
        """
        reg.drone.service.gnss.Sources.0.1 sources
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._sources

    @sources.setter
    def sources(self, x: reg.drone.service.gnss.Sources_0_1) -> None:
        if isinstance(x, reg.drone.service.gnss.Sources_0_1):
            self._sources = x
        else:
            raise ValueError(f'sources: expected reg.drone.service.gnss.Sources_0_1 got {type(x).__name__}')

    @property
    def dop(self) -> reg.drone.service.gnss.DilutionOfPrecision_0_1:
        """
        reg.drone.service.gnss.DilutionOfPrecision.0.1 dop
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._dop

    @dop.setter
    def dop(self, x: reg.drone.service.gnss.DilutionOfPrecision_0_1) -> None:
        if isinstance(x, reg.drone.service.gnss.DilutionOfPrecision_0_1):
            self._dop = x
        else:
            raise ValueError(f'dop: expected reg.drone.service.gnss.DilutionOfPrecision_0_1 got {type(x).__name__}')

    @property
    def num_visible_satellites(self) -> int:
        """
        saturated uint8 num_visible_satellites
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._num_visible_satellites

    @num_visible_satellites.setter
    def num_visible_satellites(self, x: _ty_.Union[int, _np_.uint8]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 255:
            self._num_visible_satellites = x
        else:
            raise ValueError(f'num_visible_satellites: value {x} is not in [0, 255]')

    @property
    def num_used_satellites(self) -> int:
        """
        saturated uint8 num_used_satellites
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._num_used_satellites

    @num_used_satellites.setter
    def num_used_satellites(self, x: _ty_.Union[int, _np_.uint8]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 255:
            self._num_used_satellites = x
        else:
            raise ValueError(f'num_used_satellites: value {x} is not in [0, 255]')

    @property
    def fix(self) -> bool:
        """
        saturated bool fix
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._fix

    @fix.setter
    def fix(self, x: bool) -> None:
        self._fix = bool(x)  # Cast to bool implements saturation

    @property
    def rtk_fix(self) -> bool:
        """
        saturated bool rtk_fix
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._rtk_fix

    @rtk_fix.setter
    def rtk_fix(self, x: bool) -> None:
        self._rtk_fix = bool(x)  # Cast to bool implements saturation

    # noinspection PyProtectedMember
    def _serialize_(self, _ser_: Heartbeat_0_1._SerializerTypeVar_) -> None:
        assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
        _base_offset_ = _ser_.current_bit_length
        _ser_.pad_to_alignment(8)
        self.heartbeat._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.sources._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.dop._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.add_aligned_u8(max(min(self.num_visible_satellites, 255), 0))
        _ser_.add_aligned_u8(max(min(self.num_used_satellites, 255), 0))
        _ser_.add_unaligned_bit(self.fix)
        _ser_.add_unaligned_bit(self.rtk_fix)
        _ser_.pad_to_alignment(8)
        assert 200 <= (_ser_.current_bit_length - _base_offset_) <= 200, \
            'Bad serialization of reg.drone.service.gnss.Heartbeat.0.1'

    # noinspection PyProtectedMember
    @staticmethod
    def _deserialize_(_des_: Heartbeat_0_1._DeserializerTypeVar_) -> Heartbeat_0_1:
        assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
        _base_offset_ = _des_.consumed_bit_length
        # Temporary _f0_ holds the value of "heartbeat"
        _des_.pad_to_alignment(8)
        _f0_ = reg.drone.service.common.Heartbeat_0_1._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f1_ holds the value of "sources"
        _des_.pad_to_alignment(8)
        _f1_ = reg.drone.service.gnss.Sources_0_1._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f2_ holds the value of "dop"
        _des_.pad_to_alignment(8)
        _f2_ = reg.drone.service.gnss.DilutionOfPrecision_0_1._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f3_ holds the value of "num_visible_satellites"
        _f3_ = _des_.fetch_aligned_u8()
        # Temporary _f4_ holds the value of "num_used_satellites"
        _f4_ = _des_.fetch_aligned_u8()
        # Temporary _f5_ holds the value of "fix"
        _f5_ = _des_.fetch_unaligned_bit()
        # Temporary _f6_ holds the value of "rtk_fix"
        _f6_ = _des_.fetch_unaligned_bit()
        self = Heartbeat_0_1(
            heartbeat=_f0_,
            sources=_f1_,
            dop=_f2_,
            num_visible_satellites=_f3_,
            num_used_satellites=_f4_,
            fix=_f5_,
            rtk_fix=_f6_)
        _des_.pad_to_alignment(8)
        assert 200 <= (_des_.consumed_bit_length - _base_offset_) <= 200, \
            'Bad deserialization of reg.drone.service.gnss.Heartbeat.0.1'
        assert isinstance(self, Heartbeat_0_1)
        return self

    def __repr__(self) -> str:
        _o_0_ = ', '.join([
            'heartbeat=%s' % self.heartbeat,
            'sources=%s' % self.sources,
            'dop=%s' % self.dop,
            'num_visible_satellites=%s' % self.num_visible_satellites,
            'num_used_satellites=%s' % self.num_used_satellites,
            'fix=%s' % self.fix,
            'rtk_fix=%s' % self.rtk_fix,
        ])
        return f'reg.drone.service.gnss.Heartbeat.0.1({_o_0_})'

    _EXTENT_BYTES_ = 124

    _MODEL_: _pydsdl_.DelimitedType = _dsdl_.CompositeObject._restore_constant_(
        'ABzY8D1%gC0{`tiYiu0Hd3=i0NtR{HmSnk($97_q(cK<N@nJhj<C8>73{8q9B|lQw=egav+okq)H~YBL32M-!c3}gD+J(<RilAtV'
        'BB+C+Xj-7Cfuca1{;2z-=#L^rilUDoNnsRifix%*^o4%kJofhPcF&|`qdzJFoNu@@^UcgR^L_I@X87|HZ~p%J2>)r{@3oA;u(fi)'
        'e2d!Fby~5RR@U9R=LS~DI_=xeGux^|*0|jASm%w-?3X$}*O_S_C|i!h{Ej)&zHKM;BR!0K)>~z=?9e)(AU>;UhVME|gKip@&a|2n'
        '1lmPL{jkDl*lACf8_W+Z*Fk(!Ps{upo%NCR(O>L*snb4GreWw?l_+FE=XpS$G4i-pr#<<k#cZQHoLt$UAuWeEMsrGhG;{3-2S*3f'
        'ue(lSeCA>Eh#HD{2Xt@VE!&^m6Q*rO4a;FcFbq@Hlsq5lZ#7^_$F4YmRdblJ=7g-q{9bw=Dp#zqY%`}8nw|AAn6OTRuv~WynDA`-'
        '_?AM1&9rk+wt+=J<<XZr+nx4Z<shVvL46~M=+&qKbDL~XJAx5Rlnqz!v`0Gd^;moQoa<nlFdhUD<h0Cb>tklooL?V7<mRHpv-8yI'
        '>Q={Ge)f09Mn*21jM%PID}>Ci6TlQQ;#NuBa;!SFiRU(%Pju)bs(T^q2rUOgw{&XTtvso_K}dqA610Ml)dNC(MuMgl>LxRY<%BK?'
        '0X^@JAPq><WDft<V5X(pj93BjsDBlz!?Z<jkaw$9Ew|If8=5pEhD#h5yYoEP4-=Thpaav5Y=eY8>=t5$gu-wf!oCn$KsV-uIIEq@'
        'rOoqapVM-=Qg_&-PFuhqP!UE?`FErzEI*-jHxeyFtIi0_hh4Ko*MZHLCnhyhb$uwHb<bvbQ4>*C7;zXgU^=0jtGKRc=X%Viq2<(w'
        '>>cOrM}jH=v!N>nMD=`EX9n<dFbku7#<Y-DP9Hh*qES2%ASSE}&=9*MI->!i<ZOTl8y2!O?=T2m59`7R!=~$BB~*u9X@#vEFc9oM'
        '8yE$r?Lr5>B2FEs802B5I`cxYCP0k9L_9EAWEJce766gqnph#9kyQn{#tca6kkA^gJ@lqC;0A*rm%_l1F4SqMeaL%<jvO&*tphSo'
        'a>0FyQ`t2SsDv}?;nV4DirbaiiZ9Hw?SoYxhX$J&%Ab^ZC~uF>b&x}X3NXlH8C>*P#XnPW7a<2dG%7eK=9>z`DF6wK7T+!)Bz(R~'
        'j_V^ob(f!S9avI|I~Vq|>l@71dN!sYae%dCpS^oML3CiE(9$iBQ{74S*uTQSz$W4hcqM~XX=H~IFYmB-Psy%;#FiXy6{o~GwE(*b'
        '_`|YcPk1(TAKERolE}rld`&B08W7)Hm8)QWu06W2A9Am5UMO8yJ&)v`0)h1miV*oNg#m!Rz>amKFzh~HL>MwiBF0BljU2w_L{8Ij'
        'p(08-(TF<0D7r~;XMp?<fTDpmOjPiN>lG4tAPwxs3Q!_~K7FWGWldm1kf8=}53H4tkg$4TlSy$X=YzbN>sji6%plEyB@F134;}=<'
        'j$3C*xr@U>*=ShRDhN;%Ua*>~1BDP7Uv)GC3V@bJL0fTw-}$OV4#;&*9w33y1Ytgln}zkw-+&c$YMg-ud($X%fs$?%z@+8oV+|>C'
        'Vft|7+tAWh)X!t3Cdhx2!0E_xSl?$T)M1H~yfPWJLz5FB3KARsnbP*=+UA9UEp;Z|QmlO}p{bNBEujP9)><+jF`qCWH@D4A^Lg{R'
        '2+nJRf%t%FGo$lr`$)NJU1LTW$5OV8&Sv|La^Ob3&Y-|%WneF})3%CX-7B`})hH~W3@Ti&JBtgAIlJgZ6<~uh$k50}lwEZvDAeJw'
        'XMPdNid;b{%9$30f>Mm-qc*3_YY}be)B$y)Y|;Sw#YHX47M)jt75?^skUV}YRs{<K3q*lD00bw3WRc|MD?=O9vT4P#K^7?T@^zAe'
        'BC!TD@xtRFR6@C|gaXQZlQtM~k_`t9thJLIjOrUO?83Gck_Ff*;O8=_*={A)E(AYlxm8d=TZzpE925GkZF5}$zQcZL!v1UWtq=tf'
        '>L6-n$m_kNfN52zeiaEpb)B;)p3_KzDwQMRTQBq}sC0baD~^fzsGq!DR;!>e<cb1y7;JsPDFZ_g!{gE@01XCcRB6Eh2t9IvVY1|g'
        '7pgA7{SwQ5Y6mV#X~1d-=7Nv7p#zWV>{GcRD6ln*Ll_1?ZJ;dw&O1i=k2+{BN66_y;^#DcxIxY-+WX{2qO8#OGvtG&X#{^V_ryTQ'
        'B>uTU`hEsK<S>09@!S1r^j9AIkW)x+B$1!)AIq>0=_qcH9l01c_VxkD^pOo_U$j&$dzbX|K3WfKhQXirN0+jh<$eirWN)3M_ngbE'
        'p|Zs_TR0pVsNaL6<VO%Pq91GRpl(th%rBpUIC7$T1(*PMh6|v~-3$k{?dp9p4Yc>1l42+W8q~L3JkI2~4V6r**C3JyGpOrcWC#4T'
        '1nmShZWK^(@&>LCYDCX@4LW(KqliWkB+ejlj{EXNQ1SycA4FGBM6S@l0&H+n3RRwqRtFAm9|>Xesc`*!o?N`1&k5C^8!rNZG|kZN'
        '>#<I_u<SeMu?L}`fsP&~ZIm=aL_<TjVuPmsu+sFq7BQTJVgKKq_TjTu_!R$phsEY_d%Wy=oi@or613_S7YGJN?FOs6VDTg6E^#&8'
        '^^?vP9gHxeV+QTpx2S=Z%0MOa8kTNGwhcR{ztlYYT4!c`?De41o`wURW9Y0;M-`YSXrYkB484Y#DfAeC3V}%1N3q?=>+53@jte~N'
        '6Y}p#gyXNTACTXt5RSgSJ}t`+BAkAGJtyHI2@gwnn}kOsyj{Yh65b)<of00C@Gc4OmhiZQCnP*6;XM+blJH&$e@eppB>b3!_e)45'
        'd_cknC45N2k4yLo2_Kg55ea7`oR#pC5}uYYFJVDKO~Rsta}v%=xFF#f2^S??l5knV6$u}e@G%J=m+(^(ep<rMNchtdepbRKB)ll$'
        'vl5yTUX$<@3BMxYTN1u4;ky!kN5c0c{E2`Y)1xwTQe|dT=24Zos4~y0jHxo$ROS_x`HITCr7~};%)2V{9hG@cWqu+vQ9Fk=J?dm&'
        'oXc+&ZY$>62mP)aZ`oXdZ)sk@JB9YFIbdR=3lR(n;q@C`A4&5cW>}um;U+tJe?xWi(#G0m=_zQ?o<m8@UAPWvks$Vz@q@w>g*)>>'
        'd7Y64=<I+wvmb}Vbm{!lYde>=(Ie6RtrF3F&}R8j1eR=_p}F4V)>y<XGEjHHc9W`bcZ|&8N;3DqQS|>ojVhQ5k<XO>4a7aFzF;t+'
        'b(ib4y{o=kPg>t-vqEoDF}DlcFQ%vv3`}@_KQ4iDr7M@$E^Xp`8<&U8g6<|}fv0t!hXBt*gVlVB-U05Bf%-rv?(C4GH<)nv67Gbj'
        '>BHZbM?>1MIQ-A|4nK&v;bEki&1(FS6FYsxO!z1Vd>q3pWYfT5{hRr(=8w%E?T(F(jF|tkdmDh=gP5Ge<Ss}ev-+x8+ceGgb2nr2'
        '3U(|aI~D~yf`vP$Y+Q2}?O6-DD^<W+LEEfL5a|Z69PXdt^CD|i>AZn8k|Y4TEV4t(1G-2B!a~;xcX}EuQL5AorN7MPb4a~ZZ-dXO'
        'wy<4U!cfM)07VcMlAB#>Ex^&e9e`H$q>Db;;Bio2%`o(W$BV^gv#Hs%sp+ooFx%Fc5f$~SUkur`usFY1TsWi6pIKPwYf+_CtGSJ$'
        ';p!3kVxO`qsG=6@%&=&&WHc<$4O``NmaoH7_{Gw>^1>2FRG8O1ql!)_zLAzYrfs@nYxrgqD=*jM+!y;)7W2!fshGd8K5f1Pzc1g?'
        'Oa9;MC6W2PzQg%|DUaIh19Mu)!B=?w;~S-C%Uf5@KDBnPgyOuswYt4_2_3!dkUN{Ck)m87c=ilh8H!uE912V#*;(3-Gp^4?yw9Ty'
        'f{SOnPAl#Q2GnRM4LOpe!2E%E|85<H<v;HFC?cI65&6-$1>*>4(k&=N=0D5eLwrDFdX!*>0UTZ+6bO&W(NNXpLbO}4$I-;49uG!#'
        '9Zt#yjKe?5-<V}uqOS`jqzWx`&Fs1>Gz*8j4(0M;XaRn?<|gdf6n{YM3|5T{!Ym#u;-d%{Dn21org<I@bvob-gMO4djOJu7g}`IF'
        'Rkif^C=e(#l4V*CH0-mbg{!d7lIBwrL6~e09ZQ7FxU24crFN7sL+?K4I_TDRQtjFHL1E7N%)wB8Dz?U;&{wiMFu%76g!wpZKo($)'
        'qfq1MV2v0<M!C}J&2E@KTdV(A#vO(o?w}tU*EeU|ht9e#@VwI#uLp@Vn$*k=)V!c<&!Yr7G{3a6q%AIxjf>Yi$r0`TI?Q@l^99j-'
        'VPQpEp4)%(CDD9-Wm#KX+E4Rb&2}9cs0ony<+%lNnp`Dw+S2j@N0o=afVF?Nu##VXe*btE1m1<kWr=t3%*uy>_YC44zkIf|_omdg'
        'Z045P2VSc~F^VPnK`EZVQIU&2x1!B2?r+r;j%A5r<xy>AU&A<9VV2=W<q9Xp;rXRApj|)q=m$cvAW(>T#Jl%c`>^zR^<L;PPqt5`'
        '-<WB*meFZXKMf$sanSE12#lP$0^K~g&5)7NW<jfq3vj$?5`s#s%&a|*e<Fb628VurhhlRpWQDU7&!tjSLtR-2?HysN&OB2p?c~Yo'
        'h0RL<E|e~mHuL0XKEJcW9jV&vo_npyUe8?c!Rj=!yUdgG7q)iD%-Y84emj}=!>eWJ2OSaZhquv`zKo{yI-Cq>5$PD`3WSA%9inal'
        'xOd;{Vm!I~FX|7#J{~W?BPk28eR;j$Gp?o(5&GQwDvVq82uFF(ngeGmI@mWr%ZkL!5pu<`!o6a;9c-D1+GW>p>n!wJ1Lwk!wnq#&'
        'HbL3auX1k-UmsK_@iU1(^P52)ADDExH%-QDqI%r(`iw_S&itpY*kHUCnqY5M#9by4RKy_+TaF2}9DAPN(K@YxnF$&t+Q~G<7dE8v'
        ';abagKS;yd`2Of?nLVu|@h)2|85mP&f>wkv53U08t1-AUc#O6wZy<QEgGFE(x13PAcYhN#?O(;@>zI5Eli$VUw=wwxOnwiOKf>e>'
        'F?k1*KgQ%wG5Hfr{v4A(!{je9`3p?`8k28h^7okh4JJRp<hz*sJ0?HG<UcX_F(#v9ko-614r6W_lRGgvg2@R?j$v{iCih_S2qq6<'
        'lE-8QlX*-EV@cbAeYmy*>P1DV7Y*7Cr^dP6fF3c_#+7R%P?A$QNdoS15@G>+Rq{Z_bfj}7as7kTm<x(9<*c9B|2d3vshGd+Hb57x'
        'F|JaB+^X8NCT<RLI|3yUV0A*P+CnxJeQ|}@h1$t+<R~{FnEYF5%@~G@C7~LnfpK>%y|B5nBg1IQ%Gh)hSD$c1c*bFX&uK6W_9wkh'
        'gjUdvns5nmD~dL(nkWxkI}&cHi%4Oi;VaufUJ`sfmn)F2VOO=T@yKTZIx^6{h{I~q0JG6RO6h}R7uPv#oJbNWo*IaF5UGPQo?sa?'
        'XV8PPp>VZvHkP>AN}9C6M5v6=dc~?m=-@(QnZW?y)Zjg;U8YW{lxYkcPh>{j-e6#(c!Aj2;=<_m<#QWo5;0nz?U`SWr2fb|rt%`8'
        '-;HI`7WWvK+&$O7Xv+FcS+~7gS-USQdAIut<g)CjTlH_%zg7QM{r{`_Nnie`@a2zkr_8AN68y$anNj7m>2DxhJY!IMtXq4m>*5jE'
        'vdYu3jYIA6Ztd}YY+2>$*e0O%M7Q=tKenv$bZnDQd$L=5vL9Pkc{;WOQ2Ri)_JMwES>@^2rl9szxAs&&wyg4WY#ENd7+Y3(I<|vQ'
        '`(Vm`QrNP})3N2Cc5cXi%PLRDb_i-88nWNA%G0qOhT4aR?6<7)B(}*I+Z|B*jv;i*Do-EVolyJEA#}?sPser)Y9AXyx2*DXY<EHJ'
        'yN1v$t2~KqJjQkcYM&Uw3t8pqV>=18PY&UQtnzeh_dxA?hOB8;c{;XJQ2W%7HO(qd$96B&zIVu)W|b$gO~lylhuZfKS%s|f^sy1B'
        'O@^#OR(U$M2cY%?LslWHJRRGEQ2W6ltB_Tm#C9acHV3umhJ;Kq%4Nu8Do|06?10H9GXf^(En(_hs&0YVWQjMQLxU#=pR`>X_J>Z6'
        '%3y9gS4NMN6-M~V@pJ9T<)x*$MIJmA&gB~8J~c~6KiR~E^Ov@IoonA6PdJ?v*4^*J*A#5i%CW$aZQUHQoay@3b=L{0&Cy-F$+0!i'
        '@2N{<Pv0D}3A{1I5naB?Q8}*9?O={<^X8CEVccBdS{1mYr|vyyvHN$J{1B6W!sI_N`4J}L6OjBD<_=?S5|g_zIfBW@FgY=i^of1p'
        'Bk+l(Z2dw1*sI+~eIoh|vqVRURTmGk)SVpWXie*?<>B=k&Gl<V{44IF>{iR3>SR{SArgL}FzAa7>#kGft}pH-qq-jXRBt6ZEEJ^k'
        '3;kX4xg%bmHhnj$nerMRUM=VE*PxA$H=FRqj)$-E_-!%n(#MbrUPG!Gu17vYW*mSoV2qHdOhaWto|%1NPFsQo-upCA_005oqB!@Y'
        '@T)cXTqG&D-_N<~xJ@S!*AG~Tj-5@qdCML1VVZwOljdJm%)Y<Dhj%a^-NWHGI_&Vv!1e^xeqso=tnzehTTpvz2)3;9bZjp|?H7k&'
        '%PLRD=0R<5h|-WzE|rFH;Ko6PA?tRQ6V=Q3WE{jtIgSm8AS+78#KRc87^EJs1Vpy!zV(mY)lJHu&3F;W?B1Ya)*z1IAW%5=jo`}A'
        '5eNx`w|1!=h-ZoweAWk}u&wLj<%zfw)-%4n$2qIkHGGcz%Xm=u5fcyGd1N8Qtv-VnjQ9iII^&nxDMq;RL_{6&kT1B7-NGXRedFSP'
        'Eik|5n27irCA>y%)0+5~0nBdUbtnGV*7xy05X1*Y{Ft_3(X^w1zg%S0&~j_)#u$%>;J`5|>Z!v>#D3!EikxQRGFN&$Vx~97nkP@M'
        'UCNUy&zzMp?>ycacM>y6yr%T=A#Nbz=8ZU*L-jDii%~sp`)+?oxbC$0i{-s8;*^Y#;CA}HT19@AMm~S~DIVwtJX(SjPXta(*vNcG'
        'CDvKKtLM||J>c;)iyZ#&>_uq(V*IQVA0Y8NZar^u@xKTRL`?X90T59YeEZ6S8r_R-GpOLXHQZXWVg!kcd^_DJzEspYc!%-$?zd4H'
        'dlRFXzl7S?U*Vr`VD2?ceg%^^G5Ix2zKY4$F!_xhEv@zuXldDZ9^0#zJn?TG@c&TA8}G^RoaBh)gMPVb5`n*4O2tjq-~A%)pn=PM'
        ';#T0N$JDLB_}uM1q<TN^equt^{{|F%BUxV@k$s<&C*yQ{GQJI!-X3h*_c^`oH=)uu2ix|2PIn5t1C`zxY}@xaz3sQ4(zgcb^DcaT'
        'H~uWnZu1aW=tqTReq1mu=hxR_F8!+F%@3c+ci)1)IREW_9dhldGUvUpv+)n(?c-%b{(CCFY=Za)ApXBo_eduoch86;J&o^D_FR%)'
        '1eMn0)z%Z+_=0Jhc`UTD9&26|PbqKoDZseqoW>*OOECCBO(|A(H%2DX^(gIs0r|FEV!cZM00'
    )
    assert isinstance(_MODEL_, _pydsdl_.DelimitedType)
