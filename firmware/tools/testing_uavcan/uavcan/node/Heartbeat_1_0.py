# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /tmp/yakut-dsdl-zmn42v0l/public_regulated_data_types-master/uavcan/node/7509.Heartbeat.1.0.uavcan
#
# Generated at:  2021-09-29 15:15:51.674932 UTC
# Is deprecated: no
# Fixed port ID: 7509
# Full name:     uavcan.node.Heartbeat
# Version:       1.0
#
# pylint: skip-file

from __future__ import annotations
import numpy as _np_
import typing as _ty_
import pydsdl as _pydsdl_
import pyuavcan.dsdl as _dsdl_
import uavcan.node


# noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class Heartbeat_1_0(_dsdl_.FixedPortCompositeObject):
    """
    Generated property settings use relaxed type signatures, accepting a large variety of
    possible representations of the value, which are automatically converted to a well-defined
    internal representation. When accessing a property, this strict well-defined internal
    representation is always returned. The implicit strictification enables more precise static
    type analysis.

    The value returned by the __repr__() method may be invariant to some of the field values,
    and its format is not guaranteed to be stable. Therefore, the returned string representation
    can be used only for displaying purposes; any kind of automation build on top of that will
    be fragile and prone to mismaintenance.
    """
    MAX_PUBLICATION_PERIOD: int = 1
    OFFLINE_TIMEOUT:        int = 3

    def __init__(self,
                 uptime:                      _ty_.Optional[_ty_.Union[int, _np_.uint32]] = None,
                 health:                      _ty_.Optional[uavcan.node.Health_1_0] = None,
                 mode:                        _ty_.Optional[uavcan.node.Mode_1_0] = None,
                 vendor_specific_status_code: _ty_.Optional[_ty_.Union[int, _np_.uint8]] = None) -> None:
        """
        uavcan.node.Heartbeat.1.0
        Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
        :param uptime:                      saturated uint32 uptime
        :param health:                      uavcan.node.Health.1.0 health
        :param mode:                        uavcan.node.Mode.1.0 mode
        :param vendor_specific_status_code: saturated uint8 vendor_specific_status_code
        """
        self._uptime:                      int
        self._health:                      uavcan.node.Health_1_0
        self._mode:                        uavcan.node.Mode_1_0
        self._vendor_specific_status_code: int

        self.uptime = uptime if uptime is not None else 0

        if health is None:
            self.health = uavcan.node.Health_1_0()
        elif isinstance(health, uavcan.node.Health_1_0):
            self.health = health
        else:
            raise ValueError(f'health: expected uavcan.node.Health_1_0 '
                             f'got {type(health).__name__}')

        if mode is None:
            self.mode = uavcan.node.Mode_1_0()
        elif isinstance(mode, uavcan.node.Mode_1_0):
            self.mode = mode
        else:
            raise ValueError(f'mode: expected uavcan.node.Mode_1_0 '
                             f'got {type(mode).__name__}')

        self.vendor_specific_status_code = vendor_specific_status_code if vendor_specific_status_code is not None else 0

    @property
    def uptime(self) -> int:
        """
        saturated uint32 uptime
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._uptime

    @uptime.setter
    def uptime(self, x: _ty_.Union[int, _np_.uint32]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 4294967295:
            self._uptime = x
        else:
            raise ValueError(f'uptime: value {x} is not in [0, 4294967295]')

    @property
    def health(self) -> uavcan.node.Health_1_0:
        """
        uavcan.node.Health.1.0 health
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._health

    @health.setter
    def health(self, x: uavcan.node.Health_1_0) -> None:
        if isinstance(x, uavcan.node.Health_1_0):
            self._health = x
        else:
            raise ValueError(f'health: expected uavcan.node.Health_1_0 got {type(x).__name__}')

    @property
    def mode(self) -> uavcan.node.Mode_1_0:
        """
        uavcan.node.Mode.1.0 mode
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._mode

    @mode.setter
    def mode(self, x: uavcan.node.Mode_1_0) -> None:
        if isinstance(x, uavcan.node.Mode_1_0):
            self._mode = x
        else:
            raise ValueError(f'mode: expected uavcan.node.Mode_1_0 got {type(x).__name__}')

    @property
    def vendor_specific_status_code(self) -> int:
        """
        saturated uint8 vendor_specific_status_code
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._vendor_specific_status_code

    @vendor_specific_status_code.setter
    def vendor_specific_status_code(self, x: _ty_.Union[int, _np_.uint8]) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 255:
            self._vendor_specific_status_code = x
        else:
            raise ValueError(f'vendor_specific_status_code: value {x} is not in [0, 255]')

    # noinspection PyProtectedMember
    def _serialize_(self, _ser_: Heartbeat_1_0._SerializerTypeVar_) -> None:
        assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
        _base_offset_ = _ser_.current_bit_length
        _ser_.add_aligned_u32(max(min(self.uptime, 4294967295), 0))
        _ser_.pad_to_alignment(8)
        self.health._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.mode._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.add_aligned_u8(max(min(self.vendor_specific_status_code, 255), 0))
        _ser_.pad_to_alignment(8)
        assert 56 <= (_ser_.current_bit_length - _base_offset_) <= 56, \
            'Bad serialization of uavcan.node.Heartbeat.1.0'

    # noinspection PyProtectedMember
    @staticmethod
    def _deserialize_(_des_: Heartbeat_1_0._DeserializerTypeVar_) -> Heartbeat_1_0:
        assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
        _base_offset_ = _des_.consumed_bit_length
        # Temporary _f0_ holds the value of "uptime"
        _f0_ = _des_.fetch_aligned_u32()
        # Temporary _f1_ holds the value of "health"
        _des_.pad_to_alignment(8)
        _f1_ = uavcan.node.Health_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f2_ holds the value of "mode"
        _des_.pad_to_alignment(8)
        _f2_ = uavcan.node.Mode_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f3_ holds the value of "vendor_specific_status_code"
        _f3_ = _des_.fetch_aligned_u8()
        self = Heartbeat_1_0(
            uptime=_f0_,
            health=_f1_,
            mode=_f2_,
            vendor_specific_status_code=_f3_)
        _des_.pad_to_alignment(8)
        assert 56 <= (_des_.consumed_bit_length - _base_offset_) <= 56, \
            'Bad deserialization of uavcan.node.Heartbeat.1.0'
        assert isinstance(self, Heartbeat_1_0)
        return self

    def __repr__(self) -> str:
        _o_0_ = ', '.join([
            'uptime=%s' % self.uptime,
            'health=%s' % self.health,
            'mode=%s' % self.mode,
            'vendor_specific_status_code=%s' % self.vendor_specific_status_code,
        ])
        return f'uavcan.node.Heartbeat.1.0({_o_0_})'

    _FIXED_PORT_ID_ = 7509
    _EXTENT_BYTES_ = 12

    _MODEL_: _pydsdl_.DelimitedType = _dsdl_.CompositeObject._restore_constant_(
        'ABzY8CxcXB0{`t<TXP)66_$LHSQ}q377%l33^=PqJ1faHm`j{2vJ^IJtz5DMh7>jQ&h%`LG&8--^z3T6B=~`polI3+#Zbjts`3(k'
        'L5d%c2Yv!Sfud4*Oi{^0a!z;8YF8H=S9nY0@_enno<4o<`smQ7e?B{=ezK=JeK&Cf%T8GA)4+d^wgP6^jtDy<@g>W%2d}cg525L<'
        '^*b#8B%i*Of0&oEBeow!EYA5@_TUW}r;bcxHag|79nlcBIFr(@LnA8^F0)=^G?pz!Wu8siT^1+4h;WmM*G>DAyfNMw`%Qi;&yLzu'
        '%GhtEk|p`uu;V`D4rb-q;U%91?lui2+oh7)5((RHc_+pT`dyfDdOb?~cEsFzBw3rqqZc}Aw|r>_ENV-hHwbL*&_voH+$-mgWmDIS'
        'jc}Q@0AtHI1UDM{IA6`PhwVht$fdD6ywUBn#Y@?dv?G1w)*;&!PJZ+B_}JJl6XuA>eY>>A8PVfJcO}FTDUcYGgo`wANyLDcM8L-j'
        'M9(6)qL|Y2gMh@0I-E$gQ3pEJqY^(NznZ)7Jn6%$Br~P7BO=n{KF-9$V20Tr2=5ar$?VpW`5~~mAE+JiVTqr>889sdQL#!Z&>yRT'
        'goLovWs*4(X2Tv7CWb<qb({_@gu__`vtY9>4N^t|Mmq^<QD?IUY)h;hm~}=!2Y-}Lm{uu!Xorjiz*v5aA1`Eyp91+AT6xyAo@^Z8'
        'Pw{8?vv<@h99F01{CqZsC!NkF7es`QCI?cm|Kf?}%5uF~yN1hW^#gz!MJ$rY950O=2?Fj%ZPJMayg|?><w%5nM1yH72aVE)XHOJj'
        '%C<Vd8PtjqA)Q>MxDgEsn)sFM0WYR%`vk_9OdH0t@!1?@FKGdZFWl<}leMd_*Ke$>zKK`(Q;j$=9O=-2bZ88!tb_@#BU1S9k(fqp'
        'MntTHVEeKxGLi@HNeSE!W_Z*Oz(8mLa0N(3BqZ<w#5R&8T%V+^q@PF@5-%1Z0seR*4v||l>f>p?L_wiJMTus?P7n!xh1U!p_)<1L'
        'cOMs?Sg5V9)mNH$-|pIX-GXim-2#*tpLB>uP$UXM-j1mY^U)$8Uw}`Ek4;TID1$OCTKVYS<j>y^`ES%#oAu_;k^Hwt$xl+xGqihP'
        '0Ry-}Q1GmvKaJ1;5-EzCC@OupbcDAkrtc#0!hl4UogT8$cB`*VK9YKo&+=FJW!~h!;BWGE?(%n1u%Ir3M|UXbdVVK6ZhQU~bM20Z'
        'rR}?UGdpD`B8?pe0|B!;6x29-vns<*wNE!wSwY39ycb3n=ex5(wUf32-?3xXP6OO>+t??S5X>)&tJ*G9(JoZAU9je?Sxa|=!MDNw'
        'z&SDS4BbN4cUXRhpTFsY{jIeUiK;ZjR<5=H9wEEb3tFV^ZCgRZNHBV7ApH(-7gezfY6K!*2EFh4$|M$}5tBU;ZxVBKGCfnmH!#P5'
        '<&kMp*x;CXfi|M77!mqt*dmdYVU^K`qJbGbVA?7zi2z(g@=}QqE@dZqsaoyzdR9PtmLuYb1%bufwCZ?qRkAHvox50_zhKQ>n4jOV'
        '!lTq`i*6PCRT=_wuKBH)#{Fu@T%T5JZr4vl+_x9}*n#JXtF;At{*v0LGG}#M4}F;u$LG=OwE{3*=L^%f?H}P)<j&vo?AWWmyrzD?'
        '!3MTDJ7|keo{{}FN%~<+fWW}BFM|gH|BuJ70N<z-@o;S8a37)w{$6(CI(1#(=&nip*Erft1Grg#=P1AO`@GyZa5rf|kkipS<c-O+'
        '1^0yafhIQS7B(g@egOX9rj2o2H+Hviz~Di>PvemJ{V?LeyNx5Je*$s*Ze!AnKY%!Sw^1^9)Zj6L4;nmf@PxsW22UA$$lz&%4;wsV'
        'aLV8#1|K!}n86<yJZtcAgHITI(%@4DiNU80o-_E2!DkIVXYjni9~vwhoHqC)gFiMnW3Xb-GFUY@YjDosyuk|wFB-gL@OgtT7`$xo'
        'MT0LHeA(bD27hAkiou^6{F%Ym4Bj-z4Q?5{ZSXULpBwzb;Fku!GWfN@Z#6DYj+@4#MWb9aE*Fj0ipI^N!HdRL(YReSJ}VlZ7mY89'
        '#+OCotD^CB(fHOhQV5|T$f1#n{7qj=`96q<xe4RWXJzzlw6Mmb#!;C-KT+m)-|+C{aCoSK^8YM2Jh*3Y$S>{VoJXb~UAexvTEpl<'
        'hlEp2bQu8=%2=S44i(8eoa;T}wUHx^*PHdVdhJ^Mty&SqH0u#K8<pHB+v=l3$AGhqq2$Y&SD^{mnTc=wP}ywBAS9)pN-HoPPdoP;'
        'T#YhdxmItkEjDY-g+(Oo+@jUCW(dTS=qQl78E^rCSAoz$&JZS@`wfOhjyrK<WoZopqD6cC`qkQ+I&z`OdL$8^gzSM;JwFbyfmd%a'
        'e1Slyc+G^cEg_`piB&d}Mi{JrSM<X-k&b`xzw>|be{Pf@WY{=@pELM5g&%^S$KjLm@D7ifTx4&2U*QbO@o+H1--W;>b5K`CWejzM'
        'Y6U5+GK>V^&PtdekE9Xsf}{zGK?E@$=J60}fb+)iw1_a04s(1Dasd+%CcLXz(&rxx9OA7(>*FCeco5tmzk}Y7|F$v7e+U1w|NFZC'
        'd0&_EZ*~~`L%NW1KKsjvx!*0zD3D555{}(ku-DMAd071cId)M}LAr5fn?<leKmy1$1C_Qi3IQ2dL!FHp4e-)f)ht**TOvmFBbX^+'
        'L|++%(=D3#NhwY6*e;EIfzdgt1{z$YL7=1_g+P9XE84bMliFtKs?S+Se_avVg?icAso9R<#Og{%r}{HQ&#V+Pb-H1EAWjDZ3g%U%'
        'dyrhHF0^a3m;=Eu*pN*{*Iu^t<S<=R%e9;K_4QY;)fbd!vB8zqSFR#Sa-=GyO_p{wz$st2kgd=lQ0YC}au_g0xg3@9T6#?}PgkyB'
        'qQg}sp$Abn8?7kqV}tMEhDPpkVr6ORTD`ewuho|qSJv0?67LT#VUo81%qs~&CMeLM3J?P_da6L>Fu$uZdtJmZMJgI%jX=pH7A0s~'
        '%nTLHT9}YWSOGvMD?Bd%vAefFd5%x<zw+`%3T}h{ZR34(AwB%u!q12J$?$V~;8vE`p8&@~zc0t~!ll_4w+pqqT+GehfuY=ZSPqBN'
        'Vy%$A)<F?LWWoJ5uV^hCR3elHYKZ}E`61-Qm`Vb>S`dmTIf8uIDwS%`Ua!5rP-~j1qFTvmml@Yqsb3{jxvqCpANh@C4Q(V$&|_W~'
        '`Z2{;l?SXkZD3BVWfE&$LEkDhw@+||lF%Iom1&R&vKfgUn23a&qmhXEAzA}P+_~u?Ef^3XG#%zhxDzUa%e20lUfdknkBpm}o0}c{'
        'L+9M`BS<!NaTh{h7Dw7Hf@+fvmDqtbT4XpF3y7104%{M!@LEZ4TuS<p!($N@!C{%Hhzwf5*9sUn<`xx+WLi~;U?>qF*=iRo)2OOf'
        'hzz8u6!_MTIv*{jsq(7VFE#Z(l^zzrOvoO>(U2x1&Bp5PcyTNOI<eov8H!(Q^quY<d3-RGo}XC|5&D5>&pbbSK&SaJi|~&N-@V($'
        'A3)jEFB^Y^*7r4kI8GwNaT0+ziC~<>ziC3phb+O~GW3?WdyC1V-5WD-pq@Vq1GB^P$J0H!hl!X3BJ|qJFzNE{vqrnM=jKNtn>wkp'
        's3~3so7EdwDl}66on70=aXuQJjZdMKO+d;BZz}V~JK2=&nm<p)HpmzlTK%V<Azwhi7d+h<M;og>!d?Qj$8+s^nqkR$WECCOD(f)m'
        '?^i?G)D@m%JDwRitT;IaoO}m4SwysnVyWgnzW+zN2XU$OZ<|iBFu@xD00'
    )
    assert isinstance(_MODEL_, _pydsdl_.DelimitedType)
