# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/silver/zubax/sapog/firmware/tools/testing_uavcan/public_regulated_data_types/uavcan/node/port/ID.1.0.uavcan
#
# Generated at:  2021-09-29 15:16:17.844010 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     uavcan.node.port.ID
# Version:       1.0
#
# pylint: skip-file

from __future__ import annotations
import numpy as _np_
import typing as _ty_
import pydsdl as _pydsdl_
import pyuavcan.dsdl as _dsdl_
import uavcan.node.port


# noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class ID_1_0(_dsdl_.CompositeObject):
    """
    Generated property settings use relaxed type signatures, accepting a large variety of
    possible representations of the value, which are automatically converted to a well-defined
    internal representation. When accessing a property, this strict well-defined internal
    representation is always returned. The implicit strictification enables more precise static
    type analysis.

    The value returned by the __repr__() method may be invariant to some of the field values,
    and its format is not guaranteed to be stable. Therefore, the returned string representation
    can be used only for displaying purposes; any kind of automation build on top of that will
    be fragile and prone to mismaintenance.
    """
    def __init__(self, *,
                 subject_id: _ty_.Optional[uavcan.node.port.SubjectID_1_0] = None,
                 service_id: _ty_.Optional[uavcan.node.port.ServiceID_1_0] = None) -> None:
        """
        uavcan.node.port.ID.1.0
        Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
        If no parameters are provided, the first field will be default-initialized and selected.
        If one parameter is provided, it will be used to initialize and select the field under the same name.
        If more than one parameter is provided, a ValueError will be raised.
        :param subject_id: uavcan.node.port.SubjectID.1.0 subject_id
        :param service_id: uavcan.node.port.ServiceID.1.0 service_id
        """
        self._subject_id: _ty_.Optional[uavcan.node.port.SubjectID_1_0] = None
        self._service_id: _ty_.Optional[uavcan.node.port.ServiceID_1_0] = None
        _init_cnt_: int = 0

        if subject_id is not None:
            _init_cnt_ += 1
            self.subject_id = subject_id

        if service_id is not None:
            _init_cnt_ += 1
            self.service_id = service_id

        if _init_cnt_ == 0:
            self.subject_id = uavcan.node.port.SubjectID_1_0()  # Default initialization
        elif _init_cnt_ == 1:
            pass  # A value is already assigned, nothing to do
        else:
            raise ValueError(f'Union cannot hold values of more than one field')

    @property
    def subject_id(self) -> _ty_.Optional[uavcan.node.port.SubjectID_1_0]:
        """
        uavcan.node.port.SubjectID.1.0 subject_id
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._subject_id

    @subject_id.setter
    def subject_id(self, x: uavcan.node.port.SubjectID_1_0) -> None:
        if isinstance(x, uavcan.node.port.SubjectID_1_0):
            self._subject_id = x
        else:
            raise ValueError(f'subject_id: expected uavcan.node.port.SubjectID_1_0 got {type(x).__name__}')
        self._service_id = None

    @property
    def service_id(self) -> _ty_.Optional[uavcan.node.port.ServiceID_1_0]:
        """
        uavcan.node.port.ServiceID.1.0 service_id
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._service_id

    @service_id.setter
    def service_id(self, x: uavcan.node.port.ServiceID_1_0) -> None:
        if isinstance(x, uavcan.node.port.ServiceID_1_0):
            self._service_id = x
        else:
            raise ValueError(f'service_id: expected uavcan.node.port.ServiceID_1_0 got {type(x).__name__}')
        self._subject_id = None

    # noinspection PyProtectedMember
    def _serialize_(self, _ser_: ID_1_0._SerializerTypeVar_) -> None:
        assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
        _base_offset_ = _ser_.current_bit_length
        if self.subject_id is not None:  # Union tag 0
            _ser_.add_aligned_u8(0)
            _ser_.pad_to_alignment(8)
            self.subject_id._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        elif self.service_id is not None:  # Union tag 1
            _ser_.add_aligned_u8(1)
            _ser_.pad_to_alignment(8)
            self.service_id._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        else:
            raise RuntimeError('Malformed union uavcan.node.port.ID.1.0')
        _ser_.pad_to_alignment(8)
        assert 24 <= (_ser_.current_bit_length - _base_offset_) <= 24, \
            'Bad serialization of uavcan.node.port.ID.1.0'

    # noinspection PyProtectedMember
    @staticmethod
    def _deserialize_(_des_: ID_1_0._DeserializerTypeVar_) -> ID_1_0:
        assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
        _base_offset_ = _des_.consumed_bit_length
        _tag0_ = _des_.fetch_aligned_u8()
        if _tag0_ == 0:
            _des_.pad_to_alignment(8)
            _uni0_ = uavcan.node.port.SubjectID_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = ID_1_0(subject_id=_uni0_)
        elif _tag0_ == 1:
            _des_.pad_to_alignment(8)
            _uni1_ = uavcan.node.port.ServiceID_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = ID_1_0(service_id=_uni1_)
        else:
            raise _des_.FormatError(f'uavcan.node.port.ID.1.0: Union tag value {_tag0_} is invalid')
        _des_.pad_to_alignment(8)
        assert 24 <= (_des_.consumed_bit_length - _base_offset_) <= 24, \
            'Bad deserialization of uavcan.node.port.ID.1.0'
        assert isinstance(self, ID_1_0)
        return self

    def __repr__(self) -> str:
        _o_0_ = '(MALFORMED UNION)'
        if self.subject_id is not None:
            _o_0_ = 'subject_id=%s' % self.subject_id
        if self.service_id is not None:
            _o_0_ = 'service_id=%s' % self.service_id
        return f'uavcan.node.port.ID.1.0({_o_0_})'

    _EXTENT_BYTES_ = 3

    _MODEL_: _pydsdl_.UnionType = _dsdl_.CompositeObject._restore_constant_(
        'ABzY8L4#Cb0{`uoTaOe)6vt=T+st0r#RWv<(hA}(mmXFY0Yyb1MAEX{i80Z#y1QmhVNZA4UA^p*n8<_1O)7B`ibtP_KKh^!zWa&%'
        '2%efgbJ^t<UwC4Y$*-=bPF0=rpPC;=9{oF2>3sD5bS=!o$Yr_6B#-2M?nlC9LDEW-Tq<F7?RG4a_|{q~%tN#Az<h7!^(c#Z3;X5@'
        'z7p`*jgwHgX_6`T@<pSoY(-=_PBKu@<9De1(0D^$<tOvN=t;(v%A{W?k(;m3-ZQ-DjWT-lk`z(c_h5pBTydtXTe!;fO_ddaDl)Ob'
        'Q5e;`pK$SJ;olX3LQi2FYF(#b3LSx2nm6|>m(onOq>?Lk^S9$%He(T9j+JPNY~vA4GG8hdiMXl2c+==`z;ne~=!SuPdgrySAv?{z'
        'fPGhN7oJk(M{~pI?JQS34tW+18d@)W+|%d^j|%i)goR09bj4unR$aZ2#CDGAZ+{LPDjo2q;ULVzLTO?6%BNo#I08rY7$akQyBij('
        'X(n=eXB)O#y}=c>@u+JamUOL=@xZp`*nf%2*sn)UFP>R6b|bl8_(IPO+&J^s%J8v%9fmz{0_p{xS154ZfGZK2b-k4}<f;gny)h<3'
        'v#htVJSnn3U`Hfa%JDSxY8{f6sOK`mh^yZ(e7;)Gd73oq4Vks>@l4cJl0<nOmsK)uvN9OzY2imQV3}wZkzKGKOnIG#*m$Yi)$6@@'
        'aTnd=ZrP2u&w%IXMkZoqV`N1J!mPs)eVWD}!wJqU5KhM9rpO%}>4c&oF<=~j%~9Bsry`II8FUWTwfE^qc#?;@H_^X%TtRKF8$ESi'
        's?R(1o1%B?dYC1t(ay7s<ZCTI!QJB)u83BGfo)g6nu?68B<lz87z;pR%E47VbB%`~9^Vs#;Fj%OE~1EMYnyvv=@&EaO}BF&6(KDx'
        '7_VCRxX+f1jW=rxeAO1lZDQbESfk#MomXjlTZqG!Lv3$_>Z4R2vm9xA<Ca_6UX}W5mg8-2!g8$bO<In&y(t<$Z8_Zbw$i*AvNucf'
        'w^`1%z1N6y#O=f##GS;~iMxnz5O)*bB<>;ZCGI2cCpyHph;I`Q5DyaHAs!;WOPnVz5DycN5RVd%5nW=Pc$~OMe2;j7xI{cje4luV'
        'c$#>I_yO@l;#uNH#E*%e5YLq?P%BY`c-;Bfpf=y?2nyFkUS^lo1gl@z*wbv-@jTTpQ}p?&KOmR2LAfNsr3Kv=4ezNdEWs(t1vsmR'
        'Pc9B<BAl}`|Aar_Z}_W#^XqV787{sgN$VcQprpa2QohQ*|1V$g8F=Mpm*IL(AMW%@Uk<234OIcYwqgLxn}u)i%U`AbtJH_bPvm<U'
        'j{SV6#Q6=j-JKk&RN(i1?tJ$$a_4DD^Xu&#(?TUqCK@7hgv9j7Y@IulPEOLTm-^*S*xU*r$wlla-gIP$4++dBOf{QZ-^w_2l18U&'
        'mpy7rai<y=Eqsy&JaR5y+&s+=b?)KvGVYndhs6xTCGg>dPiT5F_m!)P%5}&avbqEdKjWdlAdRmN{Pgd@C#QX}#ZP@h=vw)Nz$cP@'
        '<!=yxsuh4iQ`4Ql8JkVqb?}Pq+#B$Z$Tx@uJYL3N=(O#^wq3opo~~?cwgKh-2SI6zwfhVJ00'
    )
    assert isinstance(_MODEL_, _pydsdl_.UnionType)
