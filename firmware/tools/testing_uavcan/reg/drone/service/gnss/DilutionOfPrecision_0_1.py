# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /tmp/yakut-dsdl-zmn42v0l/public_regulated_data_types-master/reg/drone/service/gnss/DilutionOfPrecision.0.1.uavcan
#
# Generated at:  2021-09-29 15:15:52.757450 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     reg.drone.service.gnss.DilutionOfPrecision
# Version:       0.1
#
# pylint: skip-file

from __future__ import annotations
import numpy as _np_
import typing as _ty_
import pydsdl as _pydsdl_
import pyuavcan.dsdl as _dsdl_


# noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class DilutionOfPrecision_0_1(_dsdl_.CompositeObject):
    """
    Generated property settings use relaxed type signatures, accepting a large variety of
    possible representations of the value, which are automatically converted to a well-defined
    internal representation. When accessing a property, this strict well-defined internal
    representation is always returned. The implicit strictification enables more precise static
    type analysis.

    The value returned by the __repr__() method may be invariant to some of the field values,
    and its format is not guaranteed to be stable. Therefore, the returned string representation
    can be used only for displaying purposes; any kind of automation build on top of that will
    be fragile and prone to mismaintenance.
    """
    def __init__(self,
                 geometric:  _ty_.Optional[_ty_.Union[int, float, _np_.float16]] = None,
                 position:   _ty_.Optional[_ty_.Union[int, float, _np_.float16]] = None,
                 horizontal: _ty_.Optional[_ty_.Union[int, float, _np_.float16]] = None,
                 vertical:   _ty_.Optional[_ty_.Union[int, float, _np_.float16]] = None,
                 time:       _ty_.Optional[_ty_.Union[int, float, _np_.float16]] = None,
                 northing:   _ty_.Optional[_ty_.Union[int, float, _np_.float16]] = None,
                 easting:    _ty_.Optional[_ty_.Union[int, float, _np_.float16]] = None) -> None:
        """
        reg.drone.service.gnss.DilutionOfPrecision.0.1
        Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
        :param geometric:  saturated float16 geometric
        :param position:   saturated float16 position
        :param horizontal: saturated float16 horizontal
        :param vertical:   saturated float16 vertical
        :param time:       saturated float16 time
        :param northing:   saturated float16 northing
        :param easting:    saturated float16 easting
        """
        self._geometric:  float
        self._position:   float
        self._horizontal: float
        self._vertical:   float
        self._time:       float
        self._northing:   float
        self._easting:    float

        self.geometric = geometric if geometric is not None else 0.0

        self.position = position if position is not None else 0.0

        self.horizontal = horizontal if horizontal is not None else 0.0

        self.vertical = vertical if vertical is not None else 0.0

        self.time = time if time is not None else 0.0

        self.northing = northing if northing is not None else 0.0

        self.easting = easting if easting is not None else 0.0

    @property
    def geometric(self) -> float:
        """
        saturated float16 geometric
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._geometric

    @geometric.setter
    def geometric(self, x: _ty_.Union[int, float, _np_.float16]) -> None:
        """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
        x = float(x)
        in_range = -65504.0 <= x <= 65504.0
        if in_range or not _np_.isfinite(x):
            self._geometric = x
        else:
            raise ValueError(f'geometric: value {x} is not in [-65504, 65504]')

    @property
    def position(self) -> float:
        """
        saturated float16 position
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._position

    @position.setter
    def position(self, x: _ty_.Union[int, float, _np_.float16]) -> None:
        """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
        x = float(x)
        in_range = -65504.0 <= x <= 65504.0
        if in_range or not _np_.isfinite(x):
            self._position = x
        else:
            raise ValueError(f'position: value {x} is not in [-65504, 65504]')

    @property
    def horizontal(self) -> float:
        """
        saturated float16 horizontal
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._horizontal

    @horizontal.setter
    def horizontal(self, x: _ty_.Union[int, float, _np_.float16]) -> None:
        """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
        x = float(x)
        in_range = -65504.0 <= x <= 65504.0
        if in_range or not _np_.isfinite(x):
            self._horizontal = x
        else:
            raise ValueError(f'horizontal: value {x} is not in [-65504, 65504]')

    @property
    def vertical(self) -> float:
        """
        saturated float16 vertical
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._vertical

    @vertical.setter
    def vertical(self, x: _ty_.Union[int, float, _np_.float16]) -> None:
        """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
        x = float(x)
        in_range = -65504.0 <= x <= 65504.0
        if in_range or not _np_.isfinite(x):
            self._vertical = x
        else:
            raise ValueError(f'vertical: value {x} is not in [-65504, 65504]')

    @property
    def time(self) -> float:
        """
        saturated float16 time
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._time

    @time.setter
    def time(self, x: _ty_.Union[int, float, _np_.float16]) -> None:
        """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
        x = float(x)
        in_range = -65504.0 <= x <= 65504.0
        if in_range or not _np_.isfinite(x):
            self._time = x
        else:
            raise ValueError(f'time: value {x} is not in [-65504, 65504]')

    @property
    def northing(self) -> float:
        """
        saturated float16 northing
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._northing

    @northing.setter
    def northing(self, x: _ty_.Union[int, float, _np_.float16]) -> None:
        """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
        x = float(x)
        in_range = -65504.0 <= x <= 65504.0
        if in_range or not _np_.isfinite(x):
            self._northing = x
        else:
            raise ValueError(f'northing: value {x} is not in [-65504, 65504]')

    @property
    def easting(self) -> float:
        """
        saturated float16 easting
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._easting

    @easting.setter
    def easting(self, x: _ty_.Union[int, float, _np_.float16]) -> None:
        """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
        x = float(x)
        in_range = -65504.0 <= x <= 65504.0
        if in_range or not _np_.isfinite(x):
            self._easting = x
        else:
            raise ValueError(f'easting: value {x} is not in [-65504, 65504]')

    # noinspection PyProtectedMember
    def _serialize_(self, _ser_: DilutionOfPrecision_0_1._SerializerTypeVar_) -> None:
        assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
        _base_offset_ = _ser_.current_bit_length
        if _np_.isfinite(self.geometric):
            if self.geometric > 65504.0:
                _ser_.add_aligned_f16(65504.0)
            elif self.geometric < -65504.0:
                _ser_.add_aligned_f16(-65504.0)
            else:
                _ser_.add_aligned_f16(self.geometric)
        else:
            _ser_.add_aligned_f16(self.geometric)
        if _np_.isfinite(self.position):
            if self.position > 65504.0:
                _ser_.add_aligned_f16(65504.0)
            elif self.position < -65504.0:
                _ser_.add_aligned_f16(-65504.0)
            else:
                _ser_.add_aligned_f16(self.position)
        else:
            _ser_.add_aligned_f16(self.position)
        if _np_.isfinite(self.horizontal):
            if self.horizontal > 65504.0:
                _ser_.add_aligned_f16(65504.0)
            elif self.horizontal < -65504.0:
                _ser_.add_aligned_f16(-65504.0)
            else:
                _ser_.add_aligned_f16(self.horizontal)
        else:
            _ser_.add_aligned_f16(self.horizontal)
        if _np_.isfinite(self.vertical):
            if self.vertical > 65504.0:
                _ser_.add_aligned_f16(65504.0)
            elif self.vertical < -65504.0:
                _ser_.add_aligned_f16(-65504.0)
            else:
                _ser_.add_aligned_f16(self.vertical)
        else:
            _ser_.add_aligned_f16(self.vertical)
        if _np_.isfinite(self.time):
            if self.time > 65504.0:
                _ser_.add_aligned_f16(65504.0)
            elif self.time < -65504.0:
                _ser_.add_aligned_f16(-65504.0)
            else:
                _ser_.add_aligned_f16(self.time)
        else:
            _ser_.add_aligned_f16(self.time)
        if _np_.isfinite(self.northing):
            if self.northing > 65504.0:
                _ser_.add_aligned_f16(65504.0)
            elif self.northing < -65504.0:
                _ser_.add_aligned_f16(-65504.0)
            else:
                _ser_.add_aligned_f16(self.northing)
        else:
            _ser_.add_aligned_f16(self.northing)
        if _np_.isfinite(self.easting):
            if self.easting > 65504.0:
                _ser_.add_aligned_f16(65504.0)
            elif self.easting < -65504.0:
                _ser_.add_aligned_f16(-65504.0)
            else:
                _ser_.add_aligned_f16(self.easting)
        else:
            _ser_.add_aligned_f16(self.easting)
        _ser_.pad_to_alignment(8)
        assert 112 <= (_ser_.current_bit_length - _base_offset_) <= 112, \
            'Bad serialization of reg.drone.service.gnss.DilutionOfPrecision.0.1'

    # noinspection PyProtectedMember
    @staticmethod
    def _deserialize_(_des_: DilutionOfPrecision_0_1._DeserializerTypeVar_) -> DilutionOfPrecision_0_1:
        assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
        _base_offset_ = _des_.consumed_bit_length
        # Temporary _f0_ holds the value of "geometric"
        _f0_ = _des_.fetch_aligned_f16()
        # Temporary _f1_ holds the value of "position"
        _f1_ = _des_.fetch_aligned_f16()
        # Temporary _f2_ holds the value of "horizontal"
        _f2_ = _des_.fetch_aligned_f16()
        # Temporary _f3_ holds the value of "vertical"
        _f3_ = _des_.fetch_aligned_f16()
        # Temporary _f4_ holds the value of "time"
        _f4_ = _des_.fetch_aligned_f16()
        # Temporary _f5_ holds the value of "northing"
        _f5_ = _des_.fetch_aligned_f16()
        # Temporary _f6_ holds the value of "easting"
        _f6_ = _des_.fetch_aligned_f16()
        self = DilutionOfPrecision_0_1(
            geometric=_f0_,
            position=_f1_,
            horizontal=_f2_,
            vertical=_f3_,
            time=_f4_,
            northing=_f5_,
            easting=_f6_)
        _des_.pad_to_alignment(8)
        assert 112 <= (_des_.consumed_bit_length - _base_offset_) <= 112, \
            'Bad deserialization of reg.drone.service.gnss.DilutionOfPrecision.0.1'
        assert isinstance(self, DilutionOfPrecision_0_1)
        return self

    def __repr__(self) -> str:
        _o_0_ = ', '.join([
            'geometric=%s' % self.geometric,
            'position=%s' % self.position,
            'horizontal=%s' % self.horizontal,
            'vertical=%s' % self.vertical,
            'time=%s' % self.time,
            'northing=%s' % self.northing,
            'easting=%s' % self.easting,
        ])
        return f'reg.drone.service.gnss.DilutionOfPrecision.0.1({_o_0_})'

    _EXTENT_BYTES_ = 14

    _MODEL_: _pydsdl_.StructureType = _dsdl_.CompositeObject._restore_constant_(
        'ABzY8D1%gC0{_)jTW=gS6i!6aCR;A4QYyg%wS)wlqRebd!$Sm8A#Fg~cDtgX@IqYAjI*{fW4pd=vJnXS0BR&lAk{qZJCG0;@!vR}'
        '-A&T$Mo4*MrPZAAIp62wGv_=0e(slF7ia39zorI-Dar&JsyQk70m(|5;9OQp8g6OuuROHc<<@DsHBdA>4=Yc@x1s6hu^<)ruWQ;%'
        '3M~aqfTPcIn)HM*$sJxg%cXd*)73QR2F&0WaG&bhWHbKaqmlhQv}fA0KZd8lU&6#%%`<1I317oDXC!zO75w}rr)6=RSOXWt5^Q6('
        'XTg=`6}P+(5sRCpB=*I#UBVf+xTK<IS!gc-WloI6l`LprSNzrP7#?BC2KeqrS3JiL;q&0HU}K3Wh%QbNJp-PK^aQuAh#T){lE(@e'
        'sLSTa1`a>}!P;8uR)|b4WAlEoM`cCfym|0*xRCMj>757N=v^9S%$C{Jk@ZG<iM`3*V%MHA#NM7DTd2Ql{RNtSu6tgZ29uf}NMT7?'
        '6Mc5>e4rsL&qp+m&Py|AIW%LW*gAJ6LTbyn=+!ix^U_?T&<<mkyF(W0mrwLH&IUv6M7DR?Wp;yIXY1^Jw!uDR_t;(b1?#YF_N9Y9'
        'ET{tY5KD`2=wHP<e4iFrL86!!q2n)OBc0AEI7*5YfiCk;Qd_BXKz5y7jlI8mP>EYN`>irnE-QJCL9nijl*d9bs}*ETbqc<;7IQih'
        'a~j2*P7!m`N^T^M^m78bUdD_V*k4m&@dz0XS@WyI*_oLwM$uRg2nvEI6sUp(3~DlKm03?yDv~|E%M~p+Nu=(j@$G0^EO)RPZ@iK;'
        'B1xZ=4j2rRt}Kv{7G)IWQtUWG3$({ALnO}~=xT6c!_`$}nKTqZs)+6bsfpp1Y3X_lo{^(ZU{;8nBEW#^s7V@)kClSj#p!`Gh3ZA!'
        't~U_s6;h#(P*cEj`zCr1(Xr7V8@4u9wp+;>0Mvf~#&K+V+|b>qXP!ZO^;t%xh(~f_SI9jvE(?^zP>ZZY9nwkS_{d5aH}8z6;_-BX'
        'uVzob2mkUX+}^9-AHwTsKKhriRKcUONX($hWErQ`@_kxKn7MW9D5{B-`gqD-z&YbExta8@bxBcxXeNS~WlxSQ>0jTFBC0`5rSywK'
        'M(DzLcbq`>r?7ofTkO04dn8n^<I0lg!9+bS;JP)!Poddf`q^Y~|Egi3LwnX`&<+(B@qz<`>__8byyRdyM05j#K!~WX=nl-b--e0&'
        'K4zmPV}G_0`wRYmgX5nV^hYF~T%L|?K~QTFdun+)_BI6Fp2VJ7o{sH8P<Il0YI!>LF$6uH#GYE7j#Ut(PGT3_<g&?Jmi!A%1yBj3'
        '2><{'
    )
    assert isinstance(_MODEL_, _pydsdl_.StructureType)
